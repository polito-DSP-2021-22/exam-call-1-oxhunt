{"ast":null,"code":"var TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(key, value) {\n    this.color = true;\n    this.key = undefined;\n    this.value = undefined;\n    this.parent = undefined;\n    this.brother = undefined;\n    this.leftChild = undefined;\n    this.rightChild = undefined;\n    this.key = key;\n    this.value = value;\n  }\n\n  TreeNode.prototype.rotateLeft = function () {\n    var PP = this.parent;\n    var PB = this.brother;\n    var F = this.leftChild;\n    var V = this.rightChild;\n    if (!V) throw new Error(\"unknown error\");\n    var R = V.leftChild;\n    var X = V.rightChild;\n\n    if (PP) {\n      if (PP.leftChild === this) PP.leftChild = V;else if (PP.rightChild === this) PP.rightChild = V;\n    }\n\n    V.parent = PP;\n    V.brother = PB;\n    V.leftChild = this;\n    V.rightChild = X;\n    if (PB) PB.brother = V;\n    this.parent = V;\n    this.brother = X;\n    this.leftChild = F;\n    this.rightChild = R;\n\n    if (X) {\n      X.parent = V;\n      X.brother = this;\n    }\n\n    if (F) {\n      F.parent = this;\n      F.brother = R;\n    }\n\n    if (R) {\n      R.parent = this;\n      R.brother = F;\n    }\n\n    return V;\n  };\n\n  TreeNode.prototype.rotateRight = function () {\n    var PP = this.parent;\n    var PB = this.brother;\n    var F = this.leftChild;\n    if (!F) throw new Error(\"unknown error\");\n    var V = this.rightChild;\n    var D = F.leftChild;\n    var K = F.rightChild;\n\n    if (PP) {\n      if (PP.leftChild === this) PP.leftChild = F;else if (PP.rightChild === this) PP.rightChild = F;\n    }\n\n    F.parent = PP;\n    F.brother = PB;\n    F.leftChild = D;\n    F.rightChild = this;\n    if (PB) PB.brother = F;\n\n    if (D) {\n      D.parent = F;\n      D.brother = this;\n    }\n\n    this.parent = F;\n    this.brother = D;\n    this.leftChild = K;\n    this.rightChild = V;\n\n    if (K) {\n      K.parent = this;\n      K.brother = V;\n    }\n\n    if (V) {\n      V.parent = this;\n      V.brother = K;\n    }\n\n    return F;\n  };\n\n  TreeNode.prototype.remove = function () {\n    if (this.leftChild || this.rightChild) throw new Error(\"can only remove leaf node\");\n\n    if (this.parent) {\n      if (this === this.parent.leftChild) this.parent.leftChild = undefined;else if (this === this.parent.rightChild) this.parent.rightChild = undefined;\n    }\n\n    if (this.brother) this.brother.brother = undefined;\n    this.key = undefined;\n    this.value = undefined;\n    this.parent = undefined;\n    this.brother = undefined;\n  };\n\n  TreeNode.TreeNodeColorType = {\n    red: true,\n    black: false\n  };\n  return TreeNode;\n}();\n\nObject.freeze(TreeNode);\nexport default TreeNode;","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/node_modules/js-sdsl/dist/esm/Base/TreeNode.js"],"names":["TreeNode","key","value","color","undefined","parent","brother","leftChild","rightChild","prototype","rotateLeft","PP","PB","F","V","Error","R","X","rotateRight","D","K","remove","TreeNodeColorType","red","black","Object","freeze"],"mappings":"AAAA,IAAIA,QAAQ;AAAG;AAAe,YAAY;AACtC,WAASA,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC1B,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKF,GAAL,GAAWG,SAAX;AACA,SAAKF,KAAL,GAAaE,SAAb;AACA,SAAKC,MAAL,GAAcD,SAAd;AACA,SAAKE,OAAL,GAAeF,SAAf;AACA,SAAKG,SAAL,GAAiBH,SAAjB;AACA,SAAKI,UAAL,GAAkBJ,SAAlB;AACA,SAAKH,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AACDF,EAAAA,QAAQ,CAACS,SAAT,CAAmBC,UAAnB,GAAgC,YAAY;AACxC,QAAIC,EAAE,GAAG,KAAKN,MAAd;AACA,QAAIO,EAAE,GAAG,KAAKN,OAAd;AACA,QAAIO,CAAC,GAAG,KAAKN,SAAb;AACA,QAAIO,CAAC,GAAG,KAAKN,UAAb;AACA,QAAI,CAACM,CAAL,EACI,MAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACJ,QAAIC,CAAC,GAAGF,CAAC,CAACP,SAAV;AACA,QAAIU,CAAC,GAAGH,CAAC,CAACN,UAAV;;AACA,QAAIG,EAAJ,EAAQ;AACJ,UAAIA,EAAE,CAACJ,SAAH,KAAiB,IAArB,EACII,EAAE,CAACJ,SAAH,GAAeO,CAAf,CADJ,KAEK,IAAIH,EAAE,CAACH,UAAH,KAAkB,IAAtB,EACDG,EAAE,CAACH,UAAH,GAAgBM,CAAhB;AACP;;AACDA,IAAAA,CAAC,CAACT,MAAF,GAAWM,EAAX;AACAG,IAAAA,CAAC,CAACR,OAAF,GAAYM,EAAZ;AACAE,IAAAA,CAAC,CAACP,SAAF,GAAc,IAAd;AACAO,IAAAA,CAAC,CAACN,UAAF,GAAeS,CAAf;AACA,QAAIL,EAAJ,EACIA,EAAE,CAACN,OAAH,GAAaQ,CAAb;AACJ,SAAKT,MAAL,GAAcS,CAAd;AACA,SAAKR,OAAL,GAAeW,CAAf;AACA,SAAKV,SAAL,GAAiBM,CAAjB;AACA,SAAKL,UAAL,GAAkBQ,CAAlB;;AACA,QAAIC,CAAJ,EAAO;AACHA,MAAAA,CAAC,CAACZ,MAAF,GAAWS,CAAX;AACAG,MAAAA,CAAC,CAACX,OAAF,GAAY,IAAZ;AACH;;AACD,QAAIO,CAAJ,EAAO;AACHA,MAAAA,CAAC,CAACR,MAAF,GAAW,IAAX;AACAQ,MAAAA,CAAC,CAACP,OAAF,GAAYU,CAAZ;AACH;;AACD,QAAIA,CAAJ,EAAO;AACHA,MAAAA,CAAC,CAACX,MAAF,GAAW,IAAX;AACAW,MAAAA,CAAC,CAACV,OAAF,GAAYO,CAAZ;AACH;;AACD,WAAOC,CAAP;AACH,GAtCD;;AAuCAd,EAAAA,QAAQ,CAACS,SAAT,CAAmBS,WAAnB,GAAiC,YAAY;AACzC,QAAIP,EAAE,GAAG,KAAKN,MAAd;AACA,QAAIO,EAAE,GAAG,KAAKN,OAAd;AACA,QAAIO,CAAC,GAAG,KAAKN,SAAb;AACA,QAAI,CAACM,CAAL,EACI,MAAM,IAAIE,KAAJ,CAAU,eAAV,CAAN;AACJ,QAAID,CAAC,GAAG,KAAKN,UAAb;AACA,QAAIW,CAAC,GAAGN,CAAC,CAACN,SAAV;AACA,QAAIa,CAAC,GAAGP,CAAC,CAACL,UAAV;;AACA,QAAIG,EAAJ,EAAQ;AACJ,UAAIA,EAAE,CAACJ,SAAH,KAAiB,IAArB,EACII,EAAE,CAACJ,SAAH,GAAeM,CAAf,CADJ,KAEK,IAAIF,EAAE,CAACH,UAAH,KAAkB,IAAtB,EACDG,EAAE,CAACH,UAAH,GAAgBK,CAAhB;AACP;;AACDA,IAAAA,CAAC,CAACR,MAAF,GAAWM,EAAX;AACAE,IAAAA,CAAC,CAACP,OAAF,GAAYM,EAAZ;AACAC,IAAAA,CAAC,CAACN,SAAF,GAAcY,CAAd;AACAN,IAAAA,CAAC,CAACL,UAAF,GAAe,IAAf;AACA,QAAII,EAAJ,EACIA,EAAE,CAACN,OAAH,GAAaO,CAAb;;AACJ,QAAIM,CAAJ,EAAO;AACHA,MAAAA,CAAC,CAACd,MAAF,GAAWQ,CAAX;AACAM,MAAAA,CAAC,CAACb,OAAF,GAAY,IAAZ;AACH;;AACD,SAAKD,MAAL,GAAcQ,CAAd;AACA,SAAKP,OAAL,GAAea,CAAf;AACA,SAAKZ,SAAL,GAAiBa,CAAjB;AACA,SAAKZ,UAAL,GAAkBM,CAAlB;;AACA,QAAIM,CAAJ,EAAO;AACHA,MAAAA,CAAC,CAACf,MAAF,GAAW,IAAX;AACAe,MAAAA,CAAC,CAACd,OAAF,GAAYQ,CAAZ;AACH;;AACD,QAAIA,CAAJ,EAAO;AACHA,MAAAA,CAAC,CAACT,MAAF,GAAW,IAAX;AACAS,MAAAA,CAAC,CAACR,OAAF,GAAYc,CAAZ;AACH;;AACD,WAAOP,CAAP;AACH,GAtCD;;AAuCAb,EAAAA,QAAQ,CAACS,SAAT,CAAmBY,MAAnB,GAA4B,YAAY;AACpC,QAAI,KAAKd,SAAL,IAAkB,KAAKC,UAA3B,EACI,MAAM,IAAIO,KAAJ,CAAU,2BAAV,CAAN;;AACJ,QAAI,KAAKV,MAAT,EAAiB;AACb,UAAI,SAAS,KAAKA,MAAL,CAAYE,SAAzB,EACI,KAAKF,MAAL,CAAYE,SAAZ,GAAwBH,SAAxB,CADJ,KAEK,IAAI,SAAS,KAAKC,MAAL,CAAYG,UAAzB,EACD,KAAKH,MAAL,CAAYG,UAAZ,GAAyBJ,SAAzB;AACP;;AACD,QAAI,KAAKE,OAAT,EACI,KAAKA,OAAL,CAAaA,OAAb,GAAuBF,SAAvB;AACJ,SAAKH,GAAL,GAAWG,SAAX;AACA,SAAKF,KAAL,GAAaE,SAAb;AACA,SAAKC,MAAL,GAAcD,SAAd;AACA,SAAKE,OAAL,GAAeF,SAAf;AACH,GAfD;;AAgBAJ,EAAAA,QAAQ,CAACsB,iBAAT,GAA6B;AACzBC,IAAAA,GAAG,EAAE,IADoB;AAEzBC,IAAAA,KAAK,EAAE;AAFkB,GAA7B;AAIA,SAAOxB,QAAP;AACH,CA/G6B,EAA9B;;AAgHAyB,MAAM,CAACC,MAAP,CAAc1B,QAAd;AACA,eAAeA,QAAf","sourcesContent":["var TreeNode = /** @class */ (function () {\n    function TreeNode(key, value) {\n        this.color = true;\n        this.key = undefined;\n        this.value = undefined;\n        this.parent = undefined;\n        this.brother = undefined;\n        this.leftChild = undefined;\n        this.rightChild = undefined;\n        this.key = key;\n        this.value = value;\n    }\n    TreeNode.prototype.rotateLeft = function () {\n        var PP = this.parent;\n        var PB = this.brother;\n        var F = this.leftChild;\n        var V = this.rightChild;\n        if (!V)\n            throw new Error(\"unknown error\");\n        var R = V.leftChild;\n        var X = V.rightChild;\n        if (PP) {\n            if (PP.leftChild === this)\n                PP.leftChild = V;\n            else if (PP.rightChild === this)\n                PP.rightChild = V;\n        }\n        V.parent = PP;\n        V.brother = PB;\n        V.leftChild = this;\n        V.rightChild = X;\n        if (PB)\n            PB.brother = V;\n        this.parent = V;\n        this.brother = X;\n        this.leftChild = F;\n        this.rightChild = R;\n        if (X) {\n            X.parent = V;\n            X.brother = this;\n        }\n        if (F) {\n            F.parent = this;\n            F.brother = R;\n        }\n        if (R) {\n            R.parent = this;\n            R.brother = F;\n        }\n        return V;\n    };\n    TreeNode.prototype.rotateRight = function () {\n        var PP = this.parent;\n        var PB = this.brother;\n        var F = this.leftChild;\n        if (!F)\n            throw new Error(\"unknown error\");\n        var V = this.rightChild;\n        var D = F.leftChild;\n        var K = F.rightChild;\n        if (PP) {\n            if (PP.leftChild === this)\n                PP.leftChild = F;\n            else if (PP.rightChild === this)\n                PP.rightChild = F;\n        }\n        F.parent = PP;\n        F.brother = PB;\n        F.leftChild = D;\n        F.rightChild = this;\n        if (PB)\n            PB.brother = F;\n        if (D) {\n            D.parent = F;\n            D.brother = this;\n        }\n        this.parent = F;\n        this.brother = D;\n        this.leftChild = K;\n        this.rightChild = V;\n        if (K) {\n            K.parent = this;\n            K.brother = V;\n        }\n        if (V) {\n            V.parent = this;\n            V.brother = K;\n        }\n        return F;\n    };\n    TreeNode.prototype.remove = function () {\n        if (this.leftChild || this.rightChild)\n            throw new Error(\"can only remove leaf node\");\n        if (this.parent) {\n            if (this === this.parent.leftChild)\n                this.parent.leftChild = undefined;\n            else if (this === this.parent.rightChild)\n                this.parent.rightChild = undefined;\n        }\n        if (this.brother)\n            this.brother.brother = undefined;\n        this.key = undefined;\n        this.value = undefined;\n        this.parent = undefined;\n        this.brother = undefined;\n    };\n    TreeNode.TreeNodeColorType = {\n        red: true,\n        black: false\n    };\n    return TreeNode;\n}());\nObject.freeze(TreeNode);\nexport default TreeNode;\n"]},"metadata":{},"sourceType":"module"}