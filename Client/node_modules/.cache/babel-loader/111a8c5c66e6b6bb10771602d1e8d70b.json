{"ast":null,"code":"var _jsxFileName = \"/home/labinf/exam-call-1-oxhunt/Client/src/components/Login.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Alert, Modal } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginForm(props) {\n  _s();\n\n  const {\n    setUser,\n    setLoggedIn,\n    API\n  } = props;\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [show, setShow] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const doLogIn = async credentials => {\n    try {\n      const user = await API.logIn(credentials);\n      setUser(user);\n      setLoggedIn(true);\n    } catch (err) {\n      // error is handled and visualized in the login form, do not manage error, throw it\n      throw err;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setErrorMessage('');\n    const credentials = {\n      email,\n      password\n    }; // basic validation\n\n    let valid = true;\n\n    if (!email || !password || password.length < 6) {\n      valid = false;\n      setErrorMessage('Email cannot be empty and password must be at least six character long.');\n      setShow(true);\n    }\n\n    if (valid) {\n      doLogIn(credentials).catch(e => {\n        setErrorMessage(e.message);\n        setShow(true);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    centered: true,\n    show: true,\n    animation: false,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Alert, {\n          dismissible: true,\n          show: show,\n          onClose: () => setShow(false),\n          variant: \"danger\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            onChange: ev => setEmail(ev.target.value),\n            placeholder: \"name@example.com\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            placeholder: \"password\",\n            type: \"password\",\n            onChange: ev => setPassword(ev.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"zBhN1KcNv+NIiAsv2lfggK2vo7w=\");\n\n_c = LoginForm;\n\nfunction LogoutButton(props) {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"outline-light\",\n    onClick: props.logout,\n    children: \"Logout\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n}\n\n_c2 = LogoutButton;\nexport { LoginForm, LogoutButton };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginForm\");\n$RefreshReg$(_c2, \"LogoutButton\");","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/src/components/Login.js"],"names":["Form","Button","Alert","Modal","useState","LoginForm","props","setUser","setLoggedIn","API","email","setEmail","password","setPassword","show","setShow","errorMessage","setErrorMessage","doLogIn","credentials","user","logIn","err","handleSubmit","event","preventDefault","valid","length","catch","e","message","ev","target","value","LogoutButton","logout"],"mappings":"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","sourcesContent":["import { Form, Button, Alert, Modal } from 'react-bootstrap';\nimport { useState } from 'react';\n\n\n\nfunction LoginForm(props) {\n  const {setUser, setLoggedIn, API} = props\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [show, setShow] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const doLogIn = async (credentials) => {\n    try {\n      const user = await API.logIn(credentials);\n  \n      setUser(user);\n      setLoggedIn(true);\n    }\n    catch (err) {\n      // error is handled and visualized in the login form, do not manage error, throw it\n      throw err;\n    }\n  }\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setErrorMessage('');\n    const credentials = { email, password };\n\n    // basic validation\n    let valid = true;\n    if (!email || !password || password.length < 6) {\n      valid = false;\n      setErrorMessage('Email cannot be empty and password must be at least six character long.');\n      setShow(true);\n    }\n\n    if(valid)\n    {\n      doLogIn(credentials)\n        .catch( (e) => { setErrorMessage(e.message); setShow(true); } )\n    }\n\n\n  };\n\n\n  return (\n    <Modal centered show animation={false}>\n      <Form onSubmit={handleSubmit}>\n        <Modal.Header>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Alert\n            dismissible\n            show={show}\n            onClose={() => setShow(false)}\n            variant=\"danger\">\n            {errorMessage}\n          </Alert>\n          <Form.Group controlId=\"email\">\n            <Form.Label>email</Form.Label>\n            <Form.Control\n              type=\"email\"\n              onChange={(ev) => setEmail(ev.target.value)}\n              placeholder=\"name@example.com\"\n            />\n          </Form.Group>\n          <Form.Group controlId=\"password\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              placeholder=\"password\"\n              type=\"password\"\n              onChange={(ev) => setPassword(ev.target.value)}\n            />\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button type=\"submit\">Login</Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n      <Button variant=\"outline-light\" onClick={props.logout}>Logout</Button>\n  )\n}\n\nexport { LoginForm, LogoutButton };\n\n\n"]},"metadata":{},"sourceType":"module"}