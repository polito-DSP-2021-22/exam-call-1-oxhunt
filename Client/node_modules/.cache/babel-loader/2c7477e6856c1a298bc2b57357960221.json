{"ast":null,"code":"'use strict';\n/**\n * DefaultMessageAllocator constructor\n * @constructor\n */\n\nfunction DefaultMessageIdProvider() {\n  if (!(this instanceof DefaultMessageIdProvider)) {\n    return new DefaultMessageIdProvider();\n  }\n  /**\n   * MessageIDs starting with 1\n   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810\n   */\n\n\n  this.nextId = Math.max(1, Math.floor(Math.random() * 65535));\n}\n/**\n * allocate\n *\n * Get the next messageId.\n * @return unsigned int\n */\n\n\nDefaultMessageIdProvider.prototype.allocate = function () {\n  // id becomes current state of this.nextId and increments afterwards\n  const id = this.nextId++; // Ensure 16 bit unsigned int (max 65535, nextId got one higher)\n\n  if (this.nextId === 65536) {\n    this.nextId = 1;\n  }\n\n  return id;\n};\n/**\n * getLastAllocated\n * Get the last allocated messageId.\n * @return unsigned int\n */\n\n\nDefaultMessageIdProvider.prototype.getLastAllocated = function () {\n  return this.nextId === 1 ? 65535 : this.nextId - 1;\n};\n/**\n * register\n * Register messageId. If success return true, otherwise return false.\n * @param { unsigned int } - messageId to register,\n * @return boolean\n */\n\n\nDefaultMessageIdProvider.prototype.register = function (messageId) {\n  return true;\n};\n/**\n * deallocate\n * Deallocate messageId.\n * @param { unsigned int } - messageId to deallocate,\n */\n\n\nDefaultMessageIdProvider.prototype.deallocate = function (messageId) {};\n/**\n * clear\n * Deallocate all messageIds.\n */\n\n\nDefaultMessageIdProvider.prototype.clear = function () {};\n\nmodule.exports = DefaultMessageIdProvider;","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/node_modules/mqtt/lib/default-message-id-provider.js"],"names":["DefaultMessageIdProvider","nextId","Math","max","floor","random","prototype","allocate","id","getLastAllocated","register","messageId","deallocate","clear","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,SAASA,wBAAT,GAAqC;AACnC,MAAI,EAAE,gBAAgBA,wBAAlB,CAAJ,EAAiD;AAC/C,WAAO,IAAIA,wBAAJ,EAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,OAAKC,MAAL,GAAcC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,KAAgB,KAA3B,CAAZ,CAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAL,wBAAwB,CAACM,SAAzB,CAAmCC,QAAnC,GAA8C,YAAY;AACxD;AACA,QAAMC,EAAE,GAAG,KAAKP,MAAL,EAAX,CAFwD,CAGxD;;AACA,MAAI,KAAKA,MAAL,KAAgB,KAApB,EAA2B;AACzB,SAAKA,MAAL,GAAc,CAAd;AACD;;AACD,SAAOO,EAAP;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;;;AACAR,wBAAwB,CAACM,SAAzB,CAAmCG,gBAAnC,GAAsD,YAAY;AAChE,SAAQ,KAAKR,MAAL,KAAgB,CAAjB,GAAsB,KAAtB,GAA+B,KAAKA,MAAL,GAAc,CAApD;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAD,wBAAwB,CAACM,SAAzB,CAAmCI,QAAnC,GAA8C,UAAUC,SAAV,EAAqB;AACjE,SAAO,IAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACAX,wBAAwB,CAACM,SAAzB,CAAmCM,UAAnC,GAAgD,UAAUD,SAAV,EAAqB,CACpE,CADD;AAGA;AACA;AACA;AACA;;;AACAX,wBAAwB,CAACM,SAAzB,CAAmCO,KAAnC,GAA2C,YAAY,CACtD,CADD;;AAGAC,MAAM,CAACC,OAAP,GAAiBf,wBAAjB","sourcesContent":["'use strict'\n\n/**\n * DefaultMessageAllocator constructor\n * @constructor\n */\nfunction DefaultMessageIdProvider () {\n  if (!(this instanceof DefaultMessageIdProvider)) {\n    return new DefaultMessageIdProvider()\n  }\n\n  /**\n   * MessageIDs starting with 1\n   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810\n   */\n  this.nextId = Math.max(1, Math.floor(Math.random() * 65535))\n}\n\n/**\n * allocate\n *\n * Get the next messageId.\n * @return unsigned int\n */\nDefaultMessageIdProvider.prototype.allocate = function () {\n  // id becomes current state of this.nextId and increments afterwards\n  const id = this.nextId++\n  // Ensure 16 bit unsigned int (max 65535, nextId got one higher)\n  if (this.nextId === 65536) {\n    this.nextId = 1\n  }\n  return id\n}\n\n/**\n * getLastAllocated\n * Get the last allocated messageId.\n * @return unsigned int\n */\nDefaultMessageIdProvider.prototype.getLastAllocated = function () {\n  return (this.nextId === 1) ? 65535 : (this.nextId - 1)\n}\n\n/**\n * register\n * Register messageId. If success return true, otherwise return false.\n * @param { unsigned int } - messageId to register,\n * @return boolean\n */\nDefaultMessageIdProvider.prototype.register = function (messageId) {\n  return true\n}\n\n/**\n * deallocate\n * Deallocate messageId.\n * @param { unsigned int } - messageId to deallocate,\n */\nDefaultMessageIdProvider.prototype.deallocate = function (messageId) {\n}\n\n/**\n * clear\n * Deallocate all messageIds.\n */\nDefaultMessageIdProvider.prototype.clear = function () {\n}\n\nmodule.exports = DefaultMessageIdProvider\n"]},"metadata":{},"sourceType":"script"}