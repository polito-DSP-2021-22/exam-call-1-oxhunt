{"ast":null,"code":"var mqtt = require('mqtt');\n\nvar clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8);\nvar options = {\n  keepalive: 30,\n  clientId: clientId,\n  clean: true,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000,\n  will: {\n    topic: 'WillMsg',\n    payload: 'Connection Closed abnormally..!',\n    qos: 0,\n    retain: false\n  },\n  rejectUnauthorized: false\n};\nconst host = 'ws://127.0.0.1:8086';\nconst client = mqtt.connect(host, options);\nconst subscriptions = [];\nconst isSelectionTopic = RegExp(\"tasks/selection/\");\nconst isPublicTopic = RegExp(\"tasks/public/\");\nlet subscribedToPublic = false;\n/*\nconst unsubscribe = () => {\n  if (subscriptions.length > 0) {\n    const topic = subscriptions.pop();\n    console.log(\"Unsubscribing from: \" + topic)\n    client.unsubscribe(topic);\n    unsubscribe();\n  }\n}\n*/\n\nconst removeItem = (array, value) => {\n  var index = array.indexOf(value);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n};\n\nconst differentialSubscribe = (tasks, topic) => {\n  const requiredSubscriptions = tasks.map(t => topic + t.tid); // get list of unnecessary subscriptions\n\n  const unsubscribeList = subscriptions.filter(s => !requiredSubscriptions.includes(s)); // get list of all new necessary subscriptions\n\n  const subscribeList = requiredSubscriptions.filter(s => !subscriptions.includes(s)); //console.log(\"subscribelist: \", subscribeList, \"\\n unsubscribelist :\", unsubscribeList)\n  //console.log(\"subscriptions: \", subscriptions, \"\\n requiredSubscriptions :\", requiredSubscriptions)\n  // remove all unnecessary subscriptions\n\n  unsubscribeList.forEach(s => {\n    client.unsubscribe(s, {\n      qos: 0,\n      retain: true\n    }, (err, granted) => {\n      if (err) console.log(\"error:\", err, \", granted: \", granted);\n    });\n    console.log(\"unsubscribing from: \", s);\n    removeItem(subscriptions, s);\n  }); // add all necessary subscriptions\n\n  subscribeList.forEach(s => {\n    client.subscribe(s, {\n      qos: 0,\n      retain: true\n    }, (err, granted) => {\n      if (!err) console.log(\"subscribed\", granted[0]);\n      if (err) console.log(\"error:\", err, \", granted: \", granted);\n    });\n    subscriptions.push(s);\n  });\n};\n\nconst subscribeToAll = (action, topic) => {\n  if (subscribedToPublic && action) return;\n  if (!subscribedToPublic && !action) return;\n\n  if (action) {\n    client.subscribe(topic + \"#\", {\n      qos: 0,\n      retain: true\n    }, (err, granted) => {\n      if (!err) console.log(\"subscribed\", granted[0]);\n      if (err) console.log(\"error:\", err, \", granted: \", granted);\n    });\n    subscribedToPublic = true;\n  } else {\n    console.log(\"unsubscribed from \" + topic + \"#\");\n    client.unsubscribe(topic + \"#\", {\n      qos: 0,\n      retain: true\n    });\n    subscribedToPublic = false;\n  }\n};\n\nconst MQTTObject = (displayTaskSelection, updatePublicTasksInfo) => {\n  client.on('error', function (err) {\n    console.log(\"MQTT error: \", err);\n    client.end();\n  });\n  client.on('connect', function () {\n    console.log('MQTT client connected:' + clientId);\n  });\n  client.on('message', (topic, message) => {\n    try {\n      var parsedMessage = JSON.parse(message); //console.log(\"MQTT received message: \", parsedMessage, \", in topic: \", topic)\n\n      if (isSelectionTopic.test(topic)) {\n        if (parsedMessage.status === \"deleted\") {\n          client.unsubscribe(topic);\n          return;\n        }\n\n        displayTaskSelection(topic, parsedMessage);\n      } else if (isPublicTopic.test(topic)) updatePublicTasksInfo(topic, parsedMessage);\n    } catch (e) {\n      console.log(e);\n    }\n  });\n};\n\n_c = MQTTObject;\nexport default MQTTObject;\nexport { subscribeToAll, differentialSubscribe };\n\nvar _c;\n\n$RefreshReg$(_c, \"MQTTObject\");","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/src/utils/mqtt.js"],"names":["mqtt","require","clientId","Math","random","toString","substr","options","keepalive","clean","reconnectPeriod","connectTimeout","will","topic","payload","qos","retain","rejectUnauthorized","host","client","connect","subscriptions","isSelectionTopic","RegExp","isPublicTopic","subscribedToPublic","removeItem","array","value","index","indexOf","splice","differentialSubscribe","tasks","requiredSubscriptions","map","t","tid","unsubscribeList","filter","s","includes","subscribeList","forEach","unsubscribe","err","granted","console","log","subscribe","push","subscribeToAll","action","MQTTObject","displayTaskSelection","updatePublicTasksInfo","on","end","message","parsedMessage","JSON","parse","test","status","e"],"mappings":"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","sourcesContent":["var mqtt = require('mqtt')\nvar clientId = 'mqttjs_' + Math.random().toString(16).substr(2, 8)\n\nvar options = {\n  keepalive: 30,\n  clientId: clientId,\n  clean: true,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000,\n  will: {\n    topic: 'WillMsg',\n    payload: 'Connection Closed abnormally..!',\n    qos: 0,\n    retain: false\n  },\n  rejectUnauthorized: false\n}\nconst host = 'ws://127.0.0.1:8086'\nconst client = mqtt.connect(host, options);\nconst subscriptions = []\nconst isSelectionTopic = RegExp(\"tasks/selection/\")\nconst isPublicTopic = RegExp(\"tasks/public/\")\nlet subscribedToPublic = false\n\n/*\nconst unsubscribe = () => {\n  if (subscriptions.length > 0) {\n    const topic = subscriptions.pop();\n    console.log(\"Unsubscribing from: \" + topic)\n    client.unsubscribe(topic);\n    unsubscribe();\n  }\n}\n*/\nconst removeItem = (array, value)=> {\n  var index = array.indexOf(value);\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\n\nconst differentialSubscribe = (tasks, topic) => {\n  const requiredSubscriptions = tasks.map(t => topic + t.tid)\n  // get list of unnecessary subscriptions\n  const unsubscribeList = subscriptions.filter(s => !requiredSubscriptions.includes(s))\n  // get list of all new necessary subscriptions\n  const subscribeList = requiredSubscriptions.filter(s => !subscriptions.includes(s))\n  //console.log(\"subscribelist: \", subscribeList, \"\\n unsubscribelist :\", unsubscribeList)\n  //console.log(\"subscriptions: \", subscriptions, \"\\n requiredSubscriptions :\", requiredSubscriptions)\n  // remove all unnecessary subscriptions\n  unsubscribeList.forEach(s => {\n    client.unsubscribe(s, { qos: 0, retain: true }, (err, granted) => {\n      if (err) console.log(\"error:\", err, \", granted: \", granted)\n    })\n    console.log(\"unsubscribing from: \", s)\n    removeItem(subscriptions, s)\n  })\n\n  // add all necessary subscriptions\n  subscribeList.forEach(s => {\n    client.subscribe(s, { qos: 0, retain: true }, (err, granted) => {\n      if (!err) console.log(\"subscribed\", granted[0])\n      if (err) console.log(\"error:\", err, \", granted: \", granted)\n    })\n    subscriptions.push(s)\n  })\n}\n\nconst subscribeToAll = (action, topic) => {\n  if(subscribedToPublic && action)return;\n  if(!subscribedToPublic && !action)return;\n  if(action){\n    client.subscribe(topic + \"#\", { qos: 0, retain: true }, (err, granted) => {\n      if (!err) console.log(\"subscribed\", granted[0])\n      if (err) console.log(\"error:\", err, \", granted: \", granted)\n    })\n    subscribedToPublic=true\n  }\n  else{\n    console.log(\"unsubscribed from \" + topic + \"#\")\n    client.unsubscribe(topic + \"#\", { qos: 0, retain: true })\n    subscribedToPublic=false\n  }\n}\nconst MQTTObject = (displayTaskSelection, updatePublicTasksInfo) => {\n\n\n  client.on('error', function (err) {\n    console.log(\"MQTT error: \", err)\n    client.end()\n  })\n\n  client.on('connect', function () {\n    console.log('MQTT client connected:' + clientId)\n  })\n  client.on('message', (topic, message) => {\n    try {\n      var parsedMessage = JSON.parse(message);\n      //console.log(\"MQTT received message: \", parsedMessage, \", in topic: \", topic)\n      if (isSelectionTopic.test(topic)) {\n        if (parsedMessage.status === \"deleted\") {\n          client.unsubscribe(topic);\n          return\n        }\n        displayTaskSelection(topic, parsedMessage);\n      }\n      else if (isPublicTopic.test(topic)) updatePublicTasksInfo(topic, parsedMessage)\n    } catch (e) {\n      console.log(e);\n    }\n  })\n}\n\n\n\nexport default MQTTObject\nexport { subscribeToAll, differentialSubscribe }\n"]},"metadata":{},"sourceType":"module"}