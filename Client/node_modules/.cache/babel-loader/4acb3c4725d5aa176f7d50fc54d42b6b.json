{"ast":null,"code":"'use strict';\n/**\r\n * Module dependencies\r\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Store = require('./store');\n\nconst TopicAliasRecv = require('./topic-alias-recv');\n\nconst TopicAliasSend = require('./topic-alias-send');\n\nconst mqttPacket = require('mqtt-packet');\n\nconst DefaultMessageIdProvider = require('./default-message-id-provider');\n\nconst Writable = require('readable-stream').Writable;\n\nconst inherits = require('inherits');\n\nconst reInterval = require('reinterval');\n\nconst clone = require('rfdc/default');\n\nconst validations = require('./validations');\n\nconst xtend = require('xtend');\n\nconst debug = require('debug')('mqttjs:client');\n\nconst nextTick = process ? process.nextTick : function (callback) {\n  setTimeout(callback, 0);\n};\n\nconst setImmediate = global.setImmediate || function (callback) {\n  // works in node v0.8\n  nextTick(callback);\n};\n\nconst defaultConnectOptions = {\n  keepalive: 60,\n  reschedulePings: true,\n  protocolId: 'MQTT',\n  protocolVersion: 4,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000,\n  clean: true,\n  resubscribe: true\n};\nconst socketErrors = ['ECONNREFUSED', 'EADDRINUSE', 'ECONNRESET', 'ENOTFOUND']; // Other Socket Errors: EADDRINUSE, ECONNRESET, ENOTFOUND.\n\nconst errors = {\n  0: '',\n  1: 'Unacceptable protocol version',\n  2: 'Identifier rejected',\n  3: 'Server unavailable',\n  4: 'Bad username or password',\n  5: 'Not authorized',\n  16: 'No matching subscribers',\n  17: 'No subscription existed',\n  128: 'Unspecified error',\n  129: 'Malformed Packet',\n  130: 'Protocol Error',\n  131: 'Implementation specific error',\n  132: 'Unsupported Protocol Version',\n  133: 'Client Identifier not valid',\n  134: 'Bad User Name or Password',\n  135: 'Not authorized',\n  136: 'Server unavailable',\n  137: 'Server busy',\n  138: 'Banned',\n  139: 'Server shutting down',\n  140: 'Bad authentication method',\n  141: 'Keep Alive timeout',\n  142: 'Session taken over',\n  143: 'Topic Filter invalid',\n  144: 'Topic Name invalid',\n  145: 'Packet identifier in use',\n  146: 'Packet Identifier not found',\n  147: 'Receive Maximum exceeded',\n  148: 'Topic Alias invalid',\n  149: 'Packet too large',\n  150: 'Message rate too high',\n  151: 'Quota exceeded',\n  152: 'Administrative action',\n  153: 'Payload format invalid',\n  154: 'Retain not supported',\n  155: 'QoS not supported',\n  156: 'Use another server',\n  157: 'Server moved',\n  158: 'Shared Subscriptions not supported',\n  159: 'Connection rate exceeded',\n  160: 'Maximum connect time',\n  161: 'Subscription Identifiers not supported',\n  162: 'Wildcard Subscriptions not supported'\n};\n\nfunction defaultId() {\n  return 'mqttjs_' + Math.random().toString(16).substr(2, 8);\n}\n\nfunction applyTopicAlias(client, packet) {\n  if (client.options.protocolVersion === 5) {\n    if (packet.cmd === 'publish') {\n      let alias;\n\n      if (packet.properties) {\n        alias = packet.properties.topicAlias;\n      }\n\n      const topic = packet.topic.toString();\n\n      if (client.topicAliasSend) {\n        if (alias) {\n          if (topic.length !== 0) {\n            // register topic alias\n            debug('applyTopicAlias :: register topic: %s - alias: %d', topic, alias);\n\n            if (!client.topicAliasSend.put(topic, alias)) {\n              debug('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias);\n              return new Error('Sending Topic Alias out of range');\n            }\n          }\n        } else {\n          if (topic.length !== 0) {\n            if (client.options.autoAssignTopicAlias) {\n              alias = client.topicAliasSend.getAliasByTopic(topic);\n\n              if (alias) {\n                packet.topic = '';\n                packet.properties = { ...packet.properties,\n                  topicAlias: alias\n                };\n                debug('applyTopicAlias :: auto assign(use) topic: %s - alias: %d', topic, alias);\n              } else {\n                alias = client.topicAliasSend.getLruAlias();\n                client.topicAliasSend.put(topic, alias);\n                packet.properties = { ...packet.properties,\n                  topicAlias: alias\n                };\n                debug('applyTopicAlias :: auto assign topic: %s - alias: %d', topic, alias);\n              }\n            } else if (client.options.autoUseTopicAlias) {\n              alias = client.topicAliasSend.getAliasByTopic(topic);\n\n              if (alias) {\n                packet.topic = '';\n                packet.properties = { ...packet.properties,\n                  topicAlias: alias\n                };\n                debug('applyTopicAlias :: auto use topic: %s - alias: %d', topic, alias);\n              }\n            }\n          }\n        }\n      } else if (alias) {\n        debug('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias);\n        return new Error('Sending Topic Alias out of range');\n      }\n    }\n  }\n}\n\nfunction removeTopicAliasAndRecoverTopicName(client, packet) {\n  let alias;\n\n  if (packet.properties) {\n    alias = packet.properties.topicAlias;\n  }\n\n  let topic = packet.topic.toString();\n\n  if (topic.length === 0) {\n    // restore topic from alias\n    if (typeof alias === 'undefined') {\n      return new Error('Unregistered Topic Alias');\n    } else {\n      topic = client.topicAliasSend.getTopicByAlias(alias);\n\n      if (typeof topic === 'undefined') {\n        return new Error('Unregistered Topic Alias');\n      } else {\n        packet.topic = topic;\n      }\n    }\n  }\n\n  if (alias) {\n    delete packet.properties.topicAlias;\n  }\n}\n\nfunction sendPacket(client, packet, cb) {\n  debug('sendPacket :: packet: %O', packet);\n  debug('sendPacket :: emitting `packetsend`');\n  client.emit('packetsend', packet);\n  debug('sendPacket :: writing to stream');\n  const result = mqttPacket.writeToStream(packet, client.stream, client.options);\n  debug('sendPacket :: writeToStream result %s', result);\n\n  if (!result && cb) {\n    debug('sendPacket :: handle events on `drain` once through callback.');\n    client.stream.once('drain', cb);\n  } else if (cb) {\n    debug('sendPacket :: invoking cb');\n    cb();\n  }\n}\n\nfunction flush(queue) {\n  if (queue) {\n    debug('flush: queue exists? %b', !!queue);\n    Object.keys(queue).forEach(function (messageId) {\n      if (typeof queue[messageId].cb === 'function') {\n        queue[messageId].cb(new Error('Connection closed'));\n        delete queue[messageId];\n      }\n    });\n  }\n}\n\nfunction flushVolatile(queue) {\n  if (queue) {\n    debug('flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function');\n    Object.keys(queue).forEach(function (messageId) {\n      if (queue[messageId].volatile && typeof queue[messageId].cb === 'function') {\n        queue[messageId].cb(new Error('Connection closed'));\n        delete queue[messageId];\n      }\n    });\n  }\n}\n\nfunction storeAndSend(client, packet, cb, cbStorePut) {\n  debug('storeAndSend :: store packet with cmd %s to outgoingStore', packet.cmd);\n  let storePacket = packet;\n  let err;\n\n  if (storePacket.cmd === 'publish') {\n    // The original packet is for sending.\n    // The cloned storePacket is for storing to resend on reconnect.\n    // Topic Alias must not be used after disconnected.\n    storePacket = clone(packet);\n    err = removeTopicAliasAndRecoverTopicName(client, storePacket);\n\n    if (err) {\n      return cb && cb(err);\n    }\n  }\n\n  client.outgoingStore.put(storePacket, function storedPacket(err) {\n    if (err) {\n      return cb && cb(err);\n    }\n\n    cbStorePut();\n    sendPacket(client, packet, cb);\n  });\n}\n\nfunction nop(error) {\n  debug('nop ::', error);\n}\n/**\r\n * MqttClient constructor\r\n *\r\n * @param {Stream} stream - stream\r\n * @param {Object} [options] - connection options\r\n * (see Connection#connect)\r\n */\n\n\nfunction MqttClient(streamBuilder, options) {\n  let k;\n  const that = this;\n\n  if (!(this instanceof MqttClient)) {\n    return new MqttClient(streamBuilder, options);\n  }\n\n  this.options = options || {}; // Defaults\n\n  for (k in defaultConnectOptions) {\n    if (typeof this.options[k] === 'undefined') {\n      this.options[k] = defaultConnectOptions[k];\n    } else {\n      this.options[k] = options[k];\n    }\n  }\n\n  debug('MqttClient :: options.protocol', options.protocol);\n  debug('MqttClient :: options.protocolVersion', options.protocolVersion);\n  debug('MqttClient :: options.username', options.username);\n  debug('MqttClient :: options.keepalive', options.keepalive);\n  debug('MqttClient :: options.reconnectPeriod', options.reconnectPeriod);\n  debug('MqttClient :: options.rejectUnauthorized', options.rejectUnauthorized);\n  debug('MqttClient :: options.topicAliasMaximum', options.topicAliasMaximum);\n  this.options.clientId = typeof options.clientId === 'string' ? options.clientId : defaultId();\n  debug('MqttClient :: clientId', this.options.clientId);\n  this.options.customHandleAcks = options.protocolVersion === 5 && options.customHandleAcks ? options.customHandleAcks : function () {\n    arguments[3](0);\n  };\n  this.streamBuilder = streamBuilder;\n  this.messageIdProvider = typeof this.options.messageIdProvider === 'undefined' ? new DefaultMessageIdProvider() : this.options.messageIdProvider; // Inflight message storages\n\n  this.outgoingStore = options.outgoingStore || new Store();\n  this.incomingStore = options.incomingStore || new Store(); // Should QoS zero messages be queued when the connection is broken?\n\n  this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero; // map of subscribed topics to support reconnection\n\n  this._resubscribeTopics = {}; // map of a subscribe messageId and a topic\n\n  this.messageIdToTopic = {}; // Ping timer, setup in _setupPingTimer\n\n  this.pingTimer = null; // Is the client connected?\n\n  this.connected = false; // Are we disconnecting?\n\n  this.disconnecting = false; // Packet queue\n\n  this.queue = []; // connack timer\n\n  this.connackTimer = null; // Reconnect timer\n\n  this.reconnectTimer = null; // Is processing store?\n\n  this._storeProcessing = false; // Packet Ids are put into the store during store processing\n\n  this._packetIdsDuringStoreProcessing = {}; // Store processing queue\n\n  this._storeProcessingQueue = []; // Inflight callbacks\n\n  this.outgoing = {}; // True if connection is first time.\n\n  this._firstConnection = true;\n\n  if (options.topicAliasMaximum > 0) {\n    if (options.topicAliasMaximum > 0xffff) {\n      debug('MqttClient :: options.topicAliasMaximum is out of range');\n    } else {\n      this.topicAliasRecv = new TopicAliasRecv(options.topicAliasMaximum);\n    }\n  } // Send queued packets\n\n\n  this.on('connect', function () {\n    const queue = this.queue;\n\n    function deliver() {\n      const entry = queue.shift();\n      debug('deliver :: entry %o', entry);\n      let packet = null;\n\n      if (!entry) {\n        that._resubscribe();\n\n        return;\n      }\n\n      packet = entry.packet;\n      debug('deliver :: call _sendPacket for %o', packet);\n      let send = true;\n\n      if (packet.messageId && packet.messageId !== 0) {\n        if (!that.messageIdProvider.register(packet.messageId)) {\n          send = false;\n        }\n      }\n\n      if (send) {\n        that._sendPacket(packet, function (err) {\n          if (entry.cb) {\n            entry.cb(err);\n          }\n\n          deliver();\n        });\n      } else {\n        debug('messageId: %d has already used. The message is skipped and removed.', packet.messageId);\n        deliver();\n      }\n    }\n\n    debug('connect :: sending queued packets');\n    deliver();\n  });\n  this.on('close', function () {\n    debug('close :: connected set to `false`');\n    this.connected = false;\n    debug('close :: clearing connackTimer');\n    clearTimeout(this.connackTimer);\n    debug('close :: clearing ping timer');\n\n    if (that.pingTimer !== null) {\n      that.pingTimer.clear();\n      that.pingTimer = null;\n    }\n\n    if (this.topicAliasRecv) {\n      this.topicAliasRecv.clear();\n    }\n\n    debug('close :: calling _setupReconnect');\n\n    this._setupReconnect();\n  });\n  EventEmitter.call(this);\n  debug('MqttClient :: setting up stream');\n\n  this._setupStream();\n}\n\ninherits(MqttClient, EventEmitter);\n/**\r\n * setup the event handlers in the inner stream.\r\n *\r\n * @api private\r\n */\n\nMqttClient.prototype._setupStream = function () {\n  const that = this;\n  const writable = new Writable();\n  const parser = mqttPacket.parser(this.options);\n  let completeParse = null;\n  const packets = [];\n  debug('_setupStream :: calling method to clear reconnect');\n\n  this._clearReconnect();\n\n  debug('_setupStream :: using streamBuilder provided to client to create stream');\n  this.stream = this.streamBuilder(this);\n  parser.on('packet', function (packet) {\n    debug('parser :: on packet push to packets array.');\n    packets.push(packet);\n  });\n\n  function nextTickWork() {\n    if (packets.length) {\n      nextTick(work);\n    } else {\n      const done = completeParse;\n      completeParse = null;\n      done();\n    }\n  }\n\n  function work() {\n    debug('work :: getting next packet in queue');\n    const packet = packets.shift();\n\n    if (packet) {\n      debug('work :: packet pulled from queue');\n\n      that._handlePacket(packet, nextTickWork);\n    } else {\n      debug('work :: no packets in queue');\n      const done = completeParse;\n      completeParse = null;\n      debug('work :: done flag is %s', !!done);\n      if (done) done();\n    }\n  }\n\n  writable._write = function (buf, enc, done) {\n    completeParse = done;\n    debug('writable stream :: parsing buffer');\n    parser.parse(buf);\n    work();\n  };\n\n  function streamErrorHandler(error) {\n    debug('streamErrorHandler :: error', error.message);\n\n    if (socketErrors.includes(error.code)) {\n      // handle error\n      debug('streamErrorHandler :: emitting error');\n      that.emit('error', error);\n    } else {\n      nop(error);\n    }\n  }\n\n  debug('_setupStream :: pipe stream to writable stream');\n  this.stream.pipe(writable); // Suppress connection errors\n\n  this.stream.on('error', streamErrorHandler); // Echo stream close\n\n  this.stream.on('close', function () {\n    debug('(%s)stream :: on close', that.options.clientId);\n    flushVolatile(that.outgoing);\n    debug('stream: emit close to MqttClient');\n    that.emit('close');\n  }); // Send a connect packet\n\n  debug('_setupStream: sending packet `connect`');\n  const connectPacket = Object.create(this.options);\n  connectPacket.cmd = 'connect';\n\n  if (this.topicAliasRecv) {\n    if (!connectPacket.properties) {\n      connectPacket.properties = {};\n    }\n\n    if (this.topicAliasRecv) {\n      connectPacket.properties.topicAliasMaximum = this.topicAliasRecv.max;\n    }\n  } // avoid message queue\n\n\n  sendPacket(this, connectPacket); // Echo connection errors\n\n  parser.on('error', this.emit.bind(this, 'error')); // auth\n\n  if (this.options.properties) {\n    if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {\n      that.end(() => this.emit('error', new Error('Packet has no Authentication Method')));\n      return this;\n    }\n\n    if (this.options.properties.authenticationMethod && this.options.authPacket && typeof this.options.authPacket === 'object') {\n      const authPacket = xtend({\n        cmd: 'auth',\n        reasonCode: 0\n      }, this.options.authPacket);\n      sendPacket(this, authPacket);\n    }\n  } // many drain listeners are needed for qos 1 callbacks if the connection is intermittent\n\n\n  this.stream.setMaxListeners(1000);\n  clearTimeout(this.connackTimer);\n  this.connackTimer = setTimeout(function () {\n    debug('!!connectTimeout hit!! Calling _cleanUp with force `true`');\n\n    that._cleanUp(true);\n  }, this.options.connectTimeout);\n};\n\nMqttClient.prototype._handlePacket = function (packet, done) {\n  const options = this.options;\n\n  if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {\n    this.emit('error', new Error('exceeding packets size ' + packet.cmd));\n    this.end({\n      reasonCode: 149,\n      properties: {\n        reasonString: 'Maximum packet size was exceeded'\n      }\n    });\n    return this;\n  }\n\n  debug('_handlePacket :: emitting packetreceive');\n  this.emit('packetreceive', packet);\n\n  switch (packet.cmd) {\n    case 'publish':\n      this._handlePublish(packet, done);\n\n      break;\n\n    case 'puback':\n    case 'pubrec':\n    case 'pubcomp':\n    case 'suback':\n    case 'unsuback':\n      this._handleAck(packet);\n\n      done();\n      break;\n\n    case 'pubrel':\n      this._handlePubrel(packet, done);\n\n      break;\n\n    case 'connack':\n      this._handleConnack(packet);\n\n      done();\n      break;\n\n    case 'auth':\n      this._handleAuth(packet);\n\n      done();\n      break;\n\n    case 'pingresp':\n      this._handlePingresp(packet);\n\n      done();\n      break;\n\n    case 'disconnect':\n      this._handleDisconnect(packet);\n\n      done();\n      break;\n\n    default:\n      // do nothing\n      // maybe we should do an error handling\n      // or just log it\n      break;\n  }\n};\n\nMqttClient.prototype._checkDisconnecting = function (callback) {\n  if (this.disconnecting) {\n    if (callback) {\n      callback(new Error('client disconnecting'));\n    } else {\n      this.emit('error', new Error('client disconnecting'));\n    }\n  }\n\n  return this.disconnecting;\n};\n/**\r\n * publish - publish <message> to <topic>\r\n *\r\n * @param {String} topic - topic to publish to\r\n * @param {String, Buffer} message - message to publish\r\n * @param {Object} [opts] - publish options, includes:\r\n *    {Number} qos - qos level to publish on\r\n *    {Boolean} retain - whether or not to retain the message\r\n *    {Boolean} dup - whether or not mark a message as duplicate\r\n *    {Function} cbStorePut - function(){} called when message is put into `outgoingStore`\r\n * @param {Function} [callback] - function(err){}\r\n *    called when publish succeeds or fails\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n *\r\n * @example client.publish('topic', 'message');\r\n * @example\r\n *     client.publish('topic', 'message', {qos: 1, retain: true, dup: true});\r\n * @example client.publish('topic', 'message', console.log);\r\n */\n\n\nMqttClient.prototype.publish = function (topic, message, opts, callback) {\n  debug('publish :: message `%s` to topic `%s`', message, topic);\n  const options = this.options; // .publish(topic, payload, cb);\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  } // default opts\n\n\n  const defaultOpts = {\n    qos: 0,\n    retain: false,\n    dup: false\n  };\n  opts = xtend(defaultOpts, opts);\n\n  if (this._checkDisconnecting(callback)) {\n    return this;\n  }\n\n  const that = this;\n\n  const publishProc = function () {\n    let messageId = 0;\n\n    if (opts.qos === 1 || opts.qos === 2) {\n      messageId = that._nextId();\n\n      if (messageId === null) {\n        debug('No messageId left');\n        return false;\n      }\n    }\n\n    const packet = {\n      cmd: 'publish',\n      topic: topic,\n      payload: message,\n      qos: opts.qos,\n      retain: opts.retain,\n      messageId: messageId,\n      dup: opts.dup\n    };\n\n    if (options.protocolVersion === 5) {\n      packet.properties = opts.properties;\n    }\n\n    debug('publish :: qos', opts.qos);\n\n    switch (opts.qos) {\n      case 1:\n      case 2:\n        // Add to callbacks\n        that.outgoing[packet.messageId] = {\n          volatile: false,\n          cb: callback || nop\n        };\n        debug('MqttClient:publish: packet cmd: %s', packet.cmd);\n\n        that._sendPacket(packet, undefined, opts.cbStorePut);\n\n        break;\n\n      default:\n        debug('MqttClient:publish: packet cmd: %s', packet.cmd);\n\n        that._sendPacket(packet, callback, opts.cbStorePut);\n\n        break;\n    }\n\n    return true;\n  };\n\n  if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !publishProc()) {\n    this._storeProcessingQueue.push({\n      invoke: publishProc,\n      cbStorePut: opts.cbStorePut,\n      callback: callback\n    });\n  }\n\n  return this;\n};\n/**\r\n * subscribe - subscribe to <topic>\r\n *\r\n * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}\r\n * @param {Object} [opts] - optional subscription options, includes:\r\n *    {Number} qos - subscribe qos level\r\n * @param {Function} [callback] - function(err, granted){} where:\r\n *    {Error} err - subscription error (none at the moment!)\r\n *    {Array} granted - array of {topic: 't', qos: 0}\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n * @example client.subscribe('topic');\r\n * @example client.subscribe('topic', {qos: 1});\r\n * @example client.subscribe({'topic': {qos: 0}, 'topic2': {qos: 1}}, console.log);\r\n * @example client.subscribe('topic', console.log);\r\n */\n\n\nMqttClient.prototype.subscribe = function () {\n  const that = this;\n  const args = new Array(arguments.length);\n\n  for (let i = 0; i < arguments.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  const subs = [];\n  let obj = args.shift();\n  const resubscribe = obj.resubscribe;\n  let callback = args.pop() || nop;\n  let opts = args.pop();\n  const version = this.options.protocolVersion;\n  delete obj.resubscribe;\n\n  if (typeof obj === 'string') {\n    obj = [obj];\n  }\n\n  if (typeof callback !== 'function') {\n    opts = callback;\n    callback = nop;\n  }\n\n  const invalidTopic = validations.validateTopics(obj);\n\n  if (invalidTopic !== null) {\n    setImmediate(callback, new Error('Invalid topic ' + invalidTopic));\n    return this;\n  }\n\n  if (this._checkDisconnecting(callback)) {\n    debug('subscribe: discconecting true');\n    return this;\n  }\n\n  const defaultOpts = {\n    qos: 0\n  };\n\n  if (version === 5) {\n    defaultOpts.nl = false;\n    defaultOpts.rap = false;\n    defaultOpts.rh = 0;\n  }\n\n  opts = xtend(defaultOpts, opts);\n\n  if (Array.isArray(obj)) {\n    obj.forEach(function (topic) {\n      debug('subscribe: array topic %s', topic);\n\n      if (!Object.prototype.hasOwnProperty.call(that._resubscribeTopics, topic) || that._resubscribeTopics[topic].qos < opts.qos || resubscribe) {\n        const currentOpts = {\n          topic: topic,\n          qos: opts.qos\n        };\n\n        if (version === 5) {\n          currentOpts.nl = opts.nl;\n          currentOpts.rap = opts.rap;\n          currentOpts.rh = opts.rh;\n          currentOpts.properties = opts.properties;\n        }\n\n        debug('subscribe: pushing topic `%s` and qos `%s` to subs list', currentOpts.topic, currentOpts.qos);\n        subs.push(currentOpts);\n      }\n    });\n  } else {\n    Object.keys(obj).forEach(function (k) {\n      debug('subscribe: object topic %s', k);\n\n      if (!Object.prototype.hasOwnProperty.call(that._resubscribeTopics, k) || that._resubscribeTopics[k].qos < obj[k].qos || resubscribe) {\n        const currentOpts = {\n          topic: k,\n          qos: obj[k].qos\n        };\n\n        if (version === 5) {\n          currentOpts.nl = obj[k].nl;\n          currentOpts.rap = obj[k].rap;\n          currentOpts.rh = obj[k].rh;\n          currentOpts.properties = opts.properties;\n        }\n\n        debug('subscribe: pushing `%s` to subs list', currentOpts);\n        subs.push(currentOpts);\n      }\n    });\n  }\n\n  if (!subs.length) {\n    callback(null, []);\n    return this;\n  }\n\n  const subscribeProc = function () {\n    const messageId = that._nextId();\n\n    if (messageId === null) {\n      debug('No messageId left');\n      return false;\n    }\n\n    const packet = {\n      cmd: 'subscribe',\n      subscriptions: subs,\n      qos: 1,\n      retain: false,\n      dup: false,\n      messageId: messageId\n    };\n\n    if (opts.properties) {\n      packet.properties = opts.properties;\n    } // subscriptions to resubscribe to in case of disconnect\n\n\n    if (that.options.resubscribe) {\n      debug('subscribe :: resubscribe true');\n      const topics = [];\n      subs.forEach(function (sub) {\n        if (that.options.reconnectPeriod > 0) {\n          const topic = {\n            qos: sub.qos\n          };\n\n          if (version === 5) {\n            topic.nl = sub.nl || false;\n            topic.rap = sub.rap || false;\n            topic.rh = sub.rh || 0;\n            topic.properties = sub.properties;\n          }\n\n          that._resubscribeTopics[sub.topic] = topic;\n          topics.push(sub.topic);\n        }\n      });\n      that.messageIdToTopic[packet.messageId] = topics;\n    }\n\n    that.outgoing[packet.messageId] = {\n      volatile: true,\n      cb: function (err, packet) {\n        if (!err) {\n          const granted = packet.granted;\n\n          for (let i = 0; i < granted.length; i += 1) {\n            subs[i].qos = granted[i];\n          }\n        }\n\n        callback(err, subs);\n      }\n    };\n    debug('subscribe :: call _sendPacket');\n\n    that._sendPacket(packet);\n\n    return true;\n  };\n\n  if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !subscribeProc()) {\n    this._storeProcessingQueue.push({\n      invoke: subscribeProc,\n      callback: callback\n    });\n  }\n\n  return this;\n};\n/**\r\n * unsubscribe - unsubscribe from topic(s)\r\n *\r\n * @param {String, Array} topic - topics to unsubscribe from\r\n * @param {Object} [opts] - optional subscription options, includes:\r\n *    {Object} properties - properties of unsubscribe packet\r\n * @param {Function} [callback] - callback fired on unsuback\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n * @example client.unsubscribe('topic');\r\n * @example client.unsubscribe('topic', console.log);\r\n */\n\n\nMqttClient.prototype.unsubscribe = function () {\n  const that = this;\n  const args = new Array(arguments.length);\n\n  for (let i = 0; i < arguments.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  let topic = args.shift();\n  let callback = args.pop() || nop;\n  let opts = args.pop();\n\n  if (typeof topic === 'string') {\n    topic = [topic];\n  }\n\n  if (typeof callback !== 'function') {\n    opts = callback;\n    callback = nop;\n  }\n\n  const invalidTopic = validations.validateTopics(topic);\n\n  if (invalidTopic !== null) {\n    setImmediate(callback, new Error('Invalid topic ' + invalidTopic));\n    return this;\n  }\n\n  if (that._checkDisconnecting(callback)) {\n    return this;\n  }\n\n  const unsubscribeProc = function () {\n    const messageId = that._nextId();\n\n    if (messageId === null) {\n      debug('No messageId left');\n      return false;\n    }\n\n    const packet = {\n      cmd: 'unsubscribe',\n      qos: 1,\n      messageId: messageId\n    };\n\n    if (typeof topic === 'string') {\n      packet.unsubscriptions = [topic];\n    } else if (Array.isArray(topic)) {\n      packet.unsubscriptions = topic;\n    }\n\n    if (that.options.resubscribe) {\n      packet.unsubscriptions.forEach(function (topic) {\n        delete that._resubscribeTopics[topic];\n      });\n    }\n\n    if (typeof opts === 'object' && opts.properties) {\n      packet.properties = opts.properties;\n    }\n\n    that.outgoing[packet.messageId] = {\n      volatile: true,\n      cb: callback\n    };\n    debug('unsubscribe: call _sendPacket');\n\n    that._sendPacket(packet);\n\n    return true;\n  };\n\n  if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !unsubscribeProc()) {\n    this._storeProcessingQueue.push({\n      invoke: unsubscribeProc,\n      callback: callback\n    });\n  }\n\n  return this;\n};\n/**\r\n * end - close connection\r\n *\r\n * @returns {MqttClient} this - for chaining\r\n * @param {Boolean} force - do not wait for all in-flight messages to be acked\r\n * @param {Object} opts - added to the disconnect packet\r\n * @param {Function} cb - called when the client has been closed\r\n *\r\n * @api public\r\n */\n\n\nMqttClient.prototype.end = function (force, opts, cb) {\n  const that = this;\n  debug('end :: (%s)', this.options.clientId);\n\n  if (force == null || typeof force !== 'boolean') {\n    cb = opts || nop;\n    opts = force;\n    force = false;\n\n    if (typeof opts !== 'object') {\n      cb = opts;\n      opts = null;\n\n      if (typeof cb !== 'function') {\n        cb = nop;\n      }\n    }\n  }\n\n  if (typeof opts !== 'object') {\n    cb = opts;\n    opts = null;\n  }\n\n  debug('end :: cb? %s', !!cb);\n  cb = cb || nop;\n\n  function closeStores() {\n    debug('end :: closeStores: closing incoming and outgoing stores');\n    that.disconnected = true;\n    that.incomingStore.close(function (e1) {\n      that.outgoingStore.close(function (e2) {\n        debug('end :: closeStores: emitting end');\n        that.emit('end');\n\n        if (cb) {\n          const err = e1 || e2;\n          debug('end :: closeStores: invoking callback with args');\n          cb(err);\n        }\n      });\n    });\n\n    if (that._deferredReconnect) {\n      that._deferredReconnect();\n    }\n  }\n\n  function finish() {\n    // defer closesStores of an I/O cycle,\n    // just to make sure things are\n    // ok for websockets\n    debug('end :: (%s) :: finish :: calling _cleanUp with force %s', that.options.clientId, force);\n\n    that._cleanUp(force, () => {\n      debug('end :: finish :: calling process.nextTick on closeStores'); // const boundProcess = nextTick.bind(null, closeStores)\n\n      nextTick(closeStores.bind(that));\n    }, opts);\n  }\n\n  if (this.disconnecting) {\n    cb();\n    return this;\n  }\n\n  this._clearReconnect();\n\n  this.disconnecting = true;\n\n  if (!force && Object.keys(this.outgoing).length > 0) {\n    // wait 10ms, just to be sure we received all of it\n    debug('end :: (%s) :: calling finish in 10ms once outgoing is empty', that.options.clientId);\n    this.once('outgoingEmpty', setTimeout.bind(null, finish, 10));\n  } else {\n    debug('end :: (%s) :: immediately calling finish', that.options.clientId);\n    finish();\n  }\n\n  return this;\n};\n/**\r\n * removeOutgoingMessage - remove a message in outgoing store\r\n * the outgoing callback will be called withe Error('Message removed') if the message is removed\r\n *\r\n * @param {Number} messageId - messageId to remove message\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n *\r\n * @example client.removeOutgoingMessage(client.getLastAllocated());\r\n */\n\n\nMqttClient.prototype.removeOutgoingMessage = function (messageId) {\n  const cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null;\n  delete this.outgoing[messageId];\n  this.outgoingStore.del({\n    messageId: messageId\n  }, function () {\n    cb(new Error('Message removed'));\n  });\n  return this;\n};\n/**\r\n * reconnect - connect again using the same options as connect()\r\n *\r\n * @param {Object} [opts] - optional reconnect options, includes:\r\n *    {Store} incomingStore - a store for the incoming packets\r\n *    {Store} outgoingStore - a store for the outgoing packets\r\n *    if opts is not given, current stores are used\r\n * @returns {MqttClient} this - for chaining\r\n *\r\n * @api public\r\n */\n\n\nMqttClient.prototype.reconnect = function (opts) {\n  debug('client reconnect');\n  const that = this;\n\n  const f = function () {\n    if (opts) {\n      that.options.incomingStore = opts.incomingStore;\n      that.options.outgoingStore = opts.outgoingStore;\n    } else {\n      that.options.incomingStore = null;\n      that.options.outgoingStore = null;\n    }\n\n    that.incomingStore = that.options.incomingStore || new Store();\n    that.outgoingStore = that.options.outgoingStore || new Store();\n    that.disconnecting = false;\n    that.disconnected = false;\n    that._deferredReconnect = null;\n\n    that._reconnect();\n  };\n\n  if (this.disconnecting && !this.disconnected) {\n    this._deferredReconnect = f;\n  } else {\n    f();\n  }\n\n  return this;\n};\n/**\r\n * _reconnect - implement reconnection\r\n * @api privateish\r\n */\n\n\nMqttClient.prototype._reconnect = function () {\n  debug('_reconnect: emitting reconnect to client');\n  this.emit('reconnect');\n\n  if (this.connected) {\n    this.end(() => {\n      this._setupStream();\n    });\n    debug('client already connected. disconnecting first.');\n  } else {\n    debug('_reconnect: calling _setupStream');\n\n    this._setupStream();\n  }\n};\n/**\r\n * _setupReconnect - setup reconnect timer\r\n */\n\n\nMqttClient.prototype._setupReconnect = function () {\n  const that = this;\n\n  if (!that.disconnecting && !that.reconnectTimer && that.options.reconnectPeriod > 0) {\n    if (!this.reconnecting) {\n      debug('_setupReconnect :: emit `offline` state');\n      this.emit('offline');\n      debug('_setupReconnect :: set `reconnecting` to `true`');\n      this.reconnecting = true;\n    }\n\n    debug('_setupReconnect :: setting reconnectTimer for %d ms', that.options.reconnectPeriod);\n    that.reconnectTimer = setInterval(function () {\n      debug('reconnectTimer :: reconnect triggered!');\n\n      that._reconnect();\n    }, that.options.reconnectPeriod);\n  } else {\n    debug('_setupReconnect :: doing nothing...');\n  }\n};\n/**\r\n * _clearReconnect - clear the reconnect timer\r\n */\n\n\nMqttClient.prototype._clearReconnect = function () {\n  debug('_clearReconnect : clearing reconnect timer');\n\n  if (this.reconnectTimer) {\n    clearInterval(this.reconnectTimer);\n    this.reconnectTimer = null;\n  }\n};\n/**\r\n * _cleanUp - clean up on connection end\r\n * @api private\r\n */\n\n\nMqttClient.prototype._cleanUp = function (forced, done) {\n  const opts = arguments[2];\n\n  if (done) {\n    debug('_cleanUp :: done callback provided for on stream close');\n    this.stream.on('close', done);\n  }\n\n  debug('_cleanUp :: forced? %s', forced);\n\n  if (forced) {\n    if (this.options.reconnectPeriod === 0 && this.options.clean) {\n      flush(this.outgoing);\n    }\n\n    debug('_cleanUp :: (%s) :: destroying stream', this.options.clientId);\n    this.stream.destroy();\n  } else {\n    const packet = xtend({\n      cmd: 'disconnect'\n    }, opts);\n    debug('_cleanUp :: (%s) :: call _sendPacket with disconnect packet', this.options.clientId);\n\n    this._sendPacket(packet, setImmediate.bind(null, this.stream.end.bind(this.stream)));\n  }\n\n  if (!this.disconnecting) {\n    debug('_cleanUp :: client not disconnecting. Clearing and resetting reconnect.');\n\n    this._clearReconnect();\n\n    this._setupReconnect();\n  }\n\n  if (this.pingTimer !== null) {\n    debug('_cleanUp :: clearing pingTimer');\n    this.pingTimer.clear();\n    this.pingTimer = null;\n  }\n\n  if (done && !this.connected) {\n    debug('_cleanUp :: (%s) :: removing stream `done` callback `close` listener', this.options.clientId);\n    this.stream.removeListener('close', done);\n    done();\n  }\n};\n/**\r\n * _sendPacket - send or queue a packet\r\n * @param {Object} packet - packet options\r\n * @param {Function} cb - callback when the packet is sent\r\n * @param {Function} cbStorePut - called when message is put into outgoingStore\r\n * @api private\r\n */\n\n\nMqttClient.prototype._sendPacket = function (packet, cb, cbStorePut) {\n  debug('_sendPacket :: (%s) ::  start', this.options.clientId);\n  cbStorePut = cbStorePut || nop;\n  cb = cb || nop;\n  const err = applyTopicAlias(this, packet);\n\n  if (err) {\n    cb(err);\n    return;\n  }\n\n  if (!this.connected) {\n    // allow auth packets to be sent while authenticating with the broker (mqtt5 enhanced auth)\n    if (packet.cmd === 'auth') {\n      this._shiftPingInterval();\n\n      sendPacket(this, packet, cb);\n      return;\n    }\n\n    debug('_sendPacket :: client not connected. Storing packet offline.');\n\n    this._storePacket(packet, cb, cbStorePut);\n\n    return;\n  } // When sending a packet, reschedule the ping timer\n\n\n  this._shiftPingInterval();\n\n  switch (packet.cmd) {\n    case 'publish':\n      break;\n\n    case 'pubrel':\n      storeAndSend(this, packet, cb, cbStorePut);\n      return;\n\n    default:\n      sendPacket(this, packet, cb);\n      return;\n  }\n\n  switch (packet.qos) {\n    case 2:\n    case 1:\n      storeAndSend(this, packet, cb, cbStorePut);\n      break;\n\n    /**\r\n     * no need of case here since it will be caught by default\r\n     * and jshint comply that before default it must be a break\r\n     * anyway it will result in -1 evaluation\r\n     */\n\n    case 0:\n    /* falls through */\n\n    default:\n      sendPacket(this, packet, cb);\n      break;\n  }\n\n  debug('_sendPacket :: (%s) ::  end', this.options.clientId);\n};\n/**\r\n * _storePacket - queue a packet\r\n * @param {Object} packet - packet options\r\n * @param {Function} cb - callback when the packet is sent\r\n * @param {Function} cbStorePut - called when message is put into outgoingStore\r\n * @api private\r\n */\n\n\nMqttClient.prototype._storePacket = function (packet, cb, cbStorePut) {\n  debug('_storePacket :: packet: %o', packet);\n  debug('_storePacket :: cb? %s', !!cb);\n  cbStorePut = cbStorePut || nop;\n  let storePacket = packet;\n\n  if (storePacket.cmd === 'publish') {\n    // The original packet is for sending.\n    // The cloned storePacket is for storing to resend on reconnect.\n    // Topic Alias must not be used after disconnected.\n    storePacket = clone(packet);\n    const err = removeTopicAliasAndRecoverTopicName(this, storePacket);\n\n    if (err) {\n      return cb && cb(err);\n    }\n  } // check that the packet is not a qos of 0, or that the command is not a publish\n\n\n  if ((storePacket.qos || 0) === 0 && this.queueQoSZero || storePacket.cmd !== 'publish') {\n    this.queue.push({\n      packet: storePacket,\n      cb: cb\n    });\n  } else if (storePacket.qos > 0) {\n    cb = this.outgoing[storePacket.messageId] ? this.outgoing[storePacket.messageId].cb : null;\n    this.outgoingStore.put(storePacket, function (err) {\n      if (err) {\n        return cb && cb(err);\n      }\n\n      cbStorePut();\n    });\n  } else if (cb) {\n    cb(new Error('No connection to broker'));\n  }\n};\n/**\r\n * _setupPingTimer - setup the ping timer\r\n *\r\n * @api private\r\n */\n\n\nMqttClient.prototype._setupPingTimer = function () {\n  debug('_setupPingTimer :: keepalive %d (seconds)', this.options.keepalive);\n  const that = this;\n\n  if (!this.pingTimer && this.options.keepalive) {\n    this.pingResp = true;\n    this.pingTimer = reInterval(function () {\n      that._checkPing();\n    }, this.options.keepalive * 1000);\n  }\n};\n/**\r\n * _shiftPingInterval - reschedule the ping interval\r\n *\r\n * @api private\r\n */\n\n\nMqttClient.prototype._shiftPingInterval = function () {\n  if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) {\n    this.pingTimer.reschedule(this.options.keepalive * 1000);\n  }\n};\n/**\r\n * _checkPing - check if a pingresp has come back, and ping the server again\r\n *\r\n * @api private\r\n */\n\n\nMqttClient.prototype._checkPing = function () {\n  debug('_checkPing :: checking ping...');\n\n  if (this.pingResp) {\n    debug('_checkPing :: ping response received. Clearing flag and sending `pingreq`');\n    this.pingResp = false;\n\n    this._sendPacket({\n      cmd: 'pingreq'\n    });\n  } else {\n    // do a forced cleanup since socket will be in bad shape\n    debug('_checkPing :: calling _cleanUp with force true');\n\n    this._cleanUp(true);\n  }\n};\n/**\r\n * _handlePingresp - handle a pingresp\r\n *\r\n * @api private\r\n */\n\n\nMqttClient.prototype._handlePingresp = function () {\n  this.pingResp = true;\n};\n/**\r\n * _handleConnack\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\n\n\nMqttClient.prototype._handleConnack = function (packet) {\n  debug('_handleConnack');\n  const options = this.options;\n  const version = options.protocolVersion;\n  const rc = version === 5 ? packet.reasonCode : packet.returnCode;\n  clearTimeout(this.connackTimer);\n  delete this.topicAliasSend;\n\n  if (packet.properties) {\n    if (packet.properties.topicAliasMaximum) {\n      if (packet.properties.topicAliasMaximum > 0xffff) {\n        this.emit('error', new Error('topicAliasMaximum from broker is out of range'));\n        return;\n      }\n\n      if (packet.properties.topicAliasMaximum > 0) {\n        this.topicAliasSend = new TopicAliasSend(packet.properties.topicAliasMaximum);\n      }\n    }\n\n    if (packet.properties.serverKeepAlive && options.keepalive) {\n      options.keepalive = packet.properties.serverKeepAlive;\n\n      this._shiftPingInterval();\n    }\n\n    if (packet.properties.maximumPacketSize) {\n      if (!options.properties) {\n        options.properties = {};\n      }\n\n      options.properties.maximumPacketSize = packet.properties.maximumPacketSize;\n    }\n  }\n\n  if (rc === 0) {\n    this.reconnecting = false;\n\n    this._onConnect(packet);\n  } else if (rc > 0) {\n    const err = new Error('Connection refused: ' + errors[rc]);\n    err.code = rc;\n    this.emit('error', err);\n  }\n};\n\nMqttClient.prototype._handleAuth = function (packet) {\n  const options = this.options;\n  const version = options.protocolVersion;\n  const rc = version === 5 ? packet.reasonCode : packet.returnCode;\n\n  if (version !== 5) {\n    const err = new Error('Protocol error: Auth packets are only supported in MQTT 5. Your version:' + version);\n    err.code = rc;\n    this.emit('error', err);\n    return;\n  }\n\n  const that = this;\n  this.handleAuth(packet, function (err, packet) {\n    if (err) {\n      that.emit('error', err);\n      return;\n    }\n\n    if (rc === 24) {\n      that.reconnecting = false;\n\n      that._sendPacket(packet);\n    } else {\n      const error = new Error('Connection refused: ' + errors[rc]);\n      err.code = rc;\n      that.emit('error', error);\n    }\n  });\n};\n/**\r\n * @param packet the packet received by the broker\r\n * @return the auth packet to be returned to the broker\r\n * @api public\r\n */\n\n\nMqttClient.prototype.handleAuth = function (packet, callback) {\n  callback();\n};\n/**\r\n * _handlePublish\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\n\n/*\r\nthose late 2 case should be rewrite to comply with coding style:\r\n\r\ncase 1:\r\ncase 0:\r\n  // do not wait sending a puback\r\n  // no callback passed\r\n  if (1 === qos) {\r\n    this._sendPacket({\r\n      cmd: 'puback',\r\n      messageId: messageId\r\n    });\r\n  }\r\n  // emit the message event for both qos 1 and 0\r\n  this.emit('message', topic, message, packet);\r\n  this.handleMessage(packet, done);\r\n  break;\r\ndefault:\r\n  // do nothing but every switch mus have a default\r\n  // log or throw an error about unknown qos\r\n  break;\r\n\r\nfor now i just suppressed the warnings\r\n*/\n\n\nMqttClient.prototype._handlePublish = function (packet, done) {\n  debug('_handlePublish: packet %o', packet);\n  done = typeof done !== 'undefined' ? done : nop;\n  let topic = packet.topic.toString();\n  const message = packet.payload;\n  const qos = packet.qos;\n  const messageId = packet.messageId;\n  const that = this;\n  const options = this.options;\n  const validReasonCodes = [0, 16, 128, 131, 135, 144, 145, 151, 153];\n\n  if (this.options.protocolVersion === 5) {\n    let alias;\n\n    if (packet.properties) {\n      alias = packet.properties.topicAlias;\n    }\n\n    if (typeof alias !== 'undefined') {\n      if (topic.length === 0) {\n        if (alias > 0 && alias <= 0xffff) {\n          const gotTopic = this.topicAliasRecv.getTopicByAlias(alias);\n\n          if (gotTopic) {\n            topic = gotTopic;\n            debug('_handlePublish :: topic complemented by alias. topic: %s - alias: %d', topic, alias);\n          } else {\n            debug('_handlePublish :: unregistered topic alias. alias: %d', alias);\n            this.emit('error', new Error('Received unregistered Topic Alias'));\n            return;\n          }\n        } else {\n          debug('_handlePublish :: topic alias out of range. alias: %d', alias);\n          this.emit('error', new Error('Received Topic Alias is out of range'));\n          return;\n        }\n      } else {\n        if (this.topicAliasRecv.put(topic, alias)) {\n          debug('_handlePublish :: registered topic: %s - alias: %d', topic, alias);\n        } else {\n          debug('_handlePublish :: topic alias out of range. alias: %d', alias);\n          this.emit('error', new Error('Received Topic Alias is out of range'));\n          return;\n        }\n      }\n    }\n  }\n\n  debug('_handlePublish: qos %d', qos);\n\n  switch (qos) {\n    case 2:\n      {\n        options.customHandleAcks(topic, message, packet, function (error, code) {\n          if (!(error instanceof Error)) {\n            code = error;\n            error = null;\n          }\n\n          if (error) {\n            return that.emit('error', error);\n          }\n\n          if (validReasonCodes.indexOf(code) === -1) {\n            return that.emit('error', new Error('Wrong reason code for pubrec'));\n          }\n\n          if (code) {\n            that._sendPacket({\n              cmd: 'pubrec',\n              messageId: messageId,\n              reasonCode: code\n            }, done);\n          } else {\n            that.incomingStore.put(packet, function () {\n              that._sendPacket({\n                cmd: 'pubrec',\n                messageId: messageId\n              }, done);\n            });\n          }\n        });\n        break;\n      }\n\n    case 1:\n      {\n        // emit the message event\n        options.customHandleAcks(topic, message, packet, function (error, code) {\n          if (!(error instanceof Error)) {\n            code = error;\n            error = null;\n          }\n\n          if (error) {\n            return that.emit('error', error);\n          }\n\n          if (validReasonCodes.indexOf(code) === -1) {\n            return that.emit('error', new Error('Wrong reason code for puback'));\n          }\n\n          if (!code) {\n            that.emit('message', topic, message, packet);\n          }\n\n          that.handleMessage(packet, function (err) {\n            if (err) {\n              return done && done(err);\n            }\n\n            that._sendPacket({\n              cmd: 'puback',\n              messageId: messageId,\n              reasonCode: code\n            }, done);\n          });\n        });\n        break;\n      }\n\n    case 0:\n      // emit the message event\n      this.emit('message', topic, message, packet);\n      this.handleMessage(packet, done);\n      break;\n\n    default:\n      // do nothing\n      debug('_handlePublish: unknown QoS. Doing nothing.'); // log or throw an error about unknown qos\n\n      break;\n  }\n};\n/**\r\n * Handle messages with backpressure support, one at a time.\r\n * Override at will.\r\n *\r\n * @param Packet packet the packet\r\n * @param Function callback call when finished\r\n * @api public\r\n */\n\n\nMqttClient.prototype.handleMessage = function (packet, callback) {\n  callback();\n};\n/**\r\n * _handleAck\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\n\n\nMqttClient.prototype._handleAck = function (packet) {\n  /* eslint no-fallthrough: \"off\" */\n  const messageId = packet.messageId;\n  const type = packet.cmd;\n  let response = null;\n  const cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null;\n  const that = this;\n  let err;\n\n  if (!cb) {\n    debug('_handleAck :: Server sent an ack in error. Ignoring.'); // Server sent an ack in error, ignore it.\n\n    return;\n  } // Process\n\n\n  debug('_handleAck :: packet type', type);\n\n  switch (type) {\n    case 'pubcomp': // same thing as puback for QoS 2\n\n    case 'puback':\n      {\n        const pubackRC = packet.reasonCode; // Callback - we're done\n\n        if (pubackRC && pubackRC > 0 && pubackRC !== 16) {\n          err = new Error('Publish error: ' + errors[pubackRC]);\n          err.code = pubackRC;\n          cb(err, packet);\n        }\n\n        delete this.outgoing[messageId];\n        this.outgoingStore.del(packet, cb);\n        this.messageIdProvider.deallocate(messageId);\n\n        this._invokeStoreProcessingQueue();\n\n        break;\n      }\n\n    case 'pubrec':\n      {\n        response = {\n          cmd: 'pubrel',\n          qos: 2,\n          messageId: messageId\n        };\n        const pubrecRC = packet.reasonCode;\n\n        if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {\n          err = new Error('Publish error: ' + errors[pubrecRC]);\n          err.code = pubrecRC;\n          cb(err, packet);\n        } else {\n          this._sendPacket(response);\n        }\n\n        break;\n      }\n\n    case 'suback':\n      {\n        delete this.outgoing[messageId];\n        this.messageIdProvider.deallocate(messageId);\n\n        for (let grantedI = 0; grantedI < packet.granted.length; grantedI++) {\n          if ((packet.granted[grantedI] & 0x80) !== 0) {\n            // suback with Failure status\n            const topics = this.messageIdToTopic[messageId];\n\n            if (topics) {\n              topics.forEach(function (topic) {\n                delete that._resubscribeTopics[topic];\n              });\n            }\n          }\n        }\n\n        this._invokeStoreProcessingQueue();\n\n        cb(null, packet);\n        break;\n      }\n\n    case 'unsuback':\n      {\n        delete this.outgoing[messageId];\n        this.messageIdProvider.deallocate(messageId);\n\n        this._invokeStoreProcessingQueue();\n\n        cb(null);\n        break;\n      }\n\n    default:\n      that.emit('error', new Error('unrecognized packet type'));\n  }\n\n  if (this.disconnecting && Object.keys(this.outgoing).length === 0) {\n    this.emit('outgoingEmpty');\n  }\n};\n/**\r\n * _handlePubrel\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\n\n\nMqttClient.prototype._handlePubrel = function (packet, callback) {\n  debug('handling pubrel packet');\n  callback = typeof callback !== 'undefined' ? callback : nop;\n  const messageId = packet.messageId;\n  const that = this;\n  const comp = {\n    cmd: 'pubcomp',\n    messageId: messageId\n  };\n  that.incomingStore.get(packet, function (err, pub) {\n    if (!err) {\n      that.emit('message', pub.topic, pub.payload, pub);\n      that.handleMessage(pub, function (err) {\n        if (err) {\n          return callback(err);\n        }\n\n        that.incomingStore.del(pub, nop);\n\n        that._sendPacket(comp, callback);\n      });\n    } else {\n      that._sendPacket(comp, callback);\n    }\n  });\n};\n/**\r\n * _handleDisconnect\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\n\n\nMqttClient.prototype._handleDisconnect = function (packet) {\n  this.emit('disconnect', packet);\n};\n/**\r\n * _nextId\r\n * @return unsigned int\r\n */\n\n\nMqttClient.prototype._nextId = function () {\n  return this.messageIdProvider.allocate();\n};\n/**\r\n * getLastMessageId\r\n * @return unsigned int\r\n */\n\n\nMqttClient.prototype.getLastMessageId = function () {\n  return this.messageIdProvider.getLastAllocated();\n};\n/**\r\n * _resubscribe\r\n * @api private\r\n */\n\n\nMqttClient.prototype._resubscribe = function () {\n  debug('_resubscribe');\n\n  const _resubscribeTopicsKeys = Object.keys(this._resubscribeTopics);\n\n  if (!this._firstConnection && (this.options.clean || this.options.protocolVersion === 5 && !this.connackPacket.sessionPresent) && _resubscribeTopicsKeys.length > 0) {\n    if (this.options.resubscribe) {\n      if (this.options.protocolVersion === 5) {\n        debug('_resubscribe: protocolVersion 5');\n\n        for (let topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++) {\n          const resubscribeTopic = {};\n          resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]];\n          resubscribeTopic.resubscribe = true;\n          this.subscribe(resubscribeTopic, {\n            properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties\n          });\n        }\n      } else {\n        this._resubscribeTopics.resubscribe = true;\n        this.subscribe(this._resubscribeTopics);\n      }\n    } else {\n      this._resubscribeTopics = {};\n    }\n  }\n\n  this._firstConnection = false;\n};\n/**\r\n * _onConnect\r\n *\r\n * @api private\r\n */\n\n\nMqttClient.prototype._onConnect = function (packet) {\n  if (this.disconnected) {\n    this.emit('connect', packet);\n    return;\n  }\n\n  const that = this;\n  this.connackPacket = packet;\n  this.messageIdProvider.clear();\n\n  this._setupPingTimer();\n\n  this.connected = true;\n\n  function startStreamProcess() {\n    let outStore = that.outgoingStore.createStream();\n\n    function clearStoreProcessing() {\n      that._storeProcessing = false;\n      that._packetIdsDuringStoreProcessing = {};\n    }\n\n    that.once('close', remove);\n    outStore.on('error', function (err) {\n      clearStoreProcessing();\n\n      that._flushStoreProcessingQueue();\n\n      that.removeListener('close', remove);\n      that.emit('error', err);\n    });\n\n    function remove() {\n      outStore.destroy();\n      outStore = null;\n\n      that._flushStoreProcessingQueue();\n\n      clearStoreProcessing();\n    }\n\n    function storeDeliver() {\n      // edge case, we wrapped this twice\n      if (!outStore) {\n        return;\n      }\n\n      that._storeProcessing = true;\n      const packet = outStore.read(1);\n      let cb;\n\n      if (!packet) {\n        // read when data is available in the future\n        outStore.once('readable', storeDeliver);\n        return;\n      } // Skip already processed store packets\n\n\n      if (that._packetIdsDuringStoreProcessing[packet.messageId]) {\n        storeDeliver();\n        return;\n      } // Avoid unnecessary stream read operations when disconnected\n\n\n      if (!that.disconnecting && !that.reconnectTimer) {\n        cb = that.outgoing[packet.messageId] ? that.outgoing[packet.messageId].cb : null;\n        that.outgoing[packet.messageId] = {\n          volatile: false,\n          cb: function (err, status) {\n            // Ensure that the original callback passed in to publish gets invoked\n            if (cb) {\n              cb(err, status);\n            }\n\n            storeDeliver();\n          }\n        };\n        that._packetIdsDuringStoreProcessing[packet.messageId] = true;\n\n        if (that.messageIdProvider.register(packet.messageId)) {\n          that._sendPacket(packet);\n        } else {\n          debug('messageId: %d has already used.', packet.messageId);\n        }\n      } else if (outStore.destroy) {\n        outStore.destroy();\n      }\n    }\n\n    outStore.on('end', function () {\n      let allProcessed = true;\n\n      for (const id in that._packetIdsDuringStoreProcessing) {\n        if (!that._packetIdsDuringStoreProcessing[id]) {\n          allProcessed = false;\n          break;\n        }\n      }\n\n      if (allProcessed) {\n        clearStoreProcessing();\n        that.removeListener('close', remove);\n\n        that._invokeAllStoreProcessingQueue();\n\n        that.emit('connect', packet);\n      } else {\n        startStreamProcess();\n      }\n    });\n    storeDeliver();\n  } // start flowing\n\n\n  startStreamProcess();\n};\n\nMqttClient.prototype._invokeStoreProcessingQueue = function () {\n  if (this._storeProcessingQueue.length > 0) {\n    const f = this._storeProcessingQueue[0];\n\n    if (f && f.invoke()) {\n      this._storeProcessingQueue.shift();\n\n      return true;\n    }\n  }\n\n  return false;\n};\n\nMqttClient.prototype._invokeAllStoreProcessingQueue = function () {\n  while (this._invokeStoreProcessingQueue()) {\n    /* empty */\n  }\n};\n\nMqttClient.prototype._flushStoreProcessingQueue = function () {\n  for (const f of this._storeProcessingQueue) {\n    if (f.cbStorePut) f.cbStorePut(new Error('Connection closed'));\n    if (f.callback) f.callback(new Error('Connection closed'));\n  }\n\n  this._storeProcessingQueue.splice(0);\n};\n\nmodule.exports = MqttClient;","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/node_modules/mqtt/lib/client.js"],"names":["EventEmitter","require","Store","TopicAliasRecv","TopicAliasSend","mqttPacket","DefaultMessageIdProvider","Writable","inherits","reInterval","clone","validations","xtend","debug","nextTick","process","callback","setTimeout","setImmediate","global","defaultConnectOptions","keepalive","reschedulePings","protocolId","protocolVersion","reconnectPeriod","connectTimeout","clean","resubscribe","socketErrors","errors","defaultId","Math","random","toString","substr","applyTopicAlias","client","packet","options","cmd","alias","properties","topicAlias","topic","topicAliasSend","length","put","Error","autoAssignTopicAlias","getAliasByTopic","getLruAlias","autoUseTopicAlias","removeTopicAliasAndRecoverTopicName","getTopicByAlias","sendPacket","cb","emit","result","writeToStream","stream","once","flush","queue","Object","keys","forEach","messageId","flushVolatile","volatile","storeAndSend","cbStorePut","storePacket","err","outgoingStore","storedPacket","nop","error","MqttClient","streamBuilder","k","that","protocol","username","rejectUnauthorized","topicAliasMaximum","clientId","customHandleAcks","arguments","messageIdProvider","incomingStore","queueQoSZero","undefined","_resubscribeTopics","messageIdToTopic","pingTimer","connected","disconnecting","connackTimer","reconnectTimer","_storeProcessing","_packetIdsDuringStoreProcessing","_storeProcessingQueue","outgoing","_firstConnection","topicAliasRecv","on","deliver","entry","shift","_resubscribe","send","register","_sendPacket","clearTimeout","clear","_setupReconnect","call","_setupStream","prototype","writable","parser","completeParse","packets","_clearReconnect","push","nextTickWork","work","done","_handlePacket","_write","buf","enc","parse","streamErrorHandler","message","includes","code","pipe","connectPacket","create","max","bind","authenticationMethod","authenticationData","end","authPacket","reasonCode","setMaxListeners","_cleanUp","maximumPacketSize","reasonString","_handlePublish","_handleAck","_handlePubrel","_handleConnack","_handleAuth","_handlePingresp","_handleDisconnect","_checkDisconnecting","publish","opts","defaultOpts","qos","retain","dup","publishProc","_nextId","payload","invoke","subscribe","args","Array","i","subs","obj","pop","version","invalidTopic","validateTopics","nl","rap","rh","isArray","hasOwnProperty","currentOpts","subscribeProc","subscriptions","topics","sub","granted","unsubscribe","unsubscribeProc","unsubscriptions","force","closeStores","disconnected","close","e1","e2","_deferredReconnect","finish","removeOutgoingMessage","del","reconnect","f","_reconnect","reconnecting","setInterval","clearInterval","forced","destroy","removeListener","_shiftPingInterval","_storePacket","_setupPingTimer","pingResp","_checkPing","reschedule","rc","returnCode","serverKeepAlive","_onConnect","handleAuth","validReasonCodes","gotTopic","indexOf","handleMessage","type","response","pubackRC","deallocate","_invokeStoreProcessingQueue","pubrecRC","grantedI","comp","get","pub","allocate","getLastMessageId","getLastAllocated","_resubscribeTopicsKeys","connackPacket","sessionPresent","topicI","resubscribeTopic","startStreamProcess","outStore","createStream","clearStoreProcessing","remove","_flushStoreProcessingQueue","storeDeliver","read","status","allProcessed","id","_invokeAllStoreProcessingQueue","splice","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;AACA,MAAME,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,oBAAD,CAA9B;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMK,wBAAwB,GAAGL,OAAO,CAAC,+BAAD,CAAxC;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,iBAAD,CAAP,CAA2BM,QAA5C;;AACA,MAAMC,QAAQ,GAAGP,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMQ,UAAU,GAAGR,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMU,WAAW,GAAGV,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMW,KAAK,GAAGX,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMY,KAAK,GAAGZ,OAAO,CAAC,OAAD,CAAP,CAAiB,eAAjB,CAAd;;AACA,MAAMa,QAAQ,GAAGC,OAAO,GAAGA,OAAO,CAACD,QAAX,GAAsB,UAAUE,QAAV,EAAoB;AAAEC,EAAAA,UAAU,CAACD,QAAD,EAAW,CAAX,CAAV;AAAyB,CAA7F;;AACA,MAAME,YAAY,GAAGC,MAAM,CAACD,YAAP,IAAuB,UAAUF,QAAV,EAAoB;AAC9D;AACAF,EAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,CAHD;;AAIA,MAAMI,qBAAqB,GAAG;AAC5BC,EAAAA,SAAS,EAAE,EADiB;AAE5BC,EAAAA,eAAe,EAAE,IAFW;AAG5BC,EAAAA,UAAU,EAAE,MAHgB;AAI5BC,EAAAA,eAAe,EAAE,CAJW;AAK5BC,EAAAA,eAAe,EAAE,IALW;AAM5BC,EAAAA,cAAc,EAAE,KAAK,IANO;AAO5BC,EAAAA,KAAK,EAAE,IAPqB;AAQ5BC,EAAAA,WAAW,EAAE;AARe,CAA9B;AAWA,MAAMC,YAAY,GAAG,CACnB,cADmB,EAEnB,YAFmB,EAGnB,YAHmB,EAInB,WAJmB,CAArB,C,CAOA;;AAEA,MAAMC,MAAM,GAAG;AACb,KAAG,EADU;AAEb,KAAG,+BAFU;AAGb,KAAG,qBAHU;AAIb,KAAG,oBAJU;AAKb,KAAG,0BALU;AAMb,KAAG,gBANU;AAOb,MAAI,yBAPS;AAQb,MAAI,yBARS;AASb,OAAK,mBATQ;AAUb,OAAK,kBAVQ;AAWb,OAAK,gBAXQ;AAYb,OAAK,+BAZQ;AAab,OAAK,8BAbQ;AAcb,OAAK,6BAdQ;AAeb,OAAK,2BAfQ;AAgBb,OAAK,gBAhBQ;AAiBb,OAAK,oBAjBQ;AAkBb,OAAK,aAlBQ;AAmBb,OAAK,QAnBQ;AAoBb,OAAK,sBApBQ;AAqBb,OAAK,2BArBQ;AAsBb,OAAK,oBAtBQ;AAuBb,OAAK,oBAvBQ;AAwBb,OAAK,sBAxBQ;AAyBb,OAAK,oBAzBQ;AA0Bb,OAAK,0BA1BQ;AA2Bb,OAAK,6BA3BQ;AA4Bb,OAAK,0BA5BQ;AA6Bb,OAAK,qBA7BQ;AA8Bb,OAAK,kBA9BQ;AA+Bb,OAAK,uBA/BQ;AAgCb,OAAK,gBAhCQ;AAiCb,OAAK,uBAjCQ;AAkCb,OAAK,wBAlCQ;AAmCb,OAAK,sBAnCQ;AAoCb,OAAK,mBApCQ;AAqCb,OAAK,oBArCQ;AAsCb,OAAK,cAtCQ;AAuCb,OAAK,oCAvCQ;AAwCb,OAAK,0BAxCQ;AAyCb,OAAK,sBAzCQ;AA0Cb,OAAK,wCA1CQ;AA2Cb,OAAK;AA3CQ,CAAf;;AA8CA,SAASC,SAAT,GAAsB;AACpB,SAAO,YAAYC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAnB;AACD;;AAED,SAASC,eAAT,CAA0BC,MAA1B,EAAkCC,MAAlC,EAA0C;AACxC,MAAID,MAAM,CAACE,OAAP,CAAef,eAAf,KAAmC,CAAvC,EAA0C;AACxC,QAAIc,MAAM,CAACE,GAAP,KAAe,SAAnB,EAA8B;AAC5B,UAAIC,KAAJ;;AACA,UAAIH,MAAM,CAACI,UAAX,EAAuB;AACrBD,QAAAA,KAAK,GAAGH,MAAM,CAACI,UAAP,CAAkBC,UAA1B;AACD;;AACD,YAAMC,KAAK,GAAGN,MAAM,CAACM,KAAP,CAAaV,QAAb,EAAd;;AACA,UAAIG,MAAM,CAACQ,cAAX,EAA2B;AACzB,YAAIJ,KAAJ,EAAW;AACT,cAAIG,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACAjC,YAAAA,KAAK,CAAC,mDAAD,EAAsD+B,KAAtD,EAA6DH,KAA7D,CAAL;;AACA,gBAAI,CAACJ,MAAM,CAACQ,cAAP,CAAsBE,GAAtB,CAA0BH,KAA1B,EAAiCH,KAAjC,CAAL,EAA8C;AAC5C5B,cAAAA,KAAK,CAAC,8DAAD,EAAiE+B,KAAjE,EAAwEH,KAAxE,CAAL;AACA,qBAAO,IAAIO,KAAJ,CAAU,kCAAV,CAAP;AACD;AACF;AACF,SATD,MASO;AACL,cAAIJ,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,gBAAIT,MAAM,CAACE,OAAP,CAAeU,oBAAnB,EAAyC;AACvCR,cAAAA,KAAK,GAAGJ,MAAM,CAACQ,cAAP,CAAsBK,eAAtB,CAAsCN,KAAtC,CAAR;;AACA,kBAAIH,KAAJ,EAAW;AACTH,gBAAAA,MAAM,CAACM,KAAP,GAAe,EAAf;AACAN,gBAAAA,MAAM,CAACI,UAAP,GAAoB,EAAE,GAAIJ,MAAM,CAACI,UAAb;AAA0BC,kBAAAA,UAAU,EAAEF;AAAtC,iBAApB;AACA5B,gBAAAA,KAAK,CAAC,2DAAD,EAA8D+B,KAA9D,EAAqEH,KAArE,CAAL;AACD,eAJD,MAIO;AACLA,gBAAAA,KAAK,GAAGJ,MAAM,CAACQ,cAAP,CAAsBM,WAAtB,EAAR;AACAd,gBAAAA,MAAM,CAACQ,cAAP,CAAsBE,GAAtB,CAA0BH,KAA1B,EAAiCH,KAAjC;AACAH,gBAAAA,MAAM,CAACI,UAAP,GAAoB,EAAE,GAAIJ,MAAM,CAACI,UAAb;AAA0BC,kBAAAA,UAAU,EAAEF;AAAtC,iBAApB;AACA5B,gBAAAA,KAAK,CAAC,sDAAD,EAAyD+B,KAAzD,EAAgEH,KAAhE,CAAL;AACD;AACF,aAZD,MAYO,IAAIJ,MAAM,CAACE,OAAP,CAAea,iBAAnB,EAAsC;AAC3CX,cAAAA,KAAK,GAAGJ,MAAM,CAACQ,cAAP,CAAsBK,eAAtB,CAAsCN,KAAtC,CAAR;;AACA,kBAAIH,KAAJ,EAAW;AACTH,gBAAAA,MAAM,CAACM,KAAP,GAAe,EAAf;AACAN,gBAAAA,MAAM,CAACI,UAAP,GAAoB,EAAE,GAAIJ,MAAM,CAACI,UAAb;AAA0BC,kBAAAA,UAAU,EAAEF;AAAtC,iBAApB;AACA5B,gBAAAA,KAAK,CAAC,mDAAD,EAAsD+B,KAAtD,EAA6DH,KAA7D,CAAL;AACD;AACF;AACF;AACF;AACF,OAlCD,MAkCO,IAAIA,KAAJ,EAAW;AAChB5B,QAAAA,KAAK,CAAC,8DAAD,EAAiE+B,KAAjE,EAAwEH,KAAxE,CAAL;AACA,eAAO,IAAIO,KAAJ,CAAU,kCAAV,CAAP;AACD;AACF;AACF;AACF;;AAED,SAASK,mCAAT,CAA8ChB,MAA9C,EAAsDC,MAAtD,EAA8D;AAC5D,MAAIG,KAAJ;;AACA,MAAIH,MAAM,CAACI,UAAX,EAAuB;AACrBD,IAAAA,KAAK,GAAGH,MAAM,CAACI,UAAP,CAAkBC,UAA1B;AACD;;AAED,MAAIC,KAAK,GAAGN,MAAM,CAACM,KAAP,CAAaV,QAAb,EAAZ;;AACA,MAAIU,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACA,QAAI,OAAOL,KAAP,KAAiB,WAArB,EAAkC;AAChC,aAAO,IAAIO,KAAJ,CAAU,0BAAV,CAAP;AACD,KAFD,MAEO;AACLJ,MAAAA,KAAK,GAAGP,MAAM,CAACQ,cAAP,CAAsBS,eAAtB,CAAsCb,KAAtC,CAAR;;AACA,UAAI,OAAOG,KAAP,KAAiB,WAArB,EAAkC;AAChC,eAAO,IAAII,KAAJ,CAAU,0BAAV,CAAP;AACD,OAFD,MAEO;AACLV,QAAAA,MAAM,CAACM,KAAP,GAAeA,KAAf;AACD;AACF;AACF;;AACD,MAAIH,KAAJ,EAAW;AACT,WAAOH,MAAM,CAACI,UAAP,CAAkBC,UAAzB;AACD;AACF;;AAED,SAASY,UAAT,CAAqBlB,MAArB,EAA6BC,MAA7B,EAAqCkB,EAArC,EAAyC;AACvC3C,EAAAA,KAAK,CAAC,0BAAD,EAA6ByB,MAA7B,CAAL;AACAzB,EAAAA,KAAK,CAAC,qCAAD,CAAL;AAEAwB,EAAAA,MAAM,CAACoB,IAAP,CAAY,YAAZ,EAA0BnB,MAA1B;AAEAzB,EAAAA,KAAK,CAAC,iCAAD,CAAL;AACA,QAAM6C,MAAM,GAAGrD,UAAU,CAACsD,aAAX,CAAyBrB,MAAzB,EAAiCD,MAAM,CAACuB,MAAxC,EAAgDvB,MAAM,CAACE,OAAvD,CAAf;AACA1B,EAAAA,KAAK,CAAC,uCAAD,EAA0C6C,MAA1C,CAAL;;AACA,MAAI,CAACA,MAAD,IAAWF,EAAf,EAAmB;AACjB3C,IAAAA,KAAK,CAAC,+DAAD,CAAL;AACAwB,IAAAA,MAAM,CAACuB,MAAP,CAAcC,IAAd,CAAmB,OAAnB,EAA4BL,EAA5B;AACD,GAHD,MAGO,IAAIA,EAAJ,EAAQ;AACb3C,IAAAA,KAAK,CAAC,2BAAD,CAAL;AACA2C,IAAAA,EAAE;AACH;AACF;;AAED,SAASM,KAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIA,KAAJ,EAAW;AACTlD,IAAAA,KAAK,CAAC,yBAAD,EAA4B,CAAC,CAAEkD,KAA/B,CAAL;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAUC,SAAV,EAAqB;AAC9C,UAAI,OAAOJ,KAAK,CAACI,SAAD,CAAL,CAAiBX,EAAxB,KAA+B,UAAnC,EAA+C;AAC7CO,QAAAA,KAAK,CAACI,SAAD,CAAL,CAAiBX,EAAjB,CAAoB,IAAIR,KAAJ,CAAU,mBAAV,CAApB;AACA,eAAOe,KAAK,CAACI,SAAD,CAAZ;AACD;AACF,KALD;AAMD;AACF;;AAED,SAASC,aAAT,CAAwBL,KAAxB,EAA+B;AAC7B,MAAIA,KAAJ,EAAW;AACTlD,IAAAA,KAAK,CAAC,0GAAD,CAAL;AACAmD,IAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAUC,SAAV,EAAqB;AAC9C,UAAIJ,KAAK,CAACI,SAAD,CAAL,CAAiBE,QAAjB,IAA6B,OAAON,KAAK,CAACI,SAAD,CAAL,CAAiBX,EAAxB,KAA+B,UAAhE,EAA4E;AAC1EO,QAAAA,KAAK,CAACI,SAAD,CAAL,CAAiBX,EAAjB,CAAoB,IAAIR,KAAJ,CAAU,mBAAV,CAApB;AACA,eAAOe,KAAK,CAACI,SAAD,CAAZ;AACD;AACF,KALD;AAMD;AACF;;AAED,SAASG,YAAT,CAAuBjC,MAAvB,EAA+BC,MAA/B,EAAuCkB,EAAvC,EAA2Ce,UAA3C,EAAuD;AACrD1D,EAAAA,KAAK,CAAC,2DAAD,EAA8DyB,MAAM,CAACE,GAArE,CAAL;AACA,MAAIgC,WAAW,GAAGlC,MAAlB;AACA,MAAImC,GAAJ;;AACA,MAAID,WAAW,CAAChC,GAAZ,KAAoB,SAAxB,EAAmC;AACjC;AACA;AACA;AACAgC,IAAAA,WAAW,GAAG9D,KAAK,CAAC4B,MAAD,CAAnB;AACAmC,IAAAA,GAAG,GAAGpB,mCAAmC,CAAChB,MAAD,EAASmC,WAAT,CAAzC;;AACA,QAAIC,GAAJ,EAAS;AACP,aAAOjB,EAAE,IAAIA,EAAE,CAACiB,GAAD,CAAf;AACD;AACF;;AACDpC,EAAAA,MAAM,CAACqC,aAAP,CAAqB3B,GAArB,CAAyByB,WAAzB,EAAsC,SAASG,YAAT,CAAuBF,GAAvB,EAA4B;AAChE,QAAIA,GAAJ,EAAS;AACP,aAAOjB,EAAE,IAAIA,EAAE,CAACiB,GAAD,CAAf;AACD;;AACDF,IAAAA,UAAU;AACVhB,IAAAA,UAAU,CAAClB,MAAD,EAASC,MAAT,EAAiBkB,EAAjB,CAAV;AACD,GAND;AAOD;;AAED,SAASoB,GAAT,CAAcC,KAAd,EAAqB;AACnBhE,EAAAA,KAAK,CAAC,QAAD,EAAWgE,KAAX,CAAL;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAqBC,aAArB,EAAoCxC,OAApC,EAA6C;AAC3C,MAAIyC,CAAJ;AACA,QAAMC,IAAI,GAAG,IAAb;;AAEA,MAAI,EAAE,gBAAgBH,UAAlB,CAAJ,EAAmC;AACjC,WAAO,IAAIA,UAAJ,CAAeC,aAAf,EAA8BxC,OAA9B,CAAP;AACD;;AAED,OAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B,CAR2C,CAU3C;;AACA,OAAKyC,CAAL,IAAU5D,qBAAV,EAAiC;AAC/B,QAAI,OAAO,KAAKmB,OAAL,CAAayC,CAAb,CAAP,KAA2B,WAA/B,EAA4C;AAC1C,WAAKzC,OAAL,CAAayC,CAAb,IAAkB5D,qBAAqB,CAAC4D,CAAD,CAAvC;AACD,KAFD,MAEO;AACL,WAAKzC,OAAL,CAAayC,CAAb,IAAkBzC,OAAO,CAACyC,CAAD,CAAzB;AACD;AACF;;AAEDnE,EAAAA,KAAK,CAAC,gCAAD,EAAmC0B,OAAO,CAAC2C,QAA3C,CAAL;AACArE,EAAAA,KAAK,CAAC,uCAAD,EAA0C0B,OAAO,CAACf,eAAlD,CAAL;AACAX,EAAAA,KAAK,CAAC,gCAAD,EAAmC0B,OAAO,CAAC4C,QAA3C,CAAL;AACAtE,EAAAA,KAAK,CAAC,iCAAD,EAAoC0B,OAAO,CAAClB,SAA5C,CAAL;AACAR,EAAAA,KAAK,CAAC,uCAAD,EAA0C0B,OAAO,CAACd,eAAlD,CAAL;AACAZ,EAAAA,KAAK,CAAC,0CAAD,EAA6C0B,OAAO,CAAC6C,kBAArD,CAAL;AACAvE,EAAAA,KAAK,CAAC,yCAAD,EAA4C0B,OAAO,CAAC8C,iBAApD,CAAL;AAEA,OAAK9C,OAAL,CAAa+C,QAAb,GAAyB,OAAO/C,OAAO,CAAC+C,QAAf,KAA4B,QAA7B,GAAyC/C,OAAO,CAAC+C,QAAjD,GAA4DvD,SAAS,EAA7F;AAEAlB,EAAAA,KAAK,CAAC,wBAAD,EAA2B,KAAK0B,OAAL,CAAa+C,QAAxC,CAAL;AAEA,OAAK/C,OAAL,CAAagD,gBAAb,GAAiChD,OAAO,CAACf,eAAR,KAA4B,CAA5B,IAAiCe,OAAO,CAACgD,gBAA1C,GAA8DhD,OAAO,CAACgD,gBAAtE,GAAyF,YAAY;AAAEC,IAAAA,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb;AAAiB,GAAxJ;AAEA,OAAKT,aAAL,GAAqBA,aAArB;AAEA,OAAKU,iBAAL,GAA0B,OAAO,KAAKlD,OAAL,CAAakD,iBAApB,KAA0C,WAA3C,GAA0D,IAAInF,wBAAJ,EAA1D,GAA2F,KAAKiC,OAAL,CAAakD,iBAAjI,CAnC2C,CAqC3C;;AACA,OAAKf,aAAL,GAAqBnC,OAAO,CAACmC,aAAR,IAAyB,IAAIxE,KAAJ,EAA9C;AACA,OAAKwF,aAAL,GAAqBnD,OAAO,CAACmD,aAAR,IAAyB,IAAIxF,KAAJ,EAA9C,CAvC2C,CAyC3C;;AACA,OAAKyF,YAAL,GAAoBpD,OAAO,CAACoD,YAAR,KAAyBC,SAAzB,GAAqC,IAArC,GAA4CrD,OAAO,CAACoD,YAAxE,CA1C2C,CA4C3C;;AACA,OAAKE,kBAAL,GAA0B,EAA1B,CA7C2C,CA+C3C;;AACA,OAAKC,gBAAL,GAAwB,EAAxB,CAhD2C,CAkD3C;;AACA,OAAKC,SAAL,GAAiB,IAAjB,CAnD2C,CAoD3C;;AACA,OAAKC,SAAL,GAAiB,KAAjB,CArD2C,CAsD3C;;AACA,OAAKC,aAAL,GAAqB,KAArB,CAvD2C,CAwD3C;;AACA,OAAKlC,KAAL,GAAa,EAAb,CAzD2C,CA0D3C;;AACA,OAAKmC,YAAL,GAAoB,IAApB,CA3D2C,CA4D3C;;AACA,OAAKC,cAAL,GAAsB,IAAtB,CA7D2C,CA8D3C;;AACA,OAAKC,gBAAL,GAAwB,KAAxB,CA/D2C,CAgE3C;;AACA,OAAKC,+BAAL,GAAuC,EAAvC,CAjE2C,CAkE3C;;AACA,OAAKC,qBAAL,GAA6B,EAA7B,CAnE2C,CAqE3C;;AACA,OAAKC,QAAL,GAAgB,EAAhB,CAtE2C,CAwE3C;;AACA,OAAKC,gBAAL,GAAwB,IAAxB;;AAEA,MAAIjE,OAAO,CAAC8C,iBAAR,GAA4B,CAAhC,EAAmC;AACjC,QAAI9C,OAAO,CAAC8C,iBAAR,GAA4B,MAAhC,EAAwC;AACtCxE,MAAAA,KAAK,CAAC,yDAAD,CAAL;AACD,KAFD,MAEO;AACL,WAAK4F,cAAL,GAAsB,IAAItG,cAAJ,CAAmBoC,OAAO,CAAC8C,iBAA3B,CAAtB;AACD;AACF,GAjF0C,CAmF3C;;;AACA,OAAKqB,EAAL,CAAQ,SAAR,EAAmB,YAAY;AAC7B,UAAM3C,KAAK,GAAG,KAAKA,KAAnB;;AAEA,aAAS4C,OAAT,GAAoB;AAClB,YAAMC,KAAK,GAAG7C,KAAK,CAAC8C,KAAN,EAAd;AACAhG,MAAAA,KAAK,CAAC,qBAAD,EAAwB+F,KAAxB,CAAL;AACA,UAAItE,MAAM,GAAG,IAAb;;AAEA,UAAI,CAACsE,KAAL,EAAY;AACV3B,QAAAA,IAAI,CAAC6B,YAAL;;AACA;AACD;;AAEDxE,MAAAA,MAAM,GAAGsE,KAAK,CAACtE,MAAf;AACAzB,MAAAA,KAAK,CAAC,oCAAD,EAAuCyB,MAAvC,CAAL;AACA,UAAIyE,IAAI,GAAG,IAAX;;AACA,UAAIzE,MAAM,CAAC6B,SAAP,IAAoB7B,MAAM,CAAC6B,SAAP,KAAqB,CAA7C,EAAgD;AAC9C,YAAI,CAACc,IAAI,CAACQ,iBAAL,CAAuBuB,QAAvB,CAAgC1E,MAAM,CAAC6B,SAAvC,CAAL,EAAwD;AACtD4C,UAAAA,IAAI,GAAG,KAAP;AACD;AACF;;AACD,UAAIA,IAAJ,EAAU;AACR9B,QAAAA,IAAI,CAACgC,WAAL,CACE3E,MADF,EAEE,UAAUmC,GAAV,EAAe;AACb,cAAImC,KAAK,CAACpD,EAAV,EAAc;AACZoD,YAAAA,KAAK,CAACpD,EAAN,CAASiB,GAAT;AACD;;AACDkC,UAAAA,OAAO;AACR,SAPH;AASD,OAVD,MAUO;AACL9F,QAAAA,KAAK,CAAC,qEAAD,EAAwEyB,MAAM,CAAC6B,SAA/E,CAAL;AACAwC,QAAAA,OAAO;AACR;AACF;;AAED9F,IAAAA,KAAK,CAAC,mCAAD,CAAL;AACA8F,IAAAA,OAAO;AACR,GAvCD;AAyCA,OAAKD,EAAL,CAAQ,OAAR,EAAiB,YAAY;AAC3B7F,IAAAA,KAAK,CAAC,mCAAD,CAAL;AACA,SAAKmF,SAAL,GAAiB,KAAjB;AAEAnF,IAAAA,KAAK,CAAC,gCAAD,CAAL;AACAqG,IAAAA,YAAY,CAAC,KAAKhB,YAAN,CAAZ;AAEArF,IAAAA,KAAK,CAAC,8BAAD,CAAL;;AACA,QAAIoE,IAAI,CAACc,SAAL,KAAmB,IAAvB,EAA6B;AAC3Bd,MAAAA,IAAI,CAACc,SAAL,CAAeoB,KAAf;AACAlC,MAAAA,IAAI,CAACc,SAAL,GAAiB,IAAjB;AACD;;AAED,QAAI,KAAKU,cAAT,EAAyB;AACvB,WAAKA,cAAL,CAAoBU,KAApB;AACD;;AAEDtG,IAAAA,KAAK,CAAC,kCAAD,CAAL;;AACA,SAAKuG,eAAL;AACD,GAnBD;AAoBApH,EAAAA,YAAY,CAACqH,IAAb,CAAkB,IAAlB;AAEAxG,EAAAA,KAAK,CAAC,iCAAD,CAAL;;AACA,OAAKyG,YAAL;AACD;;AACD9G,QAAQ,CAACsE,UAAD,EAAa9E,YAAb,CAAR;AAEA;AACA;AACA;AACA;AACA;;AACA8E,UAAU,CAACyC,SAAX,CAAqBD,YAArB,GAAoC,YAAY;AAC9C,QAAMrC,IAAI,GAAG,IAAb;AACA,QAAMuC,QAAQ,GAAG,IAAIjH,QAAJ,EAAjB;AACA,QAAMkH,MAAM,GAAGpH,UAAU,CAACoH,MAAX,CAAkB,KAAKlF,OAAvB,CAAf;AACA,MAAImF,aAAa,GAAG,IAApB;AACA,QAAMC,OAAO,GAAG,EAAhB;AAEA9G,EAAAA,KAAK,CAAC,mDAAD,CAAL;;AACA,OAAK+G,eAAL;;AAEA/G,EAAAA,KAAK,CAAC,yEAAD,CAAL;AACA,OAAK+C,MAAL,GAAc,KAAKmB,aAAL,CAAmB,IAAnB,CAAd;AAEA0C,EAAAA,MAAM,CAACf,EAAP,CAAU,QAAV,EAAoB,UAAUpE,MAAV,EAAkB;AACpCzB,IAAAA,KAAK,CAAC,4CAAD,CAAL;AACA8G,IAAAA,OAAO,CAACE,IAAR,CAAavF,MAAb;AACD,GAHD;;AAKA,WAASwF,YAAT,GAAyB;AACvB,QAAIH,OAAO,CAAC7E,MAAZ,EAAoB;AAClBhC,MAAAA,QAAQ,CAACiH,IAAD,CAAR;AACD,KAFD,MAEO;AACL,YAAMC,IAAI,GAAGN,aAAb;AACAA,MAAAA,aAAa,GAAG,IAAhB;AACAM,MAAAA,IAAI;AACL;AACF;;AAED,WAASD,IAAT,GAAiB;AACflH,IAAAA,KAAK,CAAC,sCAAD,CAAL;AACA,UAAMyB,MAAM,GAAGqF,OAAO,CAACd,KAAR,EAAf;;AAEA,QAAIvE,MAAJ,EAAY;AACVzB,MAAAA,KAAK,CAAC,kCAAD,CAAL;;AACAoE,MAAAA,IAAI,CAACgD,aAAL,CAAmB3F,MAAnB,EAA2BwF,YAA3B;AACD,KAHD,MAGO;AACLjH,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACA,YAAMmH,IAAI,GAAGN,aAAb;AACAA,MAAAA,aAAa,GAAG,IAAhB;AACA7G,MAAAA,KAAK,CAAC,yBAAD,EAA4B,CAAC,CAAEmH,IAA/B,CAAL;AACA,UAAIA,IAAJ,EAAUA,IAAI;AACf;AACF;;AAEDR,EAAAA,QAAQ,CAACU,MAAT,GAAkB,UAAUC,GAAV,EAAeC,GAAf,EAAoBJ,IAApB,EAA0B;AAC1CN,IAAAA,aAAa,GAAGM,IAAhB;AACAnH,IAAAA,KAAK,CAAC,mCAAD,CAAL;AACA4G,IAAAA,MAAM,CAACY,KAAP,CAAaF,GAAb;AACAJ,IAAAA,IAAI;AACL,GALD;;AAOA,WAASO,kBAAT,CAA6BzD,KAA7B,EAAoC;AAClChE,IAAAA,KAAK,CAAC,6BAAD,EAAgCgE,KAAK,CAAC0D,OAAtC,CAAL;;AACA,QAAI1G,YAAY,CAAC2G,QAAb,CAAsB3D,KAAK,CAAC4D,IAA5B,CAAJ,EAAuC;AACrC;AACA5H,MAAAA,KAAK,CAAC,sCAAD,CAAL;AACAoE,MAAAA,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmBoB,KAAnB;AACD,KAJD,MAIO;AACLD,MAAAA,GAAG,CAACC,KAAD,CAAH;AACD;AACF;;AAEDhE,EAAAA,KAAK,CAAC,gDAAD,CAAL;AACA,OAAK+C,MAAL,CAAY8E,IAAZ,CAAiBlB,QAAjB,EA/D8C,CAiE9C;;AACA,OAAK5D,MAAL,CAAY8C,EAAZ,CAAe,OAAf,EAAwB4B,kBAAxB,EAlE8C,CAoE9C;;AACA,OAAK1E,MAAL,CAAY8C,EAAZ,CAAe,OAAf,EAAwB,YAAY;AAClC7F,IAAAA,KAAK,CAAC,wBAAD,EAA2BoE,IAAI,CAAC1C,OAAL,CAAa+C,QAAxC,CAAL;AACAlB,IAAAA,aAAa,CAACa,IAAI,CAACsB,QAAN,CAAb;AACA1F,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACAoE,IAAAA,IAAI,CAACxB,IAAL,CAAU,OAAV;AACD,GALD,EArE8C,CA4E9C;;AACA5C,EAAAA,KAAK,CAAC,wCAAD,CAAL;AACA,QAAM8H,aAAa,GAAG3E,MAAM,CAAC4E,MAAP,CAAc,KAAKrG,OAAnB,CAAtB;AACAoG,EAAAA,aAAa,CAACnG,GAAd,GAAoB,SAApB;;AACA,MAAI,KAAKiE,cAAT,EAAyB;AACvB,QAAI,CAACkC,aAAa,CAACjG,UAAnB,EAA+B;AAC7BiG,MAAAA,aAAa,CAACjG,UAAd,GAA2B,EAA3B;AACD;;AACD,QAAI,KAAK+D,cAAT,EAAyB;AACvBkC,MAAAA,aAAa,CAACjG,UAAd,CAAyB2C,iBAAzB,GAA6C,KAAKoB,cAAL,CAAoBoC,GAAjE;AACD;AACF,GAvF6C,CAwF9C;;;AACAtF,EAAAA,UAAU,CAAC,IAAD,EAAOoF,aAAP,CAAV,CAzF8C,CA2F9C;;AACAlB,EAAAA,MAAM,CAACf,EAAP,CAAU,OAAV,EAAmB,KAAKjD,IAAL,CAAUqF,IAAV,CAAe,IAAf,EAAqB,OAArB,CAAnB,EA5F8C,CA8F9C;;AACA,MAAI,KAAKvG,OAAL,CAAaG,UAAjB,EAA6B;AAC3B,QAAI,CAAC,KAAKH,OAAL,CAAaG,UAAb,CAAwBqG,oBAAzB,IAAiD,KAAKxG,OAAL,CAAaG,UAAb,CAAwBsG,kBAA7E,EAAiG;AAC/F/D,MAAAA,IAAI,CAACgE,GAAL,CAAS,MACP,KAAKxF,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,qCAAV,CAAnB,CADF;AAGA,aAAO,IAAP;AACD;;AACD,QAAI,KAAKT,OAAL,CAAaG,UAAb,CAAwBqG,oBAAxB,IAAgD,KAAKxG,OAAL,CAAa2G,UAA7D,IAA2E,OAAO,KAAK3G,OAAL,CAAa2G,UAApB,KAAmC,QAAlH,EAA4H;AAC1H,YAAMA,UAAU,GAAGtI,KAAK,CAAC;AAAE4B,QAAAA,GAAG,EAAE,MAAP;AAAe2G,QAAAA,UAAU,EAAE;AAA3B,OAAD,EAAiC,KAAK5G,OAAL,CAAa2G,UAA9C,CAAxB;AACA3F,MAAAA,UAAU,CAAC,IAAD,EAAO2F,UAAP,CAAV;AACD;AACF,GA1G6C,CA4G9C;;;AACA,OAAKtF,MAAL,CAAYwF,eAAZ,CAA4B,IAA5B;AAEAlC,EAAAA,YAAY,CAAC,KAAKhB,YAAN,CAAZ;AACA,OAAKA,YAAL,GAAoBjF,UAAU,CAAC,YAAY;AACzCJ,IAAAA,KAAK,CAAC,2DAAD,CAAL;;AACAoE,IAAAA,IAAI,CAACoE,QAAL,CAAc,IAAd;AACD,GAH6B,EAG3B,KAAK9G,OAAL,CAAab,cAHc,CAA9B;AAID,CApHD;;AAsHAoD,UAAU,CAACyC,SAAX,CAAqBU,aAArB,GAAqC,UAAU3F,MAAV,EAAkB0F,IAAlB,EAAwB;AAC3D,QAAMzF,OAAO,GAAG,KAAKA,OAArB;;AAEA,MAAIA,OAAO,CAACf,eAAR,KAA4B,CAA5B,IAAiCe,OAAO,CAACG,UAAzC,IAAuDH,OAAO,CAACG,UAAR,CAAmB4G,iBAA1E,IAA+F/G,OAAO,CAACG,UAAR,CAAmB4G,iBAAnB,GAAuChH,MAAM,CAACQ,MAAjJ,EAAyJ;AACvJ,SAAKW,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,4BAA4BV,MAAM,CAACE,GAA7C,CAAnB;AACA,SAAKyG,GAAL,CAAS;AAAEE,MAAAA,UAAU,EAAE,GAAd;AAAmBzG,MAAAA,UAAU,EAAE;AAAE6G,QAAAA,YAAY,EAAE;AAAhB;AAA/B,KAAT;AACA,WAAO,IAAP;AACD;;AACD1I,EAAAA,KAAK,CAAC,yCAAD,CAAL;AACA,OAAK4C,IAAL,CAAU,eAAV,EAA2BnB,MAA3B;;AAEA,UAAQA,MAAM,CAACE,GAAf;AACE,SAAK,SAAL;AACE,WAAKgH,cAAL,CAAoBlH,MAApB,EAA4B0F,IAA5B;;AACA;;AACF,SAAK,QAAL;AACA,SAAK,QAAL;AACA,SAAK,SAAL;AACA,SAAK,QAAL;AACA,SAAK,UAAL;AACE,WAAKyB,UAAL,CAAgBnH,MAAhB;;AACA0F,MAAAA,IAAI;AACJ;;AACF,SAAK,QAAL;AACE,WAAK0B,aAAL,CAAmBpH,MAAnB,EAA2B0F,IAA3B;;AACA;;AACF,SAAK,SAAL;AACE,WAAK2B,cAAL,CAAoBrH,MAApB;;AACA0F,MAAAA,IAAI;AACJ;;AACF,SAAK,MAAL;AACE,WAAK4B,WAAL,CAAiBtH,MAAjB;;AACA0F,MAAAA,IAAI;AACJ;;AACF,SAAK,UAAL;AACE,WAAK6B,eAAL,CAAqBvH,MAArB;;AACA0F,MAAAA,IAAI;AACJ;;AACF,SAAK,YAAL;AACE,WAAK8B,iBAAL,CAAuBxH,MAAvB;;AACA0F,MAAAA,IAAI;AACJ;;AACF;AACE;AACA;AACA;AACA;AAnCJ;AAqCD,CAhDD;;AAkDAlD,UAAU,CAACyC,SAAX,CAAqBwC,mBAArB,GAA2C,UAAU/I,QAAV,EAAoB;AAC7D,MAAI,KAAKiF,aAAT,EAAwB;AACtB,QAAIjF,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC,IAAIgC,KAAJ,CAAU,sBAAV,CAAD,CAAR;AACD,KAFD,MAEO;AACL,WAAKS,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,sBAAV,CAAnB;AACD;AACF;;AACD,SAAO,KAAKiD,aAAZ;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,UAAU,CAACyC,SAAX,CAAqByC,OAArB,GAA+B,UAAUpH,KAAV,EAAiB2F,OAAjB,EAA0B0B,IAA1B,EAAgCjJ,QAAhC,EAA0C;AACvEH,EAAAA,KAAK,CAAC,uCAAD,EAA0C0H,OAA1C,EAAmD3F,KAAnD,CAAL;AACA,QAAML,OAAO,GAAG,KAAKA,OAArB,CAFuE,CAIvE;;AACA,MAAI,OAAO0H,IAAP,KAAgB,UAApB,EAAgC;AAC9BjJ,IAAAA,QAAQ,GAAGiJ,IAAX;AACAA,IAAAA,IAAI,GAAG,IAAP;AACD,GARsE,CAUvE;;;AACA,QAAMC,WAAW,GAAG;AAAEC,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,MAAM,EAAE,KAAlB;AAAyBC,IAAAA,GAAG,EAAE;AAA9B,GAApB;AACAJ,EAAAA,IAAI,GAAGrJ,KAAK,CAACsJ,WAAD,EAAcD,IAAd,CAAZ;;AAEA,MAAI,KAAKF,mBAAL,CAAyB/I,QAAzB,CAAJ,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED,QAAMiE,IAAI,GAAG,IAAb;;AACA,QAAMqF,WAAW,GAAG,YAAY;AAC9B,QAAInG,SAAS,GAAG,CAAhB;;AACA,QAAI8F,IAAI,CAACE,GAAL,KAAa,CAAb,IAAkBF,IAAI,CAACE,GAAL,KAAa,CAAnC,EAAsC;AACpChG,MAAAA,SAAS,GAAGc,IAAI,CAACsF,OAAL,EAAZ;;AACA,UAAIpG,SAAS,KAAK,IAAlB,EAAwB;AACtBtD,QAAAA,KAAK,CAAC,mBAAD,CAAL;AACA,eAAO,KAAP;AACD;AACF;;AACD,UAAMyB,MAAM,GAAG;AACbE,MAAAA,GAAG,EAAE,SADQ;AAEbI,MAAAA,KAAK,EAAEA,KAFM;AAGb4H,MAAAA,OAAO,EAAEjC,OAHI;AAIb4B,MAAAA,GAAG,EAAEF,IAAI,CAACE,GAJG;AAKbC,MAAAA,MAAM,EAAEH,IAAI,CAACG,MALA;AAMbjG,MAAAA,SAAS,EAAEA,SANE;AAObkG,MAAAA,GAAG,EAAEJ,IAAI,CAACI;AAPG,KAAf;;AAUA,QAAI9H,OAAO,CAACf,eAAR,KAA4B,CAAhC,EAAmC;AACjCc,MAAAA,MAAM,CAACI,UAAP,GAAoBuH,IAAI,CAACvH,UAAzB;AACD;;AAED7B,IAAAA,KAAK,CAAC,gBAAD,EAAmBoJ,IAAI,CAACE,GAAxB,CAAL;;AACA,YAAQF,IAAI,CAACE,GAAb;AACE,WAAK,CAAL;AACA,WAAK,CAAL;AACE;AACAlF,QAAAA,IAAI,CAACsB,QAAL,CAAcjE,MAAM,CAAC6B,SAArB,IAAkC;AAChCE,UAAAA,QAAQ,EAAE,KADsB;AAEhCb,UAAAA,EAAE,EAAExC,QAAQ,IAAI4D;AAFgB,SAAlC;AAIA/D,QAAAA,KAAK,CAAC,oCAAD,EAAuCyB,MAAM,CAACE,GAA9C,CAAL;;AACAyC,QAAAA,IAAI,CAACgC,WAAL,CAAiB3E,MAAjB,EAAyBsD,SAAzB,EAAoCqE,IAAI,CAAC1F,UAAzC;;AACA;;AACF;AACE1D,QAAAA,KAAK,CAAC,oCAAD,EAAuCyB,MAAM,CAACE,GAA9C,CAAL;;AACAyC,QAAAA,IAAI,CAACgC,WAAL,CAAiB3E,MAAjB,EAAyBtB,QAAzB,EAAmCiJ,IAAI,CAAC1F,UAAxC;;AACA;AAdJ;;AAgBA,WAAO,IAAP;AACD,GAzCD;;AA2CA,MAAI,KAAK6B,gBAAL,IAAyB,KAAKE,qBAAL,CAA2BxD,MAA3B,GAAoC,CAA7D,IAAkE,CAACwH,WAAW,EAAlF,EAAsF;AACpF,SAAKhE,qBAAL,CAA2BuB,IAA3B,CACE;AACE4C,MAAAA,MAAM,EAAEH,WADV;AAEE/F,MAAAA,UAAU,EAAE0F,IAAI,CAAC1F,UAFnB;AAGEvD,MAAAA,QAAQ,EAAEA;AAHZ,KADF;AAOD;;AACD,SAAO,IAAP;AACD,CAxED;AA0EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA8D,UAAU,CAACyC,SAAX,CAAqBmD,SAArB,GAAiC,YAAY;AAC3C,QAAMzF,IAAI,GAAG,IAAb;AACA,QAAM0F,IAAI,GAAG,IAAIC,KAAJ,CAAUpF,SAAS,CAAC1C,MAApB,CAAb;;AACA,OAAK,IAAI+H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrF,SAAS,CAAC1C,MAA9B,EAAsC+H,CAAC,EAAvC,EAA2C;AACzCF,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUrF,SAAS,CAACqF,CAAD,CAAnB;AACD;;AACD,QAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,GAAG,GAAGJ,IAAI,CAAC9D,KAAL,EAAV;AACA,QAAMjF,WAAW,GAAGmJ,GAAG,CAACnJ,WAAxB;AACA,MAAIZ,QAAQ,GAAG2J,IAAI,CAACK,GAAL,MAAcpG,GAA7B;AACA,MAAIqF,IAAI,GAAGU,IAAI,CAACK,GAAL,EAAX;AACA,QAAMC,OAAO,GAAG,KAAK1I,OAAL,CAAaf,eAA7B;AAEA,SAAOuJ,GAAG,CAACnJ,WAAX;;AAEA,MAAI,OAAOmJ,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD;;AAED,MAAI,OAAO/J,QAAP,KAAoB,UAAxB,EAAoC;AAClCiJ,IAAAA,IAAI,GAAGjJ,QAAP;AACAA,IAAAA,QAAQ,GAAG4D,GAAX;AACD;;AAED,QAAMsG,YAAY,GAAGvK,WAAW,CAACwK,cAAZ,CAA2BJ,GAA3B,CAArB;;AACA,MAAIG,YAAY,KAAK,IAArB,EAA2B;AACzBhK,IAAAA,YAAY,CAACF,QAAD,EAAW,IAAIgC,KAAJ,CAAU,mBAAmBkI,YAA7B,CAAX,CAAZ;AACA,WAAO,IAAP;AACD;;AAED,MAAI,KAAKnB,mBAAL,CAAyB/I,QAAzB,CAAJ,EAAwC;AACtCH,IAAAA,KAAK,CAAC,+BAAD,CAAL;AACA,WAAO,IAAP;AACD;;AAED,QAAMqJ,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE;AADa,GAApB;;AAGA,MAAIc,OAAO,KAAK,CAAhB,EAAmB;AACjBf,IAAAA,WAAW,CAACkB,EAAZ,GAAiB,KAAjB;AACAlB,IAAAA,WAAW,CAACmB,GAAZ,GAAkB,KAAlB;AACAnB,IAAAA,WAAW,CAACoB,EAAZ,GAAiB,CAAjB;AACD;;AACDrB,EAAAA,IAAI,GAAGrJ,KAAK,CAACsJ,WAAD,EAAcD,IAAd,CAAZ;;AAEA,MAAIW,KAAK,CAACW,OAAN,CAAcR,GAAd,CAAJ,EAAwB;AACtBA,IAAAA,GAAG,CAAC7G,OAAJ,CAAY,UAAUtB,KAAV,EAAiB;AAC3B/B,MAAAA,KAAK,CAAC,2BAAD,EAA8B+B,KAA9B,CAAL;;AACA,UAAI,CAACoB,MAAM,CAACuD,SAAP,CAAiBiE,cAAjB,CAAgCnE,IAAhC,CAAqCpC,IAAI,CAACY,kBAA1C,EAA8DjD,KAA9D,CAAD,IACFqC,IAAI,CAACY,kBAAL,CAAwBjD,KAAxB,EAA+BuH,GAA/B,GAAqCF,IAAI,CAACE,GADxC,IAEAvI,WAFJ,EAEiB;AACf,cAAM6J,WAAW,GAAG;AAClB7I,UAAAA,KAAK,EAAEA,KADW;AAElBuH,UAAAA,GAAG,EAAEF,IAAI,CAACE;AAFQ,SAApB;;AAIA,YAAIc,OAAO,KAAK,CAAhB,EAAmB;AACjBQ,UAAAA,WAAW,CAACL,EAAZ,GAAiBnB,IAAI,CAACmB,EAAtB;AACAK,UAAAA,WAAW,CAACJ,GAAZ,GAAkBpB,IAAI,CAACoB,GAAvB;AACAI,UAAAA,WAAW,CAACH,EAAZ,GAAiBrB,IAAI,CAACqB,EAAtB;AACAG,UAAAA,WAAW,CAAC/I,UAAZ,GAAyBuH,IAAI,CAACvH,UAA9B;AACD;;AACD7B,QAAAA,KAAK,CAAC,yDAAD,EAA4D4K,WAAW,CAAC7I,KAAxE,EAA+E6I,WAAW,CAACtB,GAA3F,CAAL;AACAW,QAAAA,IAAI,CAACjD,IAAL,CAAU4D,WAAV;AACD;AACF,KAlBD;AAmBD,GApBD,MAoBO;AACLzH,IAAAA,MAAM,CACHC,IADH,CACQ8G,GADR,EAEG7G,OAFH,CAEW,UAAUc,CAAV,EAAa;AACpBnE,MAAAA,KAAK,CAAC,4BAAD,EAA+BmE,CAA/B,CAAL;;AACA,UAAI,CAAChB,MAAM,CAACuD,SAAP,CAAiBiE,cAAjB,CAAgCnE,IAAhC,CAAqCpC,IAAI,CAACY,kBAA1C,EAA8Db,CAA9D,CAAD,IACFC,IAAI,CAACY,kBAAL,CAAwBb,CAAxB,EAA2BmF,GAA3B,GAAiCY,GAAG,CAAC/F,CAAD,CAAH,CAAOmF,GADtC,IAEAvI,WAFJ,EAEiB;AACf,cAAM6J,WAAW,GAAG;AAClB7I,UAAAA,KAAK,EAAEoC,CADW;AAElBmF,UAAAA,GAAG,EAAEY,GAAG,CAAC/F,CAAD,CAAH,CAAOmF;AAFM,SAApB;;AAIA,YAAIc,OAAO,KAAK,CAAhB,EAAmB;AACjBQ,UAAAA,WAAW,CAACL,EAAZ,GAAiBL,GAAG,CAAC/F,CAAD,CAAH,CAAOoG,EAAxB;AACAK,UAAAA,WAAW,CAACJ,GAAZ,GAAkBN,GAAG,CAAC/F,CAAD,CAAH,CAAOqG,GAAzB;AACAI,UAAAA,WAAW,CAACH,EAAZ,GAAiBP,GAAG,CAAC/F,CAAD,CAAH,CAAOsG,EAAxB;AACAG,UAAAA,WAAW,CAAC/I,UAAZ,GAAyBuH,IAAI,CAACvH,UAA9B;AACD;;AACD7B,QAAAA,KAAK,CAAC,sCAAD,EAAyC4K,WAAzC,CAAL;AACAX,QAAAA,IAAI,CAACjD,IAAL,CAAU4D,WAAV;AACD;AACF,KApBH;AAqBD;;AAED,MAAI,CAACX,IAAI,CAAChI,MAAV,EAAkB;AAChB9B,IAAAA,QAAQ,CAAC,IAAD,EAAO,EAAP,CAAR;AACA,WAAO,IAAP;AACD;;AAED,QAAM0K,aAAa,GAAG,YAAY;AAChC,UAAMvH,SAAS,GAAGc,IAAI,CAACsF,OAAL,EAAlB;;AACA,QAAIpG,SAAS,KAAK,IAAlB,EAAwB;AACtBtD,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAED,UAAMyB,MAAM,GAAG;AACbE,MAAAA,GAAG,EAAE,WADQ;AAEbmJ,MAAAA,aAAa,EAAEb,IAFF;AAGbX,MAAAA,GAAG,EAAE,CAHQ;AAIbC,MAAAA,MAAM,EAAE,KAJK;AAKbC,MAAAA,GAAG,EAAE,KALQ;AAMblG,MAAAA,SAAS,EAAEA;AANE,KAAf;;AASA,QAAI8F,IAAI,CAACvH,UAAT,EAAqB;AACnBJ,MAAAA,MAAM,CAACI,UAAP,GAAoBuH,IAAI,CAACvH,UAAzB;AACD,KAlB+B,CAoBhC;;;AACA,QAAIuC,IAAI,CAAC1C,OAAL,CAAaX,WAAjB,EAA8B;AAC5Bf,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACA,YAAM+K,MAAM,GAAG,EAAf;AACAd,MAAAA,IAAI,CAAC5G,OAAL,CAAa,UAAU2H,GAAV,EAAe;AAC1B,YAAI5G,IAAI,CAAC1C,OAAL,CAAad,eAAb,GAA+B,CAAnC,EAAsC;AACpC,gBAAMmB,KAAK,GAAG;AAAEuH,YAAAA,GAAG,EAAE0B,GAAG,CAAC1B;AAAX,WAAd;;AACA,cAAIc,OAAO,KAAK,CAAhB,EAAmB;AACjBrI,YAAAA,KAAK,CAACwI,EAAN,GAAWS,GAAG,CAACT,EAAJ,IAAU,KAArB;AACAxI,YAAAA,KAAK,CAACyI,GAAN,GAAYQ,GAAG,CAACR,GAAJ,IAAW,KAAvB;AACAzI,YAAAA,KAAK,CAAC0I,EAAN,GAAWO,GAAG,CAACP,EAAJ,IAAU,CAArB;AACA1I,YAAAA,KAAK,CAACF,UAAN,GAAmBmJ,GAAG,CAACnJ,UAAvB;AACD;;AACDuC,UAAAA,IAAI,CAACY,kBAAL,CAAwBgG,GAAG,CAACjJ,KAA5B,IAAqCA,KAArC;AACAgJ,UAAAA,MAAM,CAAC/D,IAAP,CAAYgE,GAAG,CAACjJ,KAAhB;AACD;AACF,OAZD;AAaAqC,MAAAA,IAAI,CAACa,gBAAL,CAAsBxD,MAAM,CAAC6B,SAA7B,IAA0CyH,MAA1C;AACD;;AAED3G,IAAAA,IAAI,CAACsB,QAAL,CAAcjE,MAAM,CAAC6B,SAArB,IAAkC;AAChCE,MAAAA,QAAQ,EAAE,IADsB;AAEhCb,MAAAA,EAAE,EAAE,UAAUiB,GAAV,EAAenC,MAAf,EAAuB;AACzB,YAAI,CAACmC,GAAL,EAAU;AACR,gBAAMqH,OAAO,GAAGxJ,MAAM,CAACwJ,OAAvB;;AACA,eAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,OAAO,CAAChJ,MAA5B,EAAoC+H,CAAC,IAAI,CAAzC,EAA4C;AAC1CC,YAAAA,IAAI,CAACD,CAAD,CAAJ,CAAQV,GAAR,GAAc2B,OAAO,CAACjB,CAAD,CAArB;AACD;AACF;;AAED7J,QAAAA,QAAQ,CAACyD,GAAD,EAAMqG,IAAN,CAAR;AACD;AAX+B,KAAlC;AAaAjK,IAAAA,KAAK,CAAC,+BAAD,CAAL;;AACAoE,IAAAA,IAAI,CAACgC,WAAL,CAAiB3E,MAAjB;;AACA,WAAO,IAAP;AACD,GAxDD;;AA0DA,MAAI,KAAK8D,gBAAL,IAAyB,KAAKE,qBAAL,CAA2BxD,MAA3B,GAAoC,CAA7D,IAAkE,CAAC4I,aAAa,EAApF,EAAwF;AACtF,SAAKpF,qBAAL,CAA2BuB,IAA3B,CACE;AACE4C,MAAAA,MAAM,EAAEiB,aADV;AAEE1K,MAAAA,QAAQ,EAAEA;AAFZ,KADF;AAMD;;AAED,SAAO,IAAP;AACD,CAlKD;AAoKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA8D,UAAU,CAACyC,SAAX,CAAqBwE,WAArB,GAAmC,YAAY;AAC7C,QAAM9G,IAAI,GAAG,IAAb;AACA,QAAM0F,IAAI,GAAG,IAAIC,KAAJ,CAAUpF,SAAS,CAAC1C,MAApB,CAAb;;AACA,OAAK,IAAI+H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrF,SAAS,CAAC1C,MAA9B,EAAsC+H,CAAC,EAAvC,EAA2C;AACzCF,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAUrF,SAAS,CAACqF,CAAD,CAAnB;AACD;;AACD,MAAIjI,KAAK,GAAG+H,IAAI,CAAC9D,KAAL,EAAZ;AACA,MAAI7F,QAAQ,GAAG2J,IAAI,CAACK,GAAL,MAAcpG,GAA7B;AACA,MAAIqF,IAAI,GAAGU,IAAI,CAACK,GAAL,EAAX;;AACA,MAAI,OAAOpI,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,IAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACD;;AAED,MAAI,OAAO5B,QAAP,KAAoB,UAAxB,EAAoC;AAClCiJ,IAAAA,IAAI,GAAGjJ,QAAP;AACAA,IAAAA,QAAQ,GAAG4D,GAAX;AACD;;AAED,QAAMsG,YAAY,GAAGvK,WAAW,CAACwK,cAAZ,CAA2BvI,KAA3B,CAArB;;AACA,MAAIsI,YAAY,KAAK,IAArB,EAA2B;AACzBhK,IAAAA,YAAY,CAACF,QAAD,EAAW,IAAIgC,KAAJ,CAAU,mBAAmBkI,YAA7B,CAAX,CAAZ;AACA,WAAO,IAAP;AACD;;AAED,MAAIjG,IAAI,CAAC8E,mBAAL,CAAyB/I,QAAzB,CAAJ,EAAwC;AACtC,WAAO,IAAP;AACD;;AAED,QAAMgL,eAAe,GAAG,YAAY;AAClC,UAAM7H,SAAS,GAAGc,IAAI,CAACsF,OAAL,EAAlB;;AACA,QAAIpG,SAAS,KAAK,IAAlB,EAAwB;AACtBtD,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACA,aAAO,KAAP;AACD;;AACD,UAAMyB,MAAM,GAAG;AACbE,MAAAA,GAAG,EAAE,aADQ;AAEb2H,MAAAA,GAAG,EAAE,CAFQ;AAGbhG,MAAAA,SAAS,EAAEA;AAHE,KAAf;;AAMA,QAAI,OAAOvB,KAAP,KAAiB,QAArB,EAA+B;AAC7BN,MAAAA,MAAM,CAAC2J,eAAP,GAAyB,CAACrJ,KAAD,CAAzB;AACD,KAFD,MAEO,IAAIgI,KAAK,CAACW,OAAN,CAAc3I,KAAd,CAAJ,EAA0B;AAC/BN,MAAAA,MAAM,CAAC2J,eAAP,GAAyBrJ,KAAzB;AACD;;AAED,QAAIqC,IAAI,CAAC1C,OAAL,CAAaX,WAAjB,EAA8B;AAC5BU,MAAAA,MAAM,CAAC2J,eAAP,CAAuB/H,OAAvB,CAA+B,UAAUtB,KAAV,EAAiB;AAC9C,eAAOqC,IAAI,CAACY,kBAAL,CAAwBjD,KAAxB,CAAP;AACD,OAFD;AAGD;;AAED,QAAI,OAAOqH,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACvH,UAArC,EAAiD;AAC/CJ,MAAAA,MAAM,CAACI,UAAP,GAAoBuH,IAAI,CAACvH,UAAzB;AACD;;AAEDuC,IAAAA,IAAI,CAACsB,QAAL,CAAcjE,MAAM,CAAC6B,SAArB,IAAkC;AAChCE,MAAAA,QAAQ,EAAE,IADsB;AAEhCb,MAAAA,EAAE,EAAExC;AAF4B,KAAlC;AAKAH,IAAAA,KAAK,CAAC,+BAAD,CAAL;;AACAoE,IAAAA,IAAI,CAACgC,WAAL,CAAiB3E,MAAjB;;AAEA,WAAO,IAAP;AACD,GArCD;;AAuCA,MAAI,KAAK8D,gBAAL,IAAyB,KAAKE,qBAAL,CAA2BxD,MAA3B,GAAoC,CAA7D,IAAkE,CAACkJ,eAAe,EAAtF,EAA0F;AACxF,SAAK1F,qBAAL,CAA2BuB,IAA3B,CACE;AACE4C,MAAAA,MAAM,EAAEuB,eADV;AAEEhL,MAAAA,QAAQ,EAAEA;AAFZ,KADF;AAMD;;AAED,SAAO,IAAP;AACD,CA7ED;AA+EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA8D,UAAU,CAACyC,SAAX,CAAqB0B,GAArB,GAA2B,UAAUiD,KAAV,EAAiBjC,IAAjB,EAAuBzG,EAAvB,EAA2B;AACpD,QAAMyB,IAAI,GAAG,IAAb;AAEApE,EAAAA,KAAK,CAAC,aAAD,EAAgB,KAAK0B,OAAL,CAAa+C,QAA7B,CAAL;;AAEA,MAAI4G,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAtC,EAAiD;AAC/C1I,IAAAA,EAAE,GAAGyG,IAAI,IAAIrF,GAAb;AACAqF,IAAAA,IAAI,GAAGiC,KAAP;AACAA,IAAAA,KAAK,GAAG,KAAR;;AACA,QAAI,OAAOjC,IAAP,KAAgB,QAApB,EAA8B;AAC5BzG,MAAAA,EAAE,GAAGyG,IAAL;AACAA,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAI,OAAOzG,EAAP,KAAc,UAAlB,EAA8B;AAC5BA,QAAAA,EAAE,GAAGoB,GAAL;AACD;AACF;AACF;;AAED,MAAI,OAAOqF,IAAP,KAAgB,QAApB,EAA8B;AAC5BzG,IAAAA,EAAE,GAAGyG,IAAL;AACAA,IAAAA,IAAI,GAAG,IAAP;AACD;;AAEDpJ,EAAAA,KAAK,CAAC,eAAD,EAAkB,CAAC,CAAC2C,EAApB,CAAL;AACAA,EAAAA,EAAE,GAAGA,EAAE,IAAIoB,GAAX;;AAEA,WAASuH,WAAT,GAAwB;AACtBtL,IAAAA,KAAK,CAAC,0DAAD,CAAL;AACAoE,IAAAA,IAAI,CAACmH,YAAL,GAAoB,IAApB;AACAnH,IAAAA,IAAI,CAACS,aAAL,CAAmB2G,KAAnB,CAAyB,UAAUC,EAAV,EAAc;AACrCrH,MAAAA,IAAI,CAACP,aAAL,CAAmB2H,KAAnB,CAAyB,UAAUE,EAAV,EAAc;AACrC1L,QAAAA,KAAK,CAAC,kCAAD,CAAL;AACAoE,QAAAA,IAAI,CAACxB,IAAL,CAAU,KAAV;;AACA,YAAID,EAAJ,EAAQ;AACN,gBAAMiB,GAAG,GAAG6H,EAAE,IAAIC,EAAlB;AACA1L,UAAAA,KAAK,CAAC,iDAAD,CAAL;AACA2C,UAAAA,EAAE,CAACiB,GAAD,CAAF;AACD;AACF,OARD;AASD,KAVD;;AAWA,QAAIQ,IAAI,CAACuH,kBAAT,EAA6B;AAC3BvH,MAAAA,IAAI,CAACuH,kBAAL;AACD;AACF;;AAED,WAASC,MAAT,GAAmB;AACjB;AACA;AACA;AACA5L,IAAAA,KAAK,CAAC,yDAAD,EAA4DoE,IAAI,CAAC1C,OAAL,CAAa+C,QAAzE,EAAmF4G,KAAnF,CAAL;;AACAjH,IAAAA,IAAI,CAACoE,QAAL,CAAc6C,KAAd,EAAqB,MAAM;AACzBrL,MAAAA,KAAK,CAAC,0DAAD,CAAL,CADyB,CAEzB;;AACAC,MAAAA,QAAQ,CAACqL,WAAW,CAACrD,IAAZ,CAAiB7D,IAAjB,CAAD,CAAR;AACD,KAJD,EAIGgF,IAJH;AAKD;;AAED,MAAI,KAAKhE,aAAT,EAAwB;AACtBzC,IAAAA,EAAE;AACF,WAAO,IAAP;AACD;;AAED,OAAKoE,eAAL;;AAEA,OAAK3B,aAAL,GAAqB,IAArB;;AAEA,MAAI,CAACiG,KAAD,IAAUlI,MAAM,CAACC,IAAP,CAAY,KAAKsC,QAAjB,EAA2BzD,MAA3B,GAAoC,CAAlD,EAAqD;AACnD;AACAjC,IAAAA,KAAK,CAAC,8DAAD,EAAiEoE,IAAI,CAAC1C,OAAL,CAAa+C,QAA9E,CAAL;AACA,SAAKzB,IAAL,CAAU,eAAV,EAA2B5C,UAAU,CAAC6H,IAAX,CAAgB,IAAhB,EAAsB2D,MAAtB,EAA8B,EAA9B,CAA3B;AACD,GAJD,MAIO;AACL5L,IAAAA,KAAK,CAAC,2CAAD,EAA8CoE,IAAI,CAAC1C,OAAL,CAAa+C,QAA3D,CAAL;AACAmH,IAAAA,MAAM;AACP;;AAED,SAAO,IAAP;AACD,CA5ED;AA8EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3H,UAAU,CAACyC,SAAX,CAAqBmF,qBAArB,GAA6C,UAAUvI,SAAV,EAAqB;AAChE,QAAMX,EAAE,GAAG,KAAK+C,QAAL,CAAcpC,SAAd,IAA2B,KAAKoC,QAAL,CAAcpC,SAAd,EAAyBX,EAApD,GAAyD,IAApE;AACA,SAAO,KAAK+C,QAAL,CAAcpC,SAAd,CAAP;AACA,OAAKO,aAAL,CAAmBiI,GAAnB,CAAuB;AAAExI,IAAAA,SAAS,EAAEA;AAAb,GAAvB,EAAiD,YAAY;AAC3DX,IAAAA,EAAE,CAAC,IAAIR,KAAJ,CAAU,iBAAV,CAAD,CAAF;AACD,GAFD;AAGA,SAAO,IAAP;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA8B,UAAU,CAACyC,SAAX,CAAqBqF,SAArB,GAAiC,UAAU3C,IAAV,EAAgB;AAC/CpJ,EAAAA,KAAK,CAAC,kBAAD,CAAL;AACA,QAAMoE,IAAI,GAAG,IAAb;;AACA,QAAM4H,CAAC,GAAG,YAAY;AACpB,QAAI5C,IAAJ,EAAU;AACRhF,MAAAA,IAAI,CAAC1C,OAAL,CAAamD,aAAb,GAA6BuE,IAAI,CAACvE,aAAlC;AACAT,MAAAA,IAAI,CAAC1C,OAAL,CAAamC,aAAb,GAA6BuF,IAAI,CAACvF,aAAlC;AACD,KAHD,MAGO;AACLO,MAAAA,IAAI,CAAC1C,OAAL,CAAamD,aAAb,GAA6B,IAA7B;AACAT,MAAAA,IAAI,CAAC1C,OAAL,CAAamC,aAAb,GAA6B,IAA7B;AACD;;AACDO,IAAAA,IAAI,CAACS,aAAL,GAAqBT,IAAI,CAAC1C,OAAL,CAAamD,aAAb,IAA8B,IAAIxF,KAAJ,EAAnD;AACA+E,IAAAA,IAAI,CAACP,aAAL,GAAqBO,IAAI,CAAC1C,OAAL,CAAamC,aAAb,IAA8B,IAAIxE,KAAJ,EAAnD;AACA+E,IAAAA,IAAI,CAACgB,aAAL,GAAqB,KAArB;AACAhB,IAAAA,IAAI,CAACmH,YAAL,GAAoB,KAApB;AACAnH,IAAAA,IAAI,CAACuH,kBAAL,GAA0B,IAA1B;;AACAvH,IAAAA,IAAI,CAAC6H,UAAL;AACD,GAdD;;AAgBA,MAAI,KAAK7G,aAAL,IAAsB,CAAC,KAAKmG,YAAhC,EAA8C;AAC5C,SAAKI,kBAAL,GAA0BK,CAA1B;AACD,GAFD,MAEO;AACLA,IAAAA,CAAC;AACF;;AACD,SAAO,IAAP;AACD,CAzBD;AA2BA;AACA;AACA;AACA;;;AACA/H,UAAU,CAACyC,SAAX,CAAqBuF,UAArB,GAAkC,YAAY;AAC5CjM,EAAAA,KAAK,CAAC,0CAAD,CAAL;AACA,OAAK4C,IAAL,CAAU,WAAV;;AACA,MAAI,KAAKuC,SAAT,EAAoB;AAClB,SAAKiD,GAAL,CAAS,MAAM;AAAE,WAAK3B,YAAL;AAAqB,KAAtC;AACAzG,IAAAA,KAAK,CAAC,gDAAD,CAAL;AACD,GAHD,MAGO;AACLA,IAAAA,KAAK,CAAC,kCAAD,CAAL;;AACA,SAAKyG,YAAL;AACD;AACF,CAVD;AAYA;AACA;AACA;;;AACAxC,UAAU,CAACyC,SAAX,CAAqBH,eAArB,GAAuC,YAAY;AACjD,QAAMnC,IAAI,GAAG,IAAb;;AAEA,MAAI,CAACA,IAAI,CAACgB,aAAN,IAAuB,CAAChB,IAAI,CAACkB,cAA7B,IAAgDlB,IAAI,CAAC1C,OAAL,CAAad,eAAb,GAA+B,CAAnF,EAAuF;AACrF,QAAI,CAAC,KAAKsL,YAAV,EAAwB;AACtBlM,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACA,WAAK4C,IAAL,CAAU,SAAV;AACA5C,MAAAA,KAAK,CAAC,iDAAD,CAAL;AACA,WAAKkM,YAAL,GAAoB,IAApB;AACD;;AACDlM,IAAAA,KAAK,CAAC,qDAAD,EAAwDoE,IAAI,CAAC1C,OAAL,CAAad,eAArE,CAAL;AACAwD,IAAAA,IAAI,CAACkB,cAAL,GAAsB6G,WAAW,CAAC,YAAY;AAC5CnM,MAAAA,KAAK,CAAC,wCAAD,CAAL;;AACAoE,MAAAA,IAAI,CAAC6H,UAAL;AACD,KAHgC,EAG9B7H,IAAI,CAAC1C,OAAL,CAAad,eAHiB,CAAjC;AAID,GAZD,MAYO;AACLZ,IAAAA,KAAK,CAAC,qCAAD,CAAL;AACD;AACF,CAlBD;AAoBA;AACA;AACA;;;AACAiE,UAAU,CAACyC,SAAX,CAAqBK,eAArB,GAAuC,YAAY;AACjD/G,EAAAA,KAAK,CAAC,4CAAD,CAAL;;AACA,MAAI,KAAKsF,cAAT,EAAyB;AACvB8G,IAAAA,aAAa,CAAC,KAAK9G,cAAN,CAAb;AACA,SAAKA,cAAL,GAAsB,IAAtB;AACD;AACF,CAND;AAQA;AACA;AACA;AACA;;;AACArB,UAAU,CAACyC,SAAX,CAAqB8B,QAArB,GAAgC,UAAU6D,MAAV,EAAkBlF,IAAlB,EAAwB;AACtD,QAAMiC,IAAI,GAAGzE,SAAS,CAAC,CAAD,CAAtB;;AACA,MAAIwC,IAAJ,EAAU;AACRnH,IAAAA,KAAK,CAAC,wDAAD,CAAL;AACA,SAAK+C,MAAL,CAAY8C,EAAZ,CAAe,OAAf,EAAwBsB,IAAxB;AACD;;AAEDnH,EAAAA,KAAK,CAAC,wBAAD,EAA2BqM,MAA3B,CAAL;;AACA,MAAIA,MAAJ,EAAY;AACV,QAAK,KAAK3K,OAAL,CAAad,eAAb,KAAiC,CAAlC,IAAwC,KAAKc,OAAL,CAAaZ,KAAzD,EAAgE;AAC9DmC,MAAAA,KAAK,CAAC,KAAKyC,QAAN,CAAL;AACD;;AACD1F,IAAAA,KAAK,CAAC,uCAAD,EAA0C,KAAK0B,OAAL,CAAa+C,QAAvD,CAAL;AACA,SAAK1B,MAAL,CAAYuJ,OAAZ;AACD,GAND,MAMO;AACL,UAAM7K,MAAM,GAAG1B,KAAK,CAAC;AAAE4B,MAAAA,GAAG,EAAE;AAAP,KAAD,EAAwByH,IAAxB,CAApB;AACApJ,IAAAA,KAAK,CAAC,6DAAD,EAAgE,KAAK0B,OAAL,CAAa+C,QAA7E,CAAL;;AACA,SAAK2B,WAAL,CACE3E,MADF,EAEEpB,YAAY,CAAC4H,IAAb,CACE,IADF,EAEE,KAAKlF,MAAL,CAAYqF,GAAZ,CAAgBH,IAAhB,CAAqB,KAAKlF,MAA1B,CAFF,CAFF;AAOD;;AAED,MAAI,CAAC,KAAKqC,aAAV,EAAyB;AACvBpF,IAAAA,KAAK,CAAC,yEAAD,CAAL;;AACA,SAAK+G,eAAL;;AACA,SAAKR,eAAL;AACD;;AAED,MAAI,KAAKrB,SAAL,KAAmB,IAAvB,EAA6B;AAC3BlF,IAAAA,KAAK,CAAC,gCAAD,CAAL;AACA,SAAKkF,SAAL,CAAeoB,KAAf;AACA,SAAKpB,SAAL,GAAiB,IAAjB;AACD;;AAED,MAAIiC,IAAI,IAAI,CAAC,KAAKhC,SAAlB,EAA6B;AAC3BnF,IAAAA,KAAK,CAAC,sEAAD,EAAyE,KAAK0B,OAAL,CAAa+C,QAAtF,CAAL;AACA,SAAK1B,MAAL,CAAYwJ,cAAZ,CAA2B,OAA3B,EAAoCpF,IAApC;AACAA,IAAAA,IAAI;AACL;AACF,CA3CD;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlD,UAAU,CAACyC,SAAX,CAAqBN,WAArB,GAAmC,UAAU3E,MAAV,EAAkBkB,EAAlB,EAAsBe,UAAtB,EAAkC;AACnE1D,EAAAA,KAAK,CAAC,+BAAD,EAAkC,KAAK0B,OAAL,CAAa+C,QAA/C,CAAL;AACAf,EAAAA,UAAU,GAAGA,UAAU,IAAIK,GAA3B;AACApB,EAAAA,EAAE,GAAGA,EAAE,IAAIoB,GAAX;AAEA,QAAMH,GAAG,GAAGrC,eAAe,CAAC,IAAD,EAAOE,MAAP,CAA3B;;AACA,MAAImC,GAAJ,EAAS;AACPjB,IAAAA,EAAE,CAACiB,GAAD,CAAF;AACA;AACD;;AAED,MAAI,CAAC,KAAKuB,SAAV,EAAqB;AACnB;AACA,QAAI1D,MAAM,CAACE,GAAP,KAAe,MAAnB,EAA2B;AACzB,WAAK6K,kBAAL;;AACA9J,MAAAA,UAAU,CAAC,IAAD,EAAOjB,MAAP,EAAekB,EAAf,CAAV;AACA;AACD;;AAED3C,IAAAA,KAAK,CAAC,8DAAD,CAAL;;AACA,SAAKyM,YAAL,CAAkBhL,MAAlB,EAA0BkB,EAA1B,EAA8Be,UAA9B;;AACA;AACD,GAtBkE,CAwBnE;;;AACA,OAAK8I,kBAAL;;AAEA,UAAQ/K,MAAM,CAACE,GAAf;AACE,SAAK,SAAL;AACE;;AACF,SAAK,QAAL;AACE8B,MAAAA,YAAY,CAAC,IAAD,EAAOhC,MAAP,EAAekB,EAAf,EAAmBe,UAAnB,CAAZ;AACA;;AACF;AACEhB,MAAAA,UAAU,CAAC,IAAD,EAAOjB,MAAP,EAAekB,EAAf,CAAV;AACA;AARJ;;AAWA,UAAQlB,MAAM,CAAC6H,GAAf;AACE,SAAK,CAAL;AACA,SAAK,CAAL;AACE7F,MAAAA,YAAY,CAAC,IAAD,EAAOhC,MAAP,EAAekB,EAAf,EAAmBe,UAAnB,CAAZ;AACA;;AACF;AACJ;AACA;AACA;AACA;;AACI,SAAK,CAAL;AACE;;AACF;AACEhB,MAAAA,UAAU,CAAC,IAAD,EAAOjB,MAAP,EAAekB,EAAf,CAAV;AACA;AAdJ;;AAgBA3C,EAAAA,KAAK,CAAC,6BAAD,EAAgC,KAAK0B,OAAL,CAAa+C,QAA7C,CAAL;AACD,CAvDD;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,UAAU,CAACyC,SAAX,CAAqB+F,YAArB,GAAoC,UAAUhL,MAAV,EAAkBkB,EAAlB,EAAsBe,UAAtB,EAAkC;AACpE1D,EAAAA,KAAK,CAAC,4BAAD,EAA+ByB,MAA/B,CAAL;AACAzB,EAAAA,KAAK,CAAC,wBAAD,EAA2B,CAAC,CAAC2C,EAA7B,CAAL;AACAe,EAAAA,UAAU,GAAGA,UAAU,IAAIK,GAA3B;AAEA,MAAIJ,WAAW,GAAGlC,MAAlB;;AACA,MAAIkC,WAAW,CAAChC,GAAZ,KAAoB,SAAxB,EAAmC;AACjC;AACA;AACA;AACAgC,IAAAA,WAAW,GAAG9D,KAAK,CAAC4B,MAAD,CAAnB;AACA,UAAMmC,GAAG,GAAGpB,mCAAmC,CAAC,IAAD,EAAOmB,WAAP,CAA/C;;AACA,QAAIC,GAAJ,EAAS;AACP,aAAOjB,EAAE,IAAIA,EAAE,CAACiB,GAAD,CAAf;AACD;AACF,GAfmE,CAgBpE;;;AACA,MAAK,CAACD,WAAW,CAAC2F,GAAZ,IAAmB,CAApB,MAA2B,CAA3B,IAAgC,KAAKxE,YAAtC,IAAuDnB,WAAW,CAAChC,GAAZ,KAAoB,SAA/E,EAA0F;AACxF,SAAKuB,KAAL,CAAW8D,IAAX,CAAgB;AAAEvF,MAAAA,MAAM,EAAEkC,WAAV;AAAuBhB,MAAAA,EAAE,EAAEA;AAA3B,KAAhB;AACD,GAFD,MAEO,IAAIgB,WAAW,CAAC2F,GAAZ,GAAkB,CAAtB,EAAyB;AAC9B3G,IAAAA,EAAE,GAAG,KAAK+C,QAAL,CAAc/B,WAAW,CAACL,SAA1B,IAAuC,KAAKoC,QAAL,CAAc/B,WAAW,CAACL,SAA1B,EAAqCX,EAA5E,GAAiF,IAAtF;AACA,SAAKkB,aAAL,CAAmB3B,GAAnB,CAAuByB,WAAvB,EAAoC,UAAUC,GAAV,EAAe;AACjD,UAAIA,GAAJ,EAAS;AACP,eAAOjB,EAAE,IAAIA,EAAE,CAACiB,GAAD,CAAf;AACD;;AACDF,MAAAA,UAAU;AACX,KALD;AAMD,GARM,MAQA,IAAIf,EAAJ,EAAQ;AACbA,IAAAA,EAAE,CAAC,IAAIR,KAAJ,CAAU,yBAAV,CAAD,CAAF;AACD;AACF,CA9BD;AAgCA;AACA;AACA;AACA;AACA;;;AACA8B,UAAU,CAACyC,SAAX,CAAqBgG,eAArB,GAAuC,YAAY;AACjD1M,EAAAA,KAAK,CAAC,2CAAD,EAA8C,KAAK0B,OAAL,CAAalB,SAA3D,CAAL;AACA,QAAM4D,IAAI,GAAG,IAAb;;AAEA,MAAI,CAAC,KAAKc,SAAN,IAAmB,KAAKxD,OAAL,CAAalB,SAApC,EAA+C;AAC7C,SAAKmM,QAAL,GAAgB,IAAhB;AACA,SAAKzH,SAAL,GAAiBtF,UAAU,CAAC,YAAY;AACtCwE,MAAAA,IAAI,CAACwI,UAAL;AACD,KAF0B,EAExB,KAAKlL,OAAL,CAAalB,SAAb,GAAyB,IAFD,CAA3B;AAGD;AACF,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACAyD,UAAU,CAACyC,SAAX,CAAqB8F,kBAArB,GAA0C,YAAY;AACpD,MAAI,KAAKtH,SAAL,IAAkB,KAAKxD,OAAL,CAAalB,SAA/B,IAA4C,KAAKkB,OAAL,CAAajB,eAA7D,EAA8E;AAC5E,SAAKyE,SAAL,CAAe2H,UAAf,CAA0B,KAAKnL,OAAL,CAAalB,SAAb,GAAyB,IAAnD;AACD;AACF,CAJD;AAKA;AACA;AACA;AACA;AACA;;;AACAyD,UAAU,CAACyC,SAAX,CAAqBkG,UAArB,GAAkC,YAAY;AAC5C5M,EAAAA,KAAK,CAAC,gCAAD,CAAL;;AACA,MAAI,KAAK2M,QAAT,EAAmB;AACjB3M,IAAAA,KAAK,CAAC,2EAAD,CAAL;AACA,SAAK2M,QAAL,GAAgB,KAAhB;;AACA,SAAKvG,WAAL,CAAiB;AAAEzE,MAAAA,GAAG,EAAE;AAAP,KAAjB;AACD,GAJD,MAIO;AACL;AACA3B,IAAAA,KAAK,CAAC,gDAAD,CAAL;;AACA,SAAKwI,QAAL,CAAc,IAAd;AACD;AACF,CAXD;AAaA;AACA;AACA;AACA;AACA;;;AACAvE,UAAU,CAACyC,SAAX,CAAqBsC,eAArB,GAAuC,YAAY;AACjD,OAAK2D,QAAL,GAAgB,IAAhB;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA1I,UAAU,CAACyC,SAAX,CAAqBoC,cAArB,GAAsC,UAAUrH,MAAV,EAAkB;AACtDzB,EAAAA,KAAK,CAAC,gBAAD,CAAL;AACA,QAAM0B,OAAO,GAAG,KAAKA,OAArB;AACA,QAAM0I,OAAO,GAAG1I,OAAO,CAACf,eAAxB;AACA,QAAMmM,EAAE,GAAG1C,OAAO,KAAK,CAAZ,GAAgB3I,MAAM,CAAC6G,UAAvB,GAAoC7G,MAAM,CAACsL,UAAtD;AAEA1G,EAAAA,YAAY,CAAC,KAAKhB,YAAN,CAAZ;AACA,SAAO,KAAKrD,cAAZ;;AAEA,MAAIP,MAAM,CAACI,UAAX,EAAuB;AACrB,QAAIJ,MAAM,CAACI,UAAP,CAAkB2C,iBAAtB,EAAyC;AACvC,UAAI/C,MAAM,CAACI,UAAP,CAAkB2C,iBAAlB,GAAsC,MAA1C,EAAkD;AAChD,aAAK5B,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,+CAAV,CAAnB;AACA;AACD;;AACD,UAAIV,MAAM,CAACI,UAAP,CAAkB2C,iBAAlB,GAAsC,CAA1C,EAA6C;AAC3C,aAAKxC,cAAL,GAAsB,IAAIzC,cAAJ,CAAmBkC,MAAM,CAACI,UAAP,CAAkB2C,iBAArC,CAAtB;AACD;AACF;;AACD,QAAI/C,MAAM,CAACI,UAAP,CAAkBmL,eAAlB,IAAqCtL,OAAO,CAAClB,SAAjD,EAA4D;AAC1DkB,MAAAA,OAAO,CAAClB,SAAR,GAAoBiB,MAAM,CAACI,UAAP,CAAkBmL,eAAtC;;AACA,WAAKR,kBAAL;AACD;;AACD,QAAI/K,MAAM,CAACI,UAAP,CAAkB4G,iBAAtB,EAAyC;AACvC,UAAI,CAAC/G,OAAO,CAACG,UAAb,EAAyB;AAAEH,QAAAA,OAAO,CAACG,UAAR,GAAqB,EAArB;AAAyB;;AACpDH,MAAAA,OAAO,CAACG,UAAR,CAAmB4G,iBAAnB,GAAuChH,MAAM,CAACI,UAAP,CAAkB4G,iBAAzD;AACD;AACF;;AAED,MAAIqE,EAAE,KAAK,CAAX,EAAc;AACZ,SAAKZ,YAAL,GAAoB,KAApB;;AACA,SAAKe,UAAL,CAAgBxL,MAAhB;AACD,GAHD,MAGO,IAAIqL,EAAE,GAAG,CAAT,EAAY;AACjB,UAAMlJ,GAAG,GAAG,IAAIzB,KAAJ,CAAU,yBAAyBlB,MAAM,CAAC6L,EAAD,CAAzC,CAAZ;AACAlJ,IAAAA,GAAG,CAACgE,IAAJ,GAAWkF,EAAX;AACA,SAAKlK,IAAL,CAAU,OAAV,EAAmBgB,GAAnB;AACD;AACF,CArCD;;AAuCAK,UAAU,CAACyC,SAAX,CAAqBqC,WAArB,GAAmC,UAAUtH,MAAV,EAAkB;AACnD,QAAMC,OAAO,GAAG,KAAKA,OAArB;AACA,QAAM0I,OAAO,GAAG1I,OAAO,CAACf,eAAxB;AACA,QAAMmM,EAAE,GAAG1C,OAAO,KAAK,CAAZ,GAAgB3I,MAAM,CAAC6G,UAAvB,GAAoC7G,MAAM,CAACsL,UAAtD;;AAEA,MAAI3C,OAAO,KAAK,CAAhB,EAAmB;AACjB,UAAMxG,GAAG,GAAG,IAAIzB,KAAJ,CAAU,6EAA6EiI,OAAvF,CAAZ;AACAxG,IAAAA,GAAG,CAACgE,IAAJ,GAAWkF,EAAX;AACA,SAAKlK,IAAL,CAAU,OAAV,EAAmBgB,GAAnB;AACA;AACD;;AAED,QAAMQ,IAAI,GAAG,IAAb;AACA,OAAK8I,UAAL,CAAgBzL,MAAhB,EAAwB,UAAUmC,GAAV,EAAenC,MAAf,EAAuB;AAC7C,QAAImC,GAAJ,EAAS;AACPQ,MAAAA,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmBgB,GAAnB;AACA;AACD;;AAED,QAAIkJ,EAAE,KAAK,EAAX,EAAe;AACb1I,MAAAA,IAAI,CAAC8H,YAAL,GAAoB,KAApB;;AACA9H,MAAAA,IAAI,CAACgC,WAAL,CAAiB3E,MAAjB;AACD,KAHD,MAGO;AACL,YAAMuC,KAAK,GAAG,IAAI7B,KAAJ,CAAU,yBAAyBlB,MAAM,CAAC6L,EAAD,CAAzC,CAAd;AACAlJ,MAAAA,GAAG,CAACgE,IAAJ,GAAWkF,EAAX;AACA1I,MAAAA,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmBoB,KAAnB;AACD;AACF,GAdD;AAeD,CA5BD;AA8BA;AACA;AACA;AACA;AACA;;;AACAC,UAAU,CAACyC,SAAX,CAAqBwG,UAArB,GAAkC,UAAUzL,MAAV,EAAkBtB,QAAlB,EAA4B;AAC5DA,EAAAA,QAAQ;AACT,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA8D,UAAU,CAACyC,SAAX,CAAqBiC,cAArB,GAAsC,UAAUlH,MAAV,EAAkB0F,IAAlB,EAAwB;AAC5DnH,EAAAA,KAAK,CAAC,2BAAD,EAA8ByB,MAA9B,CAAL;AACA0F,EAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,WAAhB,GAA8BA,IAA9B,GAAqCpD,GAA5C;AACA,MAAIhC,KAAK,GAAGN,MAAM,CAACM,KAAP,CAAaV,QAAb,EAAZ;AACA,QAAMqG,OAAO,GAAGjG,MAAM,CAACkI,OAAvB;AACA,QAAML,GAAG,GAAG7H,MAAM,CAAC6H,GAAnB;AACA,QAAMhG,SAAS,GAAG7B,MAAM,CAAC6B,SAAzB;AACA,QAAMc,IAAI,GAAG,IAAb;AACA,QAAM1C,OAAO,GAAG,KAAKA,OAArB;AACA,QAAMyL,gBAAgB,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,CAAzB;;AACA,MAAI,KAAKzL,OAAL,CAAaf,eAAb,KAAiC,CAArC,EAAwC;AACtC,QAAIiB,KAAJ;;AACA,QAAIH,MAAM,CAACI,UAAX,EAAuB;AACrBD,MAAAA,KAAK,GAAGH,MAAM,CAACI,UAAP,CAAkBC,UAA1B;AACD;;AACD,QAAI,OAAOF,KAAP,KAAiB,WAArB,EAAkC;AAChC,UAAIG,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAIL,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,MAA1B,EAAkC;AAChC,gBAAMwL,QAAQ,GAAG,KAAKxH,cAAL,CAAoBnD,eAApB,CAAoCb,KAApC,CAAjB;;AACA,cAAIwL,QAAJ,EAAc;AACZrL,YAAAA,KAAK,GAAGqL,QAAR;AACApN,YAAAA,KAAK,CAAC,sEAAD,EAAyE+B,KAAzE,EAAgFH,KAAhF,CAAL;AACD,WAHD,MAGO;AACL5B,YAAAA,KAAK,CAAC,uDAAD,EAA0D4B,KAA1D,CAAL;AACA,iBAAKgB,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,mCAAV,CAAnB;AACA;AACD;AACF,SAVD,MAUO;AACLnC,UAAAA,KAAK,CAAC,uDAAD,EAA0D4B,KAA1D,CAAL;AACA,eAAKgB,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,sCAAV,CAAnB;AACA;AACD;AACF,OAhBD,MAgBO;AACL,YAAI,KAAKyD,cAAL,CAAoB1D,GAApB,CAAwBH,KAAxB,EAA+BH,KAA/B,CAAJ,EAA2C;AACzC5B,UAAAA,KAAK,CAAC,oDAAD,EAAuD+B,KAAvD,EAA8DH,KAA9D,CAAL;AACD,SAFD,MAEO;AACL5B,UAAAA,KAAK,CAAC,uDAAD,EAA0D4B,KAA1D,CAAL;AACA,eAAKgB,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,sCAAV,CAAnB;AACA;AACD;AACF;AACF;AACF;;AACDnC,EAAAA,KAAK,CAAC,wBAAD,EAA2BsJ,GAA3B,CAAL;;AACA,UAAQA,GAAR;AACE,SAAK,CAAL;AAAQ;AACN5H,QAAAA,OAAO,CAACgD,gBAAR,CAAyB3C,KAAzB,EAAgC2F,OAAhC,EAAyCjG,MAAzC,EAAiD,UAAUuC,KAAV,EAAiB4D,IAAjB,EAAuB;AACtE,cAAI,EAAE5D,KAAK,YAAY7B,KAAnB,CAAJ,EAA+B;AAC7ByF,YAAAA,IAAI,GAAG5D,KAAP;AACAA,YAAAA,KAAK,GAAG,IAAR;AACD;;AACD,cAAIA,KAAJ,EAAW;AAAE,mBAAOI,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmBoB,KAAnB,CAAP;AAAkC;;AAC/C,cAAImJ,gBAAgB,CAACE,OAAjB,CAAyBzF,IAAzB,MAAmC,CAAC,CAAxC,EAA2C;AAAE,mBAAOxD,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,8BAAV,CAAnB,CAAP;AAAsE;;AACnH,cAAIyF,IAAJ,EAAU;AACRxD,YAAAA,IAAI,CAACgC,WAAL,CAAiB;AAAEzE,cAAAA,GAAG,EAAE,QAAP;AAAiB2B,cAAAA,SAAS,EAAEA,SAA5B;AAAuCgF,cAAAA,UAAU,EAAEV;AAAnD,aAAjB,EAA4ET,IAA5E;AACD,WAFD,MAEO;AACL/C,YAAAA,IAAI,CAACS,aAAL,CAAmB3C,GAAnB,CAAuBT,MAAvB,EAA+B,YAAY;AACzC2C,cAAAA,IAAI,CAACgC,WAAL,CAAiB;AAAEzE,gBAAAA,GAAG,EAAE,QAAP;AAAiB2B,gBAAAA,SAAS,EAAEA;AAA5B,eAAjB,EAA0D6D,IAA1D;AACD,aAFD;AAGD;AACF,SAdD;AAeA;AACD;;AACD,SAAK,CAAL;AAAQ;AACN;AACAzF,QAAAA,OAAO,CAACgD,gBAAR,CAAyB3C,KAAzB,EAAgC2F,OAAhC,EAAyCjG,MAAzC,EAAiD,UAAUuC,KAAV,EAAiB4D,IAAjB,EAAuB;AACtE,cAAI,EAAE5D,KAAK,YAAY7B,KAAnB,CAAJ,EAA+B;AAC7ByF,YAAAA,IAAI,GAAG5D,KAAP;AACAA,YAAAA,KAAK,GAAG,IAAR;AACD;;AACD,cAAIA,KAAJ,EAAW;AAAE,mBAAOI,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmBoB,KAAnB,CAAP;AAAkC;;AAC/C,cAAImJ,gBAAgB,CAACE,OAAjB,CAAyBzF,IAAzB,MAAmC,CAAC,CAAxC,EAA2C;AAAE,mBAAOxD,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,8BAAV,CAAnB,CAAP;AAAsE;;AACnH,cAAI,CAACyF,IAAL,EAAW;AAAExD,YAAAA,IAAI,CAACxB,IAAL,CAAU,SAAV,EAAqBb,KAArB,EAA4B2F,OAA5B,EAAqCjG,MAArC;AAA8C;;AAC3D2C,UAAAA,IAAI,CAACkJ,aAAL,CAAmB7L,MAAnB,EAA2B,UAAUmC,GAAV,EAAe;AACxC,gBAAIA,GAAJ,EAAS;AACP,qBAAOuD,IAAI,IAAIA,IAAI,CAACvD,GAAD,CAAnB;AACD;;AACDQ,YAAAA,IAAI,CAACgC,WAAL,CAAiB;AAAEzE,cAAAA,GAAG,EAAE,QAAP;AAAiB2B,cAAAA,SAAS,EAAEA,SAA5B;AAAuCgF,cAAAA,UAAU,EAAEV;AAAnD,aAAjB,EAA4ET,IAA5E;AACD,WALD;AAMD,SAdD;AAeA;AACD;;AACD,SAAK,CAAL;AACE;AACA,WAAKvE,IAAL,CAAU,SAAV,EAAqBb,KAArB,EAA4B2F,OAA5B,EAAqCjG,MAArC;AACA,WAAK6L,aAAL,CAAmB7L,MAAnB,EAA2B0F,IAA3B;AACA;;AACF;AACE;AACAnH,MAAAA,KAAK,CAAC,6CAAD,CAAL,CAFF,CAGE;;AACA;AA/CJ;AAiDD,CA7FD;AA+FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAiE,UAAU,CAACyC,SAAX,CAAqB4G,aAArB,GAAqC,UAAU7L,MAAV,EAAkBtB,QAAlB,EAA4B;AAC/DA,EAAAA,QAAQ;AACT,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEA8D,UAAU,CAACyC,SAAX,CAAqBkC,UAArB,GAAkC,UAAUnH,MAAV,EAAkB;AAClD;AACA,QAAM6B,SAAS,GAAG7B,MAAM,CAAC6B,SAAzB;AACA,QAAMiK,IAAI,GAAG9L,MAAM,CAACE,GAApB;AACA,MAAI6L,QAAQ,GAAG,IAAf;AACA,QAAM7K,EAAE,GAAG,KAAK+C,QAAL,CAAcpC,SAAd,IAA2B,KAAKoC,QAAL,CAAcpC,SAAd,EAAyBX,EAApD,GAAyD,IAApE;AACA,QAAMyB,IAAI,GAAG,IAAb;AACA,MAAIR,GAAJ;;AAEA,MAAI,CAACjB,EAAL,EAAS;AACP3C,IAAAA,KAAK,CAAC,sDAAD,CAAL,CADO,CAEP;;AACA;AACD,GAbiD,CAelD;;;AACAA,EAAAA,KAAK,CAAC,2BAAD,EAA8BuN,IAA9B,CAAL;;AACA,UAAQA,IAAR;AACE,SAAK,SAAL,CADF,CAEI;;AACF,SAAK,QAAL;AAAe;AACb,cAAME,QAAQ,GAAGhM,MAAM,CAAC6G,UAAxB,CADa,CAEb;;AACA,YAAImF,QAAQ,IAAIA,QAAQ,GAAG,CAAvB,IAA4BA,QAAQ,KAAK,EAA7C,EAAiD;AAC/C7J,UAAAA,GAAG,GAAG,IAAIzB,KAAJ,CAAU,oBAAoBlB,MAAM,CAACwM,QAAD,CAApC,CAAN;AACA7J,UAAAA,GAAG,CAACgE,IAAJ,GAAW6F,QAAX;AACA9K,UAAAA,EAAE,CAACiB,GAAD,EAAMnC,MAAN,CAAF;AACD;;AACD,eAAO,KAAKiE,QAAL,CAAcpC,SAAd,CAAP;AACA,aAAKO,aAAL,CAAmBiI,GAAnB,CAAuBrK,MAAvB,EAA+BkB,EAA/B;AACA,aAAKiC,iBAAL,CAAuB8I,UAAvB,CAAkCpK,SAAlC;;AACA,aAAKqK,2BAAL;;AACA;AACD;;AACD,SAAK,QAAL;AAAe;AACbH,QAAAA,QAAQ,GAAG;AACT7L,UAAAA,GAAG,EAAE,QADI;AAET2H,UAAAA,GAAG,EAAE,CAFI;AAGThG,UAAAA,SAAS,EAAEA;AAHF,SAAX;AAKA,cAAMsK,QAAQ,GAAGnM,MAAM,CAAC6G,UAAxB;;AAEA,YAAIsF,QAAQ,IAAIA,QAAQ,GAAG,CAAvB,IAA4BA,QAAQ,KAAK,EAA7C,EAAiD;AAC/ChK,UAAAA,GAAG,GAAG,IAAIzB,KAAJ,CAAU,oBAAoBlB,MAAM,CAAC2M,QAAD,CAApC,CAAN;AACAhK,UAAAA,GAAG,CAACgE,IAAJ,GAAWgG,QAAX;AACAjL,UAAAA,EAAE,CAACiB,GAAD,EAAMnC,MAAN,CAAF;AACD,SAJD,MAIO;AACL,eAAK2E,WAAL,CAAiBoH,QAAjB;AACD;;AACD;AACD;;AACD,SAAK,QAAL;AAAe;AACb,eAAO,KAAK9H,QAAL,CAAcpC,SAAd,CAAP;AACA,aAAKsB,iBAAL,CAAuB8I,UAAvB,CAAkCpK,SAAlC;;AACA,aAAK,IAAIuK,QAAQ,GAAG,CAApB,EAAuBA,QAAQ,GAAGpM,MAAM,CAACwJ,OAAP,CAAehJ,MAAjD,EAAyD4L,QAAQ,EAAjE,EAAqE;AACnE,cAAI,CAACpM,MAAM,CAACwJ,OAAP,CAAe4C,QAAf,IAA2B,IAA5B,MAAsC,CAA1C,EAA6C;AAC3C;AACA,kBAAM9C,MAAM,GAAG,KAAK9F,gBAAL,CAAsB3B,SAAtB,CAAf;;AACA,gBAAIyH,MAAJ,EAAY;AACVA,cAAAA,MAAM,CAAC1H,OAAP,CAAe,UAAUtB,KAAV,EAAiB;AAC9B,uBAAOqC,IAAI,CAACY,kBAAL,CAAwBjD,KAAxB,CAAP;AACD,eAFD;AAGD;AACF;AACF;;AACD,aAAK4L,2BAAL;;AACAhL,QAAAA,EAAE,CAAC,IAAD,EAAOlB,MAAP,CAAF;AACA;AACD;;AACD,SAAK,UAAL;AAAiB;AACf,eAAO,KAAKiE,QAAL,CAAcpC,SAAd,CAAP;AACA,aAAKsB,iBAAL,CAAuB8I,UAAvB,CAAkCpK,SAAlC;;AACA,aAAKqK,2BAAL;;AACAhL,QAAAA,EAAE,CAAC,IAAD,CAAF;AACA;AACD;;AACD;AACEyB,MAAAA,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmB,IAAIT,KAAJ,CAAU,0BAAV,CAAnB;AA5DJ;;AA+DA,MAAI,KAAKiD,aAAL,IACAjC,MAAM,CAACC,IAAP,CAAY,KAAKsC,QAAjB,EAA2BzD,MAA3B,KAAsC,CAD1C,EAC6C;AAC3C,SAAKW,IAAL,CAAU,eAAV;AACD;AACF,CApFD;AAsFA;AACA;AACA;AACA;AACA;AACA;;;AACAqB,UAAU,CAACyC,SAAX,CAAqBmC,aAArB,GAAqC,UAAUpH,MAAV,EAAkBtB,QAAlB,EAA4B;AAC/DH,EAAAA,KAAK,CAAC,wBAAD,CAAL;AACAG,EAAAA,QAAQ,GAAG,OAAOA,QAAP,KAAoB,WAApB,GAAkCA,QAAlC,GAA6C4D,GAAxD;AACA,QAAMT,SAAS,GAAG7B,MAAM,CAAC6B,SAAzB;AACA,QAAMc,IAAI,GAAG,IAAb;AAEA,QAAM0J,IAAI,GAAG;AAAEnM,IAAAA,GAAG,EAAE,SAAP;AAAkB2B,IAAAA,SAAS,EAAEA;AAA7B,GAAb;AAEAc,EAAAA,IAAI,CAACS,aAAL,CAAmBkJ,GAAnB,CAAuBtM,MAAvB,EAA+B,UAAUmC,GAAV,EAAeoK,GAAf,EAAoB;AACjD,QAAI,CAACpK,GAAL,EAAU;AACRQ,MAAAA,IAAI,CAACxB,IAAL,CAAU,SAAV,EAAqBoL,GAAG,CAACjM,KAAzB,EAAgCiM,GAAG,CAACrE,OAApC,EAA6CqE,GAA7C;AACA5J,MAAAA,IAAI,CAACkJ,aAAL,CAAmBU,GAAnB,EAAwB,UAAUpK,GAAV,EAAe;AACrC,YAAIA,GAAJ,EAAS;AACP,iBAAOzD,QAAQ,CAACyD,GAAD,CAAf;AACD;;AACDQ,QAAAA,IAAI,CAACS,aAAL,CAAmBiH,GAAnB,CAAuBkC,GAAvB,EAA4BjK,GAA5B;;AACAK,QAAAA,IAAI,CAACgC,WAAL,CAAiB0H,IAAjB,EAAuB3N,QAAvB;AACD,OAND;AAOD,KATD,MASO;AACLiE,MAAAA,IAAI,CAACgC,WAAL,CAAiB0H,IAAjB,EAAuB3N,QAAvB;AACD;AACF,GAbD;AAcD,CAtBD;AAwBA;AACA;AACA;AACA;AACA;AACA;;;AACA8D,UAAU,CAACyC,SAAX,CAAqBuC,iBAArB,GAAyC,UAAUxH,MAAV,EAAkB;AACzD,OAAKmB,IAAL,CAAU,YAAV,EAAwBnB,MAAxB;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAwC,UAAU,CAACyC,SAAX,CAAqBgD,OAArB,GAA+B,YAAY;AACzC,SAAO,KAAK9E,iBAAL,CAAuBqJ,QAAvB,EAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAhK,UAAU,CAACyC,SAAX,CAAqBwH,gBAArB,GAAwC,YAAY;AAClD,SAAO,KAAKtJ,iBAAL,CAAuBuJ,gBAAvB,EAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACAlK,UAAU,CAACyC,SAAX,CAAqBT,YAArB,GAAoC,YAAY;AAC9CjG,EAAAA,KAAK,CAAC,cAAD,CAAL;;AACA,QAAMoO,sBAAsB,GAAGjL,MAAM,CAACC,IAAP,CAAY,KAAK4B,kBAAjB,CAA/B;;AACA,MAAI,CAAC,KAAKW,gBAAN,KACC,KAAKjE,OAAL,CAAaZ,KAAb,IAAuB,KAAKY,OAAL,CAAaf,eAAb,KAAiC,CAAjC,IAAsC,CAAC,KAAK0N,aAAL,CAAmBC,cADlF,KAEAF,sBAAsB,CAACnM,MAAvB,GAAgC,CAFpC,EAEuC;AACrC,QAAI,KAAKP,OAAL,CAAaX,WAAjB,EAA8B;AAC5B,UAAI,KAAKW,OAAL,CAAaf,eAAb,KAAiC,CAArC,EAAwC;AACtCX,QAAAA,KAAK,CAAC,iCAAD,CAAL;;AACA,aAAK,IAAIuO,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGH,sBAAsB,CAACnM,MAArD,EAA6DsM,MAAM,EAAnE,EAAuE;AACrE,gBAAMC,gBAAgB,GAAG,EAAzB;AACAA,UAAAA,gBAAgB,CAACJ,sBAAsB,CAACG,MAAD,CAAvB,CAAhB,GAAmD,KAAKvJ,kBAAL,CAAwBoJ,sBAAsB,CAACG,MAAD,CAA9C,CAAnD;AACAC,UAAAA,gBAAgB,CAACzN,WAAjB,GAA+B,IAA/B;AACA,eAAK8I,SAAL,CAAe2E,gBAAf,EAAiC;AAAE3M,YAAAA,UAAU,EAAE2M,gBAAgB,CAACJ,sBAAsB,CAACG,MAAD,CAAvB,CAAhB,CAAiD1M;AAA/D,WAAjC;AACD;AACF,OARD,MAQO;AACL,aAAKmD,kBAAL,CAAwBjE,WAAxB,GAAsC,IAAtC;AACA,aAAK8I,SAAL,CAAe,KAAK7E,kBAApB;AACD;AACF,KAbD,MAaO;AACL,WAAKA,kBAAL,GAA0B,EAA1B;AACD;AACF;;AAED,OAAKW,gBAAL,GAAwB,KAAxB;AACD,CAzBD;AA2BA;AACA;AACA;AACA;AACA;;;AACA1B,UAAU,CAACyC,SAAX,CAAqBuG,UAArB,GAAkC,UAAUxL,MAAV,EAAkB;AAClD,MAAI,KAAK8J,YAAT,EAAuB;AACrB,SAAK3I,IAAL,CAAU,SAAV,EAAqBnB,MAArB;AACA;AACD;;AAED,QAAM2C,IAAI,GAAG,IAAb;AAEA,OAAKiK,aAAL,GAAqB5M,MAArB;AACA,OAAKmD,iBAAL,CAAuB0B,KAAvB;;AACA,OAAKoG,eAAL;;AAEA,OAAKvH,SAAL,GAAiB,IAAjB;;AAEA,WAASsJ,kBAAT,GAA+B;AAC7B,QAAIC,QAAQ,GAAGtK,IAAI,CAACP,aAAL,CAAmB8K,YAAnB,EAAf;;AAEA,aAASC,oBAAT,GAAiC;AAC/BxK,MAAAA,IAAI,CAACmB,gBAAL,GAAwB,KAAxB;AACAnB,MAAAA,IAAI,CAACoB,+BAAL,GAAuC,EAAvC;AACD;;AAEDpB,IAAAA,IAAI,CAACpB,IAAL,CAAU,OAAV,EAAmB6L,MAAnB;AACAH,IAAAA,QAAQ,CAAC7I,EAAT,CAAY,OAAZ,EAAqB,UAAUjC,GAAV,EAAe;AAClCgL,MAAAA,oBAAoB;;AACpBxK,MAAAA,IAAI,CAAC0K,0BAAL;;AACA1K,MAAAA,IAAI,CAACmI,cAAL,CAAoB,OAApB,EAA6BsC,MAA7B;AACAzK,MAAAA,IAAI,CAACxB,IAAL,CAAU,OAAV,EAAmBgB,GAAnB;AACD,KALD;;AAOA,aAASiL,MAAT,GAAmB;AACjBH,MAAAA,QAAQ,CAACpC,OAAT;AACAoC,MAAAA,QAAQ,GAAG,IAAX;;AACAtK,MAAAA,IAAI,CAAC0K,0BAAL;;AACAF,MAAAA,oBAAoB;AACrB;;AAED,aAASG,YAAT,GAAyB;AACvB;AACA,UAAI,CAACL,QAAL,EAAe;AACb;AACD;;AACDtK,MAAAA,IAAI,CAACmB,gBAAL,GAAwB,IAAxB;AAEA,YAAM9D,MAAM,GAAGiN,QAAQ,CAACM,IAAT,CAAc,CAAd,CAAf;AAEA,UAAIrM,EAAJ;;AAEA,UAAI,CAAClB,MAAL,EAAa;AACX;AACAiN,QAAAA,QAAQ,CAAC1L,IAAT,CAAc,UAAd,EAA0B+L,YAA1B;AACA;AACD,OAfsB,CAiBvB;;;AACA,UAAI3K,IAAI,CAACoB,+BAAL,CAAqC/D,MAAM,CAAC6B,SAA5C,CAAJ,EAA4D;AAC1DyL,QAAAA,YAAY;AACZ;AACD,OArBsB,CAuBvB;;;AACA,UAAI,CAAC3K,IAAI,CAACgB,aAAN,IAAuB,CAAChB,IAAI,CAACkB,cAAjC,EAAiD;AAC/C3C,QAAAA,EAAE,GAAGyB,IAAI,CAACsB,QAAL,CAAcjE,MAAM,CAAC6B,SAArB,IAAkCc,IAAI,CAACsB,QAAL,CAAcjE,MAAM,CAAC6B,SAArB,EAAgCX,EAAlE,GAAuE,IAA5E;AACAyB,QAAAA,IAAI,CAACsB,QAAL,CAAcjE,MAAM,CAAC6B,SAArB,IAAkC;AAChCE,UAAAA,QAAQ,EAAE,KADsB;AAEhCb,UAAAA,EAAE,EAAE,UAAUiB,GAAV,EAAeqL,MAAf,EAAuB;AACzB;AACA,gBAAItM,EAAJ,EAAQ;AACNA,cAAAA,EAAE,CAACiB,GAAD,EAAMqL,MAAN,CAAF;AACD;;AAEDF,YAAAA,YAAY;AACb;AAT+B,SAAlC;AAWA3K,QAAAA,IAAI,CAACoB,+BAAL,CAAqC/D,MAAM,CAAC6B,SAA5C,IAAyD,IAAzD;;AACA,YAAIc,IAAI,CAACQ,iBAAL,CAAuBuB,QAAvB,CAAgC1E,MAAM,CAAC6B,SAAvC,CAAJ,EAAuD;AACrDc,UAAAA,IAAI,CAACgC,WAAL,CAAiB3E,MAAjB;AACD,SAFD,MAEO;AACLzB,UAAAA,KAAK,CAAC,iCAAD,EAAoCyB,MAAM,CAAC6B,SAA3C,CAAL;AACD;AACF,OAnBD,MAmBO,IAAIoL,QAAQ,CAACpC,OAAb,EAAsB;AAC3BoC,QAAAA,QAAQ,CAACpC,OAAT;AACD;AACF;;AAEDoC,IAAAA,QAAQ,CAAC7I,EAAT,CAAY,KAAZ,EAAmB,YAAY;AAC7B,UAAIqJ,YAAY,GAAG,IAAnB;;AACA,WAAK,MAAMC,EAAX,IAAiB/K,IAAI,CAACoB,+BAAtB,EAAuD;AACrD,YAAI,CAACpB,IAAI,CAACoB,+BAAL,CAAqC2J,EAArC,CAAL,EAA+C;AAC7CD,UAAAA,YAAY,GAAG,KAAf;AACA;AACD;AACF;;AACD,UAAIA,YAAJ,EAAkB;AAChBN,QAAAA,oBAAoB;AACpBxK,QAAAA,IAAI,CAACmI,cAAL,CAAoB,OAApB,EAA6BsC,MAA7B;;AACAzK,QAAAA,IAAI,CAACgL,8BAAL;;AACAhL,QAAAA,IAAI,CAACxB,IAAL,CAAU,SAAV,EAAqBnB,MAArB;AACD,OALD,MAKO;AACLgN,QAAAA,kBAAkB;AACnB;AACF,KAhBD;AAiBAM,IAAAA,YAAY;AACb,GAvGiD,CAwGlD;;;AACAN,EAAAA,kBAAkB;AACnB,CA1GD;;AA4GAxK,UAAU,CAACyC,SAAX,CAAqBiH,2BAArB,GAAmD,YAAY;AAC7D,MAAI,KAAKlI,qBAAL,CAA2BxD,MAA3B,GAAoC,CAAxC,EAA2C;AACzC,UAAM+J,CAAC,GAAG,KAAKvG,qBAAL,CAA2B,CAA3B,CAAV;;AACA,QAAIuG,CAAC,IAAIA,CAAC,CAACpC,MAAF,EAAT,EAAqB;AACnB,WAAKnE,qBAAL,CAA2BO,KAA3B;;AACA,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CATD;;AAWA/B,UAAU,CAACyC,SAAX,CAAqB0I,8BAArB,GAAsD,YAAY;AAChE,SAAO,KAAKzB,2BAAL,EAAP,EAA2C;AAAE;AAAa;AAC3D,CAFD;;AAIA1J,UAAU,CAACyC,SAAX,CAAqBoI,0BAArB,GAAkD,YAAY;AAC5D,OAAK,MAAM9C,CAAX,IAAgB,KAAKvG,qBAArB,EAA4C;AAC1C,QAAIuG,CAAC,CAACtI,UAAN,EAAkBsI,CAAC,CAACtI,UAAF,CAAa,IAAIvB,KAAJ,CAAU,mBAAV,CAAb;AAClB,QAAI6J,CAAC,CAAC7L,QAAN,EAAgB6L,CAAC,CAAC7L,QAAF,CAAW,IAAIgC,KAAJ,CAAU,mBAAV,CAAX;AACjB;;AACD,OAAKsD,qBAAL,CAA2B4J,MAA3B,CAAkC,CAAlC;AACD,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiBtL,UAAjB","sourcesContent":["'use strict'\r\n\r\n/**\r\n * Module dependencies\r\n */\r\nconst EventEmitter = require('events').EventEmitter\r\nconst Store = require('./store')\r\nconst TopicAliasRecv = require('./topic-alias-recv')\r\nconst TopicAliasSend = require('./topic-alias-send')\r\nconst mqttPacket = require('mqtt-packet')\r\nconst DefaultMessageIdProvider = require('./default-message-id-provider')\r\nconst Writable = require('readable-stream').Writable\r\nconst inherits = require('inherits')\r\nconst reInterval = require('reinterval')\r\nconst clone = require('rfdc/default')\r\nconst validations = require('./validations')\r\nconst xtend = require('xtend')\r\nconst debug = require('debug')('mqttjs:client')\r\nconst nextTick = process ? process.nextTick : function (callback) { setTimeout(callback, 0) }\r\nconst setImmediate = global.setImmediate || function (callback) {\r\n  // works in node v0.8\r\n  nextTick(callback)\r\n}\r\nconst defaultConnectOptions = {\r\n  keepalive: 60,\r\n  reschedulePings: true,\r\n  protocolId: 'MQTT',\r\n  protocolVersion: 4,\r\n  reconnectPeriod: 1000,\r\n  connectTimeout: 30 * 1000,\r\n  clean: true,\r\n  resubscribe: true\r\n}\r\n\r\nconst socketErrors = [\r\n  'ECONNREFUSED',\r\n  'EADDRINUSE',\r\n  'ECONNRESET',\r\n  'ENOTFOUND'\r\n]\r\n\r\n// Other Socket Errors: EADDRINUSE, ECONNRESET, ENOTFOUND.\r\n\r\nconst errors = {\r\n  0: '',\r\n  1: 'Unacceptable protocol version',\r\n  2: 'Identifier rejected',\r\n  3: 'Server unavailable',\r\n  4: 'Bad username or password',\r\n  5: 'Not authorized',\r\n  16: 'No matching subscribers',\r\n  17: 'No subscription existed',\r\n  128: 'Unspecified error',\r\n  129: 'Malformed Packet',\r\n  130: 'Protocol Error',\r\n  131: 'Implementation specific error',\r\n  132: 'Unsupported Protocol Version',\r\n  133: 'Client Identifier not valid',\r\n  134: 'Bad User Name or Password',\r\n  135: 'Not authorized',\r\n  136: 'Server unavailable',\r\n  137: 'Server busy',\r\n  138: 'Banned',\r\n  139: 'Server shutting down',\r\n  140: 'Bad authentication method',\r\n  141: 'Keep Alive timeout',\r\n  142: 'Session taken over',\r\n  143: 'Topic Filter invalid',\r\n  144: 'Topic Name invalid',\r\n  145: 'Packet identifier in use',\r\n  146: 'Packet Identifier not found',\r\n  147: 'Receive Maximum exceeded',\r\n  148: 'Topic Alias invalid',\r\n  149: 'Packet too large',\r\n  150: 'Message rate too high',\r\n  151: 'Quota exceeded',\r\n  152: 'Administrative action',\r\n  153: 'Payload format invalid',\r\n  154: 'Retain not supported',\r\n  155: 'QoS not supported',\r\n  156: 'Use another server',\r\n  157: 'Server moved',\r\n  158: 'Shared Subscriptions not supported',\r\n  159: 'Connection rate exceeded',\r\n  160: 'Maximum connect time',\r\n  161: 'Subscription Identifiers not supported',\r\n  162: 'Wildcard Subscriptions not supported'\r\n}\r\n\r\nfunction defaultId () {\r\n  return 'mqttjs_' + Math.random().toString(16).substr(2, 8)\r\n}\r\n\r\nfunction applyTopicAlias (client, packet) {\r\n  if (client.options.protocolVersion === 5) {\r\n    if (packet.cmd === 'publish') {\r\n      let alias\r\n      if (packet.properties) {\r\n        alias = packet.properties.topicAlias\r\n      }\r\n      const topic = packet.topic.toString()\r\n      if (client.topicAliasSend) {\r\n        if (alias) {\r\n          if (topic.length !== 0) {\r\n            // register topic alias\r\n            debug('applyTopicAlias :: register topic: %s - alias: %d', topic, alias)\r\n            if (!client.topicAliasSend.put(topic, alias)) {\r\n              debug('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias)\r\n              return new Error('Sending Topic Alias out of range')\r\n            }\r\n          }\r\n        } else {\r\n          if (topic.length !== 0) {\r\n            if (client.options.autoAssignTopicAlias) {\r\n              alias = client.topicAliasSend.getAliasByTopic(topic)\r\n              if (alias) {\r\n                packet.topic = ''\r\n                packet.properties = { ...(packet.properties), topicAlias: alias }\r\n                debug('applyTopicAlias :: auto assign(use) topic: %s - alias: %d', topic, alias)\r\n              } else {\r\n                alias = client.topicAliasSend.getLruAlias()\r\n                client.topicAliasSend.put(topic, alias)\r\n                packet.properties = { ...(packet.properties), topicAlias: alias }\r\n                debug('applyTopicAlias :: auto assign topic: %s - alias: %d', topic, alias)\r\n              }\r\n            } else if (client.options.autoUseTopicAlias) {\r\n              alias = client.topicAliasSend.getAliasByTopic(topic)\r\n              if (alias) {\r\n                packet.topic = ''\r\n                packet.properties = { ...(packet.properties), topicAlias: alias }\r\n                debug('applyTopicAlias :: auto use topic: %s - alias: %d', topic, alias)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else if (alias) {\r\n        debug('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias)\r\n        return new Error('Sending Topic Alias out of range')\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction removeTopicAliasAndRecoverTopicName (client, packet) {\r\n  let alias\r\n  if (packet.properties) {\r\n    alias = packet.properties.topicAlias\r\n  }\r\n\r\n  let topic = packet.topic.toString()\r\n  if (topic.length === 0) {\r\n    // restore topic from alias\r\n    if (typeof alias === 'undefined') {\r\n      return new Error('Unregistered Topic Alias')\r\n    } else {\r\n      topic = client.topicAliasSend.getTopicByAlias(alias)\r\n      if (typeof topic === 'undefined') {\r\n        return new Error('Unregistered Topic Alias')\r\n      } else {\r\n        packet.topic = topic\r\n      }\r\n    }\r\n  }\r\n  if (alias) {\r\n    delete packet.properties.topicAlias\r\n  }\r\n}\r\n\r\nfunction sendPacket (client, packet, cb) {\r\n  debug('sendPacket :: packet: %O', packet)\r\n  debug('sendPacket :: emitting `packetsend`')\r\n\r\n  client.emit('packetsend', packet)\r\n\r\n  debug('sendPacket :: writing to stream')\r\n  const result = mqttPacket.writeToStream(packet, client.stream, client.options)\r\n  debug('sendPacket :: writeToStream result %s', result)\r\n  if (!result && cb) {\r\n    debug('sendPacket :: handle events on `drain` once through callback.')\r\n    client.stream.once('drain', cb)\r\n  } else if (cb) {\r\n    debug('sendPacket :: invoking cb')\r\n    cb()\r\n  }\r\n}\r\n\r\nfunction flush (queue) {\r\n  if (queue) {\r\n    debug('flush: queue exists? %b', !!(queue))\r\n    Object.keys(queue).forEach(function (messageId) {\r\n      if (typeof queue[messageId].cb === 'function') {\r\n        queue[messageId].cb(new Error('Connection closed'))\r\n        delete queue[messageId]\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction flushVolatile (queue) {\r\n  if (queue) {\r\n    debug('flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function')\r\n    Object.keys(queue).forEach(function (messageId) {\r\n      if (queue[messageId].volatile && typeof queue[messageId].cb === 'function') {\r\n        queue[messageId].cb(new Error('Connection closed'))\r\n        delete queue[messageId]\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction storeAndSend (client, packet, cb, cbStorePut) {\r\n  debug('storeAndSend :: store packet with cmd %s to outgoingStore', packet.cmd)\r\n  let storePacket = packet\r\n  let err\r\n  if (storePacket.cmd === 'publish') {\r\n    // The original packet is for sending.\r\n    // The cloned storePacket is for storing to resend on reconnect.\r\n    // Topic Alias must not be used after disconnected.\r\n    storePacket = clone(packet)\r\n    err = removeTopicAliasAndRecoverTopicName(client, storePacket)\r\n    if (err) {\r\n      return cb && cb(err)\r\n    }\r\n  }\r\n  client.outgoingStore.put(storePacket, function storedPacket (err) {\r\n    if (err) {\r\n      return cb && cb(err)\r\n    }\r\n    cbStorePut()\r\n    sendPacket(client, packet, cb)\r\n  })\r\n}\r\n\r\nfunction nop (error) {\r\n  debug('nop ::', error)\r\n}\r\n\r\n/**\r\n * MqttClient constructor\r\n *\r\n * @param {Stream} stream - stream\r\n * @param {Object} [options] - connection options\r\n * (see Connection#connect)\r\n */\r\nfunction MqttClient (streamBuilder, options) {\r\n  let k\r\n  const that = this\r\n\r\n  if (!(this instanceof MqttClient)) {\r\n    return new MqttClient(streamBuilder, options)\r\n  }\r\n\r\n  this.options = options || {}\r\n\r\n  // Defaults\r\n  for (k in defaultConnectOptions) {\r\n    if (typeof this.options[k] === 'undefined') {\r\n      this.options[k] = defaultConnectOptions[k]\r\n    } else {\r\n      this.options[k] = options[k]\r\n    }\r\n  }\r\n\r\n  debug('MqttClient :: options.protocol', options.protocol)\r\n  debug('MqttClient :: options.protocolVersion', options.protocolVersion)\r\n  debug('MqttClient :: options.username', options.username)\r\n  debug('MqttClient :: options.keepalive', options.keepalive)\r\n  debug('MqttClient :: options.reconnectPeriod', options.reconnectPeriod)\r\n  debug('MqttClient :: options.rejectUnauthorized', options.rejectUnauthorized)\r\n  debug('MqttClient :: options.topicAliasMaximum', options.topicAliasMaximum)\r\n\r\n  this.options.clientId = (typeof options.clientId === 'string') ? options.clientId : defaultId()\r\n\r\n  debug('MqttClient :: clientId', this.options.clientId)\r\n\r\n  this.options.customHandleAcks = (options.protocolVersion === 5 && options.customHandleAcks) ? options.customHandleAcks : function () { arguments[3](0) }\r\n\r\n  this.streamBuilder = streamBuilder\r\n\r\n  this.messageIdProvider = (typeof this.options.messageIdProvider === 'undefined') ? new DefaultMessageIdProvider() : this.options.messageIdProvider\r\n\r\n  // Inflight message storages\r\n  this.outgoingStore = options.outgoingStore || new Store()\r\n  this.incomingStore = options.incomingStore || new Store()\r\n\r\n  // Should QoS zero messages be queued when the connection is broken?\r\n  this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero\r\n\r\n  // map of subscribed topics to support reconnection\r\n  this._resubscribeTopics = {}\r\n\r\n  // map of a subscribe messageId and a topic\r\n  this.messageIdToTopic = {}\r\n\r\n  // Ping timer, setup in _setupPingTimer\r\n  this.pingTimer = null\r\n  // Is the client connected?\r\n  this.connected = false\r\n  // Are we disconnecting?\r\n  this.disconnecting = false\r\n  // Packet queue\r\n  this.queue = []\r\n  // connack timer\r\n  this.connackTimer = null\r\n  // Reconnect timer\r\n  this.reconnectTimer = null\r\n  // Is processing store?\r\n  this._storeProcessing = false\r\n  // Packet Ids are put into the store during store processing\r\n  this._packetIdsDuringStoreProcessing = {}\r\n  // Store processing queue\r\n  this._storeProcessingQueue = []\r\n\r\n  // Inflight callbacks\r\n  this.outgoing = {}\r\n\r\n  // True if connection is first time.\r\n  this._firstConnection = true\r\n\r\n  if (options.topicAliasMaximum > 0) {\r\n    if (options.topicAliasMaximum > 0xffff) {\r\n      debug('MqttClient :: options.topicAliasMaximum is out of range')\r\n    } else {\r\n      this.topicAliasRecv = new TopicAliasRecv(options.topicAliasMaximum)\r\n    }\r\n  }\r\n\r\n  // Send queued packets\r\n  this.on('connect', function () {\r\n    const queue = this.queue\r\n\r\n    function deliver () {\r\n      const entry = queue.shift()\r\n      debug('deliver :: entry %o', entry)\r\n      let packet = null\r\n\r\n      if (!entry) {\r\n        that._resubscribe()\r\n        return\r\n      }\r\n\r\n      packet = entry.packet\r\n      debug('deliver :: call _sendPacket for %o', packet)\r\n      let send = true\r\n      if (packet.messageId && packet.messageId !== 0) {\r\n        if (!that.messageIdProvider.register(packet.messageId)) {\r\n          send = false\r\n        }\r\n      }\r\n      if (send) {\r\n        that._sendPacket(\r\n          packet,\r\n          function (err) {\r\n            if (entry.cb) {\r\n              entry.cb(err)\r\n            }\r\n            deliver()\r\n          }\r\n        )\r\n      } else {\r\n        debug('messageId: %d has already used. The message is skipped and removed.', packet.messageId)\r\n        deliver()\r\n      }\r\n    }\r\n\r\n    debug('connect :: sending queued packets')\r\n    deliver()\r\n  })\r\n\r\n  this.on('close', function () {\r\n    debug('close :: connected set to `false`')\r\n    this.connected = false\r\n\r\n    debug('close :: clearing connackTimer')\r\n    clearTimeout(this.connackTimer)\r\n\r\n    debug('close :: clearing ping timer')\r\n    if (that.pingTimer !== null) {\r\n      that.pingTimer.clear()\r\n      that.pingTimer = null\r\n    }\r\n\r\n    if (this.topicAliasRecv) {\r\n      this.topicAliasRecv.clear()\r\n    }\r\n\r\n    debug('close :: calling _setupReconnect')\r\n    this._setupReconnect()\r\n  })\r\n  EventEmitter.call(this)\r\n\r\n  debug('MqttClient :: setting up stream')\r\n  this._setupStream()\r\n}\r\ninherits(MqttClient, EventEmitter)\r\n\r\n/**\r\n * setup the event handlers in the inner stream.\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._setupStream = function () {\r\n  const that = this\r\n  const writable = new Writable()\r\n  const parser = mqttPacket.parser(this.options)\r\n  let completeParse = null\r\n  const packets = []\r\n\r\n  debug('_setupStream :: calling method to clear reconnect')\r\n  this._clearReconnect()\r\n\r\n  debug('_setupStream :: using streamBuilder provided to client to create stream')\r\n  this.stream = this.streamBuilder(this)\r\n\r\n  parser.on('packet', function (packet) {\r\n    debug('parser :: on packet push to packets array.')\r\n    packets.push(packet)\r\n  })\r\n\r\n  function nextTickWork () {\r\n    if (packets.length) {\r\n      nextTick(work)\r\n    } else {\r\n      const done = completeParse\r\n      completeParse = null\r\n      done()\r\n    }\r\n  }\r\n\r\n  function work () {\r\n    debug('work :: getting next packet in queue')\r\n    const packet = packets.shift()\r\n\r\n    if (packet) {\r\n      debug('work :: packet pulled from queue')\r\n      that._handlePacket(packet, nextTickWork)\r\n    } else {\r\n      debug('work :: no packets in queue')\r\n      const done = completeParse\r\n      completeParse = null\r\n      debug('work :: done flag is %s', !!(done))\r\n      if (done) done()\r\n    }\r\n  }\r\n\r\n  writable._write = function (buf, enc, done) {\r\n    completeParse = done\r\n    debug('writable stream :: parsing buffer')\r\n    parser.parse(buf)\r\n    work()\r\n  }\r\n\r\n  function streamErrorHandler (error) {\r\n    debug('streamErrorHandler :: error', error.message)\r\n    if (socketErrors.includes(error.code)) {\r\n      // handle error\r\n      debug('streamErrorHandler :: emitting error')\r\n      that.emit('error', error)\r\n    } else {\r\n      nop(error)\r\n    }\r\n  }\r\n\r\n  debug('_setupStream :: pipe stream to writable stream')\r\n  this.stream.pipe(writable)\r\n\r\n  // Suppress connection errors\r\n  this.stream.on('error', streamErrorHandler)\r\n\r\n  // Echo stream close\r\n  this.stream.on('close', function () {\r\n    debug('(%s)stream :: on close', that.options.clientId)\r\n    flushVolatile(that.outgoing)\r\n    debug('stream: emit close to MqttClient')\r\n    that.emit('close')\r\n  })\r\n\r\n  // Send a connect packet\r\n  debug('_setupStream: sending packet `connect`')\r\n  const connectPacket = Object.create(this.options)\r\n  connectPacket.cmd = 'connect'\r\n  if (this.topicAliasRecv) {\r\n    if (!connectPacket.properties) {\r\n      connectPacket.properties = {}\r\n    }\r\n    if (this.topicAliasRecv) {\r\n      connectPacket.properties.topicAliasMaximum = this.topicAliasRecv.max\r\n    }\r\n  }\r\n  // avoid message queue\r\n  sendPacket(this, connectPacket)\r\n\r\n  // Echo connection errors\r\n  parser.on('error', this.emit.bind(this, 'error'))\r\n\r\n  // auth\r\n  if (this.options.properties) {\r\n    if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {\r\n      that.end(() =>\r\n        this.emit('error', new Error('Packet has no Authentication Method')\r\n        ))\r\n      return this\r\n    }\r\n    if (this.options.properties.authenticationMethod && this.options.authPacket && typeof this.options.authPacket === 'object') {\r\n      const authPacket = xtend({ cmd: 'auth', reasonCode: 0 }, this.options.authPacket)\r\n      sendPacket(this, authPacket)\r\n    }\r\n  }\r\n\r\n  // many drain listeners are needed for qos 1 callbacks if the connection is intermittent\r\n  this.stream.setMaxListeners(1000)\r\n\r\n  clearTimeout(this.connackTimer)\r\n  this.connackTimer = setTimeout(function () {\r\n    debug('!!connectTimeout hit!! Calling _cleanUp with force `true`')\r\n    that._cleanUp(true)\r\n  }, this.options.connectTimeout)\r\n}\r\n\r\nMqttClient.prototype._handlePacket = function (packet, done) {\r\n  const options = this.options\r\n\r\n  if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {\r\n    this.emit('error', new Error('exceeding packets size ' + packet.cmd))\r\n    this.end({ reasonCode: 149, properties: { reasonString: 'Maximum packet size was exceeded' } })\r\n    return this\r\n  }\r\n  debug('_handlePacket :: emitting packetreceive')\r\n  this.emit('packetreceive', packet)\r\n\r\n  switch (packet.cmd) {\r\n    case 'publish':\r\n      this._handlePublish(packet, done)\r\n      break\r\n    case 'puback':\r\n    case 'pubrec':\r\n    case 'pubcomp':\r\n    case 'suback':\r\n    case 'unsuback':\r\n      this._handleAck(packet)\r\n      done()\r\n      break\r\n    case 'pubrel':\r\n      this._handlePubrel(packet, done)\r\n      break\r\n    case 'connack':\r\n      this._handleConnack(packet)\r\n      done()\r\n      break\r\n    case 'auth':\r\n      this._handleAuth(packet)\r\n      done()\r\n      break\r\n    case 'pingresp':\r\n      this._handlePingresp(packet)\r\n      done()\r\n      break\r\n    case 'disconnect':\r\n      this._handleDisconnect(packet)\r\n      done()\r\n      break\r\n    default:\r\n      // do nothing\r\n      // maybe we should do an error handling\r\n      // or just log it\r\n      break\r\n  }\r\n}\r\n\r\nMqttClient.prototype._checkDisconnecting = function (callback) {\r\n  if (this.disconnecting) {\r\n    if (callback) {\r\n      callback(new Error('client disconnecting'))\r\n    } else {\r\n      this.emit('error', new Error('client disconnecting'))\r\n    }\r\n  }\r\n  return this.disconnecting\r\n}\r\n\r\n/**\r\n * publish - publish <message> to <topic>\r\n *\r\n * @param {String} topic - topic to publish to\r\n * @param {String, Buffer} message - message to publish\r\n * @param {Object} [opts] - publish options, includes:\r\n *    {Number} qos - qos level to publish on\r\n *    {Boolean} retain - whether or not to retain the message\r\n *    {Boolean} dup - whether or not mark a message as duplicate\r\n *    {Function} cbStorePut - function(){} called when message is put into `outgoingStore`\r\n * @param {Function} [callback] - function(err){}\r\n *    called when publish succeeds or fails\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n *\r\n * @example client.publish('topic', 'message');\r\n * @example\r\n *     client.publish('topic', 'message', {qos: 1, retain: true, dup: true});\r\n * @example client.publish('topic', 'message', console.log);\r\n */\r\nMqttClient.prototype.publish = function (topic, message, opts, callback) {\r\n  debug('publish :: message `%s` to topic `%s`', message, topic)\r\n  const options = this.options\r\n\r\n  // .publish(topic, payload, cb);\r\n  if (typeof opts === 'function') {\r\n    callback = opts\r\n    opts = null\r\n  }\r\n\r\n  // default opts\r\n  const defaultOpts = { qos: 0, retain: false, dup: false }\r\n  opts = xtend(defaultOpts, opts)\r\n\r\n  if (this._checkDisconnecting(callback)) {\r\n    return this\r\n  }\r\n\r\n  const that = this\r\n  const publishProc = function () {\r\n    let messageId = 0\r\n    if (opts.qos === 1 || opts.qos === 2) {\r\n      messageId = that._nextId()\r\n      if (messageId === null) {\r\n        debug('No messageId left')\r\n        return false\r\n      }\r\n    }\r\n    const packet = {\r\n      cmd: 'publish',\r\n      topic: topic,\r\n      payload: message,\r\n      qos: opts.qos,\r\n      retain: opts.retain,\r\n      messageId: messageId,\r\n      dup: opts.dup\r\n    }\r\n\r\n    if (options.protocolVersion === 5) {\r\n      packet.properties = opts.properties\r\n    }\r\n\r\n    debug('publish :: qos', opts.qos)\r\n    switch (opts.qos) {\r\n      case 1:\r\n      case 2:\r\n        // Add to callbacks\r\n        that.outgoing[packet.messageId] = {\r\n          volatile: false,\r\n          cb: callback || nop\r\n        }\r\n        debug('MqttClient:publish: packet cmd: %s', packet.cmd)\r\n        that._sendPacket(packet, undefined, opts.cbStorePut)\r\n        break\r\n      default:\r\n        debug('MqttClient:publish: packet cmd: %s', packet.cmd)\r\n        that._sendPacket(packet, callback, opts.cbStorePut)\r\n        break\r\n    }\r\n    return true\r\n  }\r\n\r\n  if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !publishProc()) {\r\n    this._storeProcessingQueue.push(\r\n      {\r\n        invoke: publishProc,\r\n        cbStorePut: opts.cbStorePut,\r\n        callback: callback\r\n      }\r\n    )\r\n  }\r\n  return this\r\n}\r\n\r\n/**\r\n * subscribe - subscribe to <topic>\r\n *\r\n * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}\r\n * @param {Object} [opts] - optional subscription options, includes:\r\n *    {Number} qos - subscribe qos level\r\n * @param {Function} [callback] - function(err, granted){} where:\r\n *    {Error} err - subscription error (none at the moment!)\r\n *    {Array} granted - array of {topic: 't', qos: 0}\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n * @example client.subscribe('topic');\r\n * @example client.subscribe('topic', {qos: 1});\r\n * @example client.subscribe({'topic': {qos: 0}, 'topic2': {qos: 1}}, console.log);\r\n * @example client.subscribe('topic', console.log);\r\n */\r\nMqttClient.prototype.subscribe = function () {\r\n  const that = this\r\n  const args = new Array(arguments.length)\r\n  for (let i = 0; i < arguments.length; i++) {\r\n    args[i] = arguments[i]\r\n  }\r\n  const subs = []\r\n  let obj = args.shift()\r\n  const resubscribe = obj.resubscribe\r\n  let callback = args.pop() || nop\r\n  let opts = args.pop()\r\n  const version = this.options.protocolVersion\r\n\r\n  delete obj.resubscribe\r\n\r\n  if (typeof obj === 'string') {\r\n    obj = [obj]\r\n  }\r\n\r\n  if (typeof callback !== 'function') {\r\n    opts = callback\r\n    callback = nop\r\n  }\r\n\r\n  const invalidTopic = validations.validateTopics(obj)\r\n  if (invalidTopic !== null) {\r\n    setImmediate(callback, new Error('Invalid topic ' + invalidTopic))\r\n    return this\r\n  }\r\n\r\n  if (this._checkDisconnecting(callback)) {\r\n    debug('subscribe: discconecting true')\r\n    return this\r\n  }\r\n\r\n  const defaultOpts = {\r\n    qos: 0\r\n  }\r\n  if (version === 5) {\r\n    defaultOpts.nl = false\r\n    defaultOpts.rap = false\r\n    defaultOpts.rh = 0\r\n  }\r\n  opts = xtend(defaultOpts, opts)\r\n\r\n  if (Array.isArray(obj)) {\r\n    obj.forEach(function (topic) {\r\n      debug('subscribe: array topic %s', topic)\r\n      if (!Object.prototype.hasOwnProperty.call(that._resubscribeTopics, topic) ||\r\n        that._resubscribeTopics[topic].qos < opts.qos ||\r\n          resubscribe) {\r\n        const currentOpts = {\r\n          topic: topic,\r\n          qos: opts.qos\r\n        }\r\n        if (version === 5) {\r\n          currentOpts.nl = opts.nl\r\n          currentOpts.rap = opts.rap\r\n          currentOpts.rh = opts.rh\r\n          currentOpts.properties = opts.properties\r\n        }\r\n        debug('subscribe: pushing topic `%s` and qos `%s` to subs list', currentOpts.topic, currentOpts.qos)\r\n        subs.push(currentOpts)\r\n      }\r\n    })\r\n  } else {\r\n    Object\r\n      .keys(obj)\r\n      .forEach(function (k) {\r\n        debug('subscribe: object topic %s', k)\r\n        if (!Object.prototype.hasOwnProperty.call(that._resubscribeTopics, k) ||\r\n          that._resubscribeTopics[k].qos < obj[k].qos ||\r\n            resubscribe) {\r\n          const currentOpts = {\r\n            topic: k,\r\n            qos: obj[k].qos\r\n          }\r\n          if (version === 5) {\r\n            currentOpts.nl = obj[k].nl\r\n            currentOpts.rap = obj[k].rap\r\n            currentOpts.rh = obj[k].rh\r\n            currentOpts.properties = opts.properties\r\n          }\r\n          debug('subscribe: pushing `%s` to subs list', currentOpts)\r\n          subs.push(currentOpts)\r\n        }\r\n      })\r\n  }\r\n\r\n  if (!subs.length) {\r\n    callback(null, [])\r\n    return this\r\n  }\r\n\r\n  const subscribeProc = function () {\r\n    const messageId = that._nextId()\r\n    if (messageId === null) {\r\n      debug('No messageId left')\r\n      return false\r\n    }\r\n\r\n    const packet = {\r\n      cmd: 'subscribe',\r\n      subscriptions: subs,\r\n      qos: 1,\r\n      retain: false,\r\n      dup: false,\r\n      messageId: messageId\r\n    }\r\n\r\n    if (opts.properties) {\r\n      packet.properties = opts.properties\r\n    }\r\n\r\n    // subscriptions to resubscribe to in case of disconnect\r\n    if (that.options.resubscribe) {\r\n      debug('subscribe :: resubscribe true')\r\n      const topics = []\r\n      subs.forEach(function (sub) {\r\n        if (that.options.reconnectPeriod > 0) {\r\n          const topic = { qos: sub.qos }\r\n          if (version === 5) {\r\n            topic.nl = sub.nl || false\r\n            topic.rap = sub.rap || false\r\n            topic.rh = sub.rh || 0\r\n            topic.properties = sub.properties\r\n          }\r\n          that._resubscribeTopics[sub.topic] = topic\r\n          topics.push(sub.topic)\r\n        }\r\n      })\r\n      that.messageIdToTopic[packet.messageId] = topics\r\n    }\r\n\r\n    that.outgoing[packet.messageId] = {\r\n      volatile: true,\r\n      cb: function (err, packet) {\r\n        if (!err) {\r\n          const granted = packet.granted\r\n          for (let i = 0; i < granted.length; i += 1) {\r\n            subs[i].qos = granted[i]\r\n          }\r\n        }\r\n\r\n        callback(err, subs)\r\n      }\r\n    }\r\n    debug('subscribe :: call _sendPacket')\r\n    that._sendPacket(packet)\r\n    return true\r\n  }\r\n\r\n  if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !subscribeProc()) {\r\n    this._storeProcessingQueue.push(\r\n      {\r\n        invoke: subscribeProc,\r\n        callback: callback\r\n      }\r\n    )\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * unsubscribe - unsubscribe from topic(s)\r\n *\r\n * @param {String, Array} topic - topics to unsubscribe from\r\n * @param {Object} [opts] - optional subscription options, includes:\r\n *    {Object} properties - properties of unsubscribe packet\r\n * @param {Function} [callback] - callback fired on unsuback\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n * @example client.unsubscribe('topic');\r\n * @example client.unsubscribe('topic', console.log);\r\n */\r\nMqttClient.prototype.unsubscribe = function () {\r\n  const that = this\r\n  const args = new Array(arguments.length)\r\n  for (let i = 0; i < arguments.length; i++) {\r\n    args[i] = arguments[i]\r\n  }\r\n  let topic = args.shift()\r\n  let callback = args.pop() || nop\r\n  let opts = args.pop()\r\n  if (typeof topic === 'string') {\r\n    topic = [topic]\r\n  }\r\n\r\n  if (typeof callback !== 'function') {\r\n    opts = callback\r\n    callback = nop\r\n  }\r\n\r\n  const invalidTopic = validations.validateTopics(topic)\r\n  if (invalidTopic !== null) {\r\n    setImmediate(callback, new Error('Invalid topic ' + invalidTopic))\r\n    return this\r\n  }\r\n\r\n  if (that._checkDisconnecting(callback)) {\r\n    return this\r\n  }\r\n\r\n  const unsubscribeProc = function () {\r\n    const messageId = that._nextId()\r\n    if (messageId === null) {\r\n      debug('No messageId left')\r\n      return false\r\n    }\r\n    const packet = {\r\n      cmd: 'unsubscribe',\r\n      qos: 1,\r\n      messageId: messageId\r\n    }\r\n\r\n    if (typeof topic === 'string') {\r\n      packet.unsubscriptions = [topic]\r\n    } else if (Array.isArray(topic)) {\r\n      packet.unsubscriptions = topic\r\n    }\r\n\r\n    if (that.options.resubscribe) {\r\n      packet.unsubscriptions.forEach(function (topic) {\r\n        delete that._resubscribeTopics[topic]\r\n      })\r\n    }\r\n\r\n    if (typeof opts === 'object' && opts.properties) {\r\n      packet.properties = opts.properties\r\n    }\r\n\r\n    that.outgoing[packet.messageId] = {\r\n      volatile: true,\r\n      cb: callback\r\n    }\r\n\r\n    debug('unsubscribe: call _sendPacket')\r\n    that._sendPacket(packet)\r\n\r\n    return true\r\n  }\r\n\r\n  if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !unsubscribeProc()) {\r\n    this._storeProcessingQueue.push(\r\n      {\r\n        invoke: unsubscribeProc,\r\n        callback: callback\r\n      }\r\n    )\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * end - close connection\r\n *\r\n * @returns {MqttClient} this - for chaining\r\n * @param {Boolean} force - do not wait for all in-flight messages to be acked\r\n * @param {Object} opts - added to the disconnect packet\r\n * @param {Function} cb - called when the client has been closed\r\n *\r\n * @api public\r\n */\r\nMqttClient.prototype.end = function (force, opts, cb) {\r\n  const that = this\r\n\r\n  debug('end :: (%s)', this.options.clientId)\r\n\r\n  if (force == null || typeof force !== 'boolean') {\r\n    cb = opts || nop\r\n    opts = force\r\n    force = false\r\n    if (typeof opts !== 'object') {\r\n      cb = opts\r\n      opts = null\r\n      if (typeof cb !== 'function') {\r\n        cb = nop\r\n      }\r\n    }\r\n  }\r\n\r\n  if (typeof opts !== 'object') {\r\n    cb = opts\r\n    opts = null\r\n  }\r\n\r\n  debug('end :: cb? %s', !!cb)\r\n  cb = cb || nop\r\n\r\n  function closeStores () {\r\n    debug('end :: closeStores: closing incoming and outgoing stores')\r\n    that.disconnected = true\r\n    that.incomingStore.close(function (e1) {\r\n      that.outgoingStore.close(function (e2) {\r\n        debug('end :: closeStores: emitting end')\r\n        that.emit('end')\r\n        if (cb) {\r\n          const err = e1 || e2\r\n          debug('end :: closeStores: invoking callback with args')\r\n          cb(err)\r\n        }\r\n      })\r\n    })\r\n    if (that._deferredReconnect) {\r\n      that._deferredReconnect()\r\n    }\r\n  }\r\n\r\n  function finish () {\r\n    // defer closesStores of an I/O cycle,\r\n    // just to make sure things are\r\n    // ok for websockets\r\n    debug('end :: (%s) :: finish :: calling _cleanUp with force %s', that.options.clientId, force)\r\n    that._cleanUp(force, () => {\r\n      debug('end :: finish :: calling process.nextTick on closeStores')\r\n      // const boundProcess = nextTick.bind(null, closeStores)\r\n      nextTick(closeStores.bind(that))\r\n    }, opts)\r\n  }\r\n\r\n  if (this.disconnecting) {\r\n    cb()\r\n    return this\r\n  }\r\n\r\n  this._clearReconnect()\r\n\r\n  this.disconnecting = true\r\n\r\n  if (!force && Object.keys(this.outgoing).length > 0) {\r\n    // wait 10ms, just to be sure we received all of it\r\n    debug('end :: (%s) :: calling finish in 10ms once outgoing is empty', that.options.clientId)\r\n    this.once('outgoingEmpty', setTimeout.bind(null, finish, 10))\r\n  } else {\r\n    debug('end :: (%s) :: immediately calling finish', that.options.clientId)\r\n    finish()\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * removeOutgoingMessage - remove a message in outgoing store\r\n * the outgoing callback will be called withe Error('Message removed') if the message is removed\r\n *\r\n * @param {Number} messageId - messageId to remove message\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n *\r\n * @example client.removeOutgoingMessage(client.getLastAllocated());\r\n */\r\nMqttClient.prototype.removeOutgoingMessage = function (messageId) {\r\n  const cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null\r\n  delete this.outgoing[messageId]\r\n  this.outgoingStore.del({ messageId: messageId }, function () {\r\n    cb(new Error('Message removed'))\r\n  })\r\n  return this\r\n}\r\n\r\n/**\r\n * reconnect - connect again using the same options as connect()\r\n *\r\n * @param {Object} [opts] - optional reconnect options, includes:\r\n *    {Store} incomingStore - a store for the incoming packets\r\n *    {Store} outgoingStore - a store for the outgoing packets\r\n *    if opts is not given, current stores are used\r\n * @returns {MqttClient} this - for chaining\r\n *\r\n * @api public\r\n */\r\nMqttClient.prototype.reconnect = function (opts) {\r\n  debug('client reconnect')\r\n  const that = this\r\n  const f = function () {\r\n    if (opts) {\r\n      that.options.incomingStore = opts.incomingStore\r\n      that.options.outgoingStore = opts.outgoingStore\r\n    } else {\r\n      that.options.incomingStore = null\r\n      that.options.outgoingStore = null\r\n    }\r\n    that.incomingStore = that.options.incomingStore || new Store()\r\n    that.outgoingStore = that.options.outgoingStore || new Store()\r\n    that.disconnecting = false\r\n    that.disconnected = false\r\n    that._deferredReconnect = null\r\n    that._reconnect()\r\n  }\r\n\r\n  if (this.disconnecting && !this.disconnected) {\r\n    this._deferredReconnect = f\r\n  } else {\r\n    f()\r\n  }\r\n  return this\r\n}\r\n\r\n/**\r\n * _reconnect - implement reconnection\r\n * @api privateish\r\n */\r\nMqttClient.prototype._reconnect = function () {\r\n  debug('_reconnect: emitting reconnect to client')\r\n  this.emit('reconnect')\r\n  if (this.connected) {\r\n    this.end(() => { this._setupStream() })\r\n    debug('client already connected. disconnecting first.')\r\n  } else {\r\n    debug('_reconnect: calling _setupStream')\r\n    this._setupStream()\r\n  }\r\n}\r\n\r\n/**\r\n * _setupReconnect - setup reconnect timer\r\n */\r\nMqttClient.prototype._setupReconnect = function () {\r\n  const that = this\r\n\r\n  if (!that.disconnecting && !that.reconnectTimer && (that.options.reconnectPeriod > 0)) {\r\n    if (!this.reconnecting) {\r\n      debug('_setupReconnect :: emit `offline` state')\r\n      this.emit('offline')\r\n      debug('_setupReconnect :: set `reconnecting` to `true`')\r\n      this.reconnecting = true\r\n    }\r\n    debug('_setupReconnect :: setting reconnectTimer for %d ms', that.options.reconnectPeriod)\r\n    that.reconnectTimer = setInterval(function () {\r\n      debug('reconnectTimer :: reconnect triggered!')\r\n      that._reconnect()\r\n    }, that.options.reconnectPeriod)\r\n  } else {\r\n    debug('_setupReconnect :: doing nothing...')\r\n  }\r\n}\r\n\r\n/**\r\n * _clearReconnect - clear the reconnect timer\r\n */\r\nMqttClient.prototype._clearReconnect = function () {\r\n  debug('_clearReconnect : clearing reconnect timer')\r\n  if (this.reconnectTimer) {\r\n    clearInterval(this.reconnectTimer)\r\n    this.reconnectTimer = null\r\n  }\r\n}\r\n\r\n/**\r\n * _cleanUp - clean up on connection end\r\n * @api private\r\n */\r\nMqttClient.prototype._cleanUp = function (forced, done) {\r\n  const opts = arguments[2]\r\n  if (done) {\r\n    debug('_cleanUp :: done callback provided for on stream close')\r\n    this.stream.on('close', done)\r\n  }\r\n\r\n  debug('_cleanUp :: forced? %s', forced)\r\n  if (forced) {\r\n    if ((this.options.reconnectPeriod === 0) && this.options.clean) {\r\n      flush(this.outgoing)\r\n    }\r\n    debug('_cleanUp :: (%s) :: destroying stream', this.options.clientId)\r\n    this.stream.destroy()\r\n  } else {\r\n    const packet = xtend({ cmd: 'disconnect' }, opts)\r\n    debug('_cleanUp :: (%s) :: call _sendPacket with disconnect packet', this.options.clientId)\r\n    this._sendPacket(\r\n      packet,\r\n      setImmediate.bind(\r\n        null,\r\n        this.stream.end.bind(this.stream)\r\n      )\r\n    )\r\n  }\r\n\r\n  if (!this.disconnecting) {\r\n    debug('_cleanUp :: client not disconnecting. Clearing and resetting reconnect.')\r\n    this._clearReconnect()\r\n    this._setupReconnect()\r\n  }\r\n\r\n  if (this.pingTimer !== null) {\r\n    debug('_cleanUp :: clearing pingTimer')\r\n    this.pingTimer.clear()\r\n    this.pingTimer = null\r\n  }\r\n\r\n  if (done && !this.connected) {\r\n    debug('_cleanUp :: (%s) :: removing stream `done` callback `close` listener', this.options.clientId)\r\n    this.stream.removeListener('close', done)\r\n    done()\r\n  }\r\n}\r\n\r\n/**\r\n * _sendPacket - send or queue a packet\r\n * @param {Object} packet - packet options\r\n * @param {Function} cb - callback when the packet is sent\r\n * @param {Function} cbStorePut - called when message is put into outgoingStore\r\n * @api private\r\n */\r\nMqttClient.prototype._sendPacket = function (packet, cb, cbStorePut) {\r\n  debug('_sendPacket :: (%s) ::  start', this.options.clientId)\r\n  cbStorePut = cbStorePut || nop\r\n  cb = cb || nop\r\n\r\n  const err = applyTopicAlias(this, packet)\r\n  if (err) {\r\n    cb(err)\r\n    return\r\n  }\r\n\r\n  if (!this.connected) {\r\n    // allow auth packets to be sent while authenticating with the broker (mqtt5 enhanced auth)\r\n    if (packet.cmd === 'auth') {\r\n      this._shiftPingInterval()\r\n      sendPacket(this, packet, cb)\r\n      return\r\n    }\r\n\r\n    debug('_sendPacket :: client not connected. Storing packet offline.')\r\n    this._storePacket(packet, cb, cbStorePut)\r\n    return\r\n  }\r\n\r\n  // When sending a packet, reschedule the ping timer\r\n  this._shiftPingInterval()\r\n\r\n  switch (packet.cmd) {\r\n    case 'publish':\r\n      break\r\n    case 'pubrel':\r\n      storeAndSend(this, packet, cb, cbStorePut)\r\n      return\r\n    default:\r\n      sendPacket(this, packet, cb)\r\n      return\r\n  }\r\n\r\n  switch (packet.qos) {\r\n    case 2:\r\n    case 1:\r\n      storeAndSend(this, packet, cb, cbStorePut)\r\n      break\r\n    /**\r\n     * no need of case here since it will be caught by default\r\n     * and jshint comply that before default it must be a break\r\n     * anyway it will result in -1 evaluation\r\n     */\r\n    case 0:\r\n      /* falls through */\r\n    default:\r\n      sendPacket(this, packet, cb)\r\n      break\r\n  }\r\n  debug('_sendPacket :: (%s) ::  end', this.options.clientId)\r\n}\r\n\r\n/**\r\n * _storePacket - queue a packet\r\n * @param {Object} packet - packet options\r\n * @param {Function} cb - callback when the packet is sent\r\n * @param {Function} cbStorePut - called when message is put into outgoingStore\r\n * @api private\r\n */\r\nMqttClient.prototype._storePacket = function (packet, cb, cbStorePut) {\r\n  debug('_storePacket :: packet: %o', packet)\r\n  debug('_storePacket :: cb? %s', !!cb)\r\n  cbStorePut = cbStorePut || nop\r\n\r\n  let storePacket = packet\r\n  if (storePacket.cmd === 'publish') {\r\n    // The original packet is for sending.\r\n    // The cloned storePacket is for storing to resend on reconnect.\r\n    // Topic Alias must not be used after disconnected.\r\n    storePacket = clone(packet)\r\n    const err = removeTopicAliasAndRecoverTopicName(this, storePacket)\r\n    if (err) {\r\n      return cb && cb(err)\r\n    }\r\n  }\r\n  // check that the packet is not a qos of 0, or that the command is not a publish\r\n  if (((storePacket.qos || 0) === 0 && this.queueQoSZero) || storePacket.cmd !== 'publish') {\r\n    this.queue.push({ packet: storePacket, cb: cb })\r\n  } else if (storePacket.qos > 0) {\r\n    cb = this.outgoing[storePacket.messageId] ? this.outgoing[storePacket.messageId].cb : null\r\n    this.outgoingStore.put(storePacket, function (err) {\r\n      if (err) {\r\n        return cb && cb(err)\r\n      }\r\n      cbStorePut()\r\n    })\r\n  } else if (cb) {\r\n    cb(new Error('No connection to broker'))\r\n  }\r\n}\r\n\r\n/**\r\n * _setupPingTimer - setup the ping timer\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._setupPingTimer = function () {\r\n  debug('_setupPingTimer :: keepalive %d (seconds)', this.options.keepalive)\r\n  const that = this\r\n\r\n  if (!this.pingTimer && this.options.keepalive) {\r\n    this.pingResp = true\r\n    this.pingTimer = reInterval(function () {\r\n      that._checkPing()\r\n    }, this.options.keepalive * 1000)\r\n  }\r\n}\r\n\r\n/**\r\n * _shiftPingInterval - reschedule the ping interval\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._shiftPingInterval = function () {\r\n  if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) {\r\n    this.pingTimer.reschedule(this.options.keepalive * 1000)\r\n  }\r\n}\r\n/**\r\n * _checkPing - check if a pingresp has come back, and ping the server again\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._checkPing = function () {\r\n  debug('_checkPing :: checking ping...')\r\n  if (this.pingResp) {\r\n    debug('_checkPing :: ping response received. Clearing flag and sending `pingreq`')\r\n    this.pingResp = false\r\n    this._sendPacket({ cmd: 'pingreq' })\r\n  } else {\r\n    // do a forced cleanup since socket will be in bad shape\r\n    debug('_checkPing :: calling _cleanUp with force true')\r\n    this._cleanUp(true)\r\n  }\r\n}\r\n\r\n/**\r\n * _handlePingresp - handle a pingresp\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._handlePingresp = function () {\r\n  this.pingResp = true\r\n}\r\n\r\n/**\r\n * _handleConnack\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\nMqttClient.prototype._handleConnack = function (packet) {\r\n  debug('_handleConnack')\r\n  const options = this.options\r\n  const version = options.protocolVersion\r\n  const rc = version === 5 ? packet.reasonCode : packet.returnCode\r\n\r\n  clearTimeout(this.connackTimer)\r\n  delete this.topicAliasSend\r\n\r\n  if (packet.properties) {\r\n    if (packet.properties.topicAliasMaximum) {\r\n      if (packet.properties.topicAliasMaximum > 0xffff) {\r\n        this.emit('error', new Error('topicAliasMaximum from broker is out of range'))\r\n        return\r\n      }\r\n      if (packet.properties.topicAliasMaximum > 0) {\r\n        this.topicAliasSend = new TopicAliasSend(packet.properties.topicAliasMaximum)\r\n      }\r\n    }\r\n    if (packet.properties.serverKeepAlive && options.keepalive) {\r\n      options.keepalive = packet.properties.serverKeepAlive\r\n      this._shiftPingInterval()\r\n    }\r\n    if (packet.properties.maximumPacketSize) {\r\n      if (!options.properties) { options.properties = {} }\r\n      options.properties.maximumPacketSize = packet.properties.maximumPacketSize\r\n    }\r\n  }\r\n\r\n  if (rc === 0) {\r\n    this.reconnecting = false\r\n    this._onConnect(packet)\r\n  } else if (rc > 0) {\r\n    const err = new Error('Connection refused: ' + errors[rc])\r\n    err.code = rc\r\n    this.emit('error', err)\r\n  }\r\n}\r\n\r\nMqttClient.prototype._handleAuth = function (packet) {\r\n  const options = this.options\r\n  const version = options.protocolVersion\r\n  const rc = version === 5 ? packet.reasonCode : packet.returnCode\r\n\r\n  if (version !== 5) {\r\n    const err = new Error('Protocol error: Auth packets are only supported in MQTT 5. Your version:' + version)\r\n    err.code = rc\r\n    this.emit('error', err)\r\n    return\r\n  }\r\n\r\n  const that = this\r\n  this.handleAuth(packet, function (err, packet) {\r\n    if (err) {\r\n      that.emit('error', err)\r\n      return\r\n    }\r\n\r\n    if (rc === 24) {\r\n      that.reconnecting = false\r\n      that._sendPacket(packet)\r\n    } else {\r\n      const error = new Error('Connection refused: ' + errors[rc])\r\n      err.code = rc\r\n      that.emit('error', error)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * @param packet the packet received by the broker\r\n * @return the auth packet to be returned to the broker\r\n * @api public\r\n */\r\nMqttClient.prototype.handleAuth = function (packet, callback) {\r\n  callback()\r\n}\r\n\r\n/**\r\n * _handlePublish\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n/*\r\nthose late 2 case should be rewrite to comply with coding style:\r\n\r\ncase 1:\r\ncase 0:\r\n  // do not wait sending a puback\r\n  // no callback passed\r\n  if (1 === qos) {\r\n    this._sendPacket({\r\n      cmd: 'puback',\r\n      messageId: messageId\r\n    });\r\n  }\r\n  // emit the message event for both qos 1 and 0\r\n  this.emit('message', topic, message, packet);\r\n  this.handleMessage(packet, done);\r\n  break;\r\ndefault:\r\n  // do nothing but every switch mus have a default\r\n  // log or throw an error about unknown qos\r\n  break;\r\n\r\nfor now i just suppressed the warnings\r\n*/\r\nMqttClient.prototype._handlePublish = function (packet, done) {\r\n  debug('_handlePublish: packet %o', packet)\r\n  done = typeof done !== 'undefined' ? done : nop\r\n  let topic = packet.topic.toString()\r\n  const message = packet.payload\r\n  const qos = packet.qos\r\n  const messageId = packet.messageId\r\n  const that = this\r\n  const options = this.options\r\n  const validReasonCodes = [0, 16, 128, 131, 135, 144, 145, 151, 153]\r\n  if (this.options.protocolVersion === 5) {\r\n    let alias\r\n    if (packet.properties) {\r\n      alias = packet.properties.topicAlias\r\n    }\r\n    if (typeof alias !== 'undefined') {\r\n      if (topic.length === 0) {\r\n        if (alias > 0 && alias <= 0xffff) {\r\n          const gotTopic = this.topicAliasRecv.getTopicByAlias(alias)\r\n          if (gotTopic) {\r\n            topic = gotTopic\r\n            debug('_handlePublish :: topic complemented by alias. topic: %s - alias: %d', topic, alias)\r\n          } else {\r\n            debug('_handlePublish :: unregistered topic alias. alias: %d', alias)\r\n            this.emit('error', new Error('Received unregistered Topic Alias'))\r\n            return\r\n          }\r\n        } else {\r\n          debug('_handlePublish :: topic alias out of range. alias: %d', alias)\r\n          this.emit('error', new Error('Received Topic Alias is out of range'))\r\n          return\r\n        }\r\n      } else {\r\n        if (this.topicAliasRecv.put(topic, alias)) {\r\n          debug('_handlePublish :: registered topic: %s - alias: %d', topic, alias)\r\n        } else {\r\n          debug('_handlePublish :: topic alias out of range. alias: %d', alias)\r\n          this.emit('error', new Error('Received Topic Alias is out of range'))\r\n          return\r\n        }\r\n      }\r\n    }\r\n  }\r\n  debug('_handlePublish: qos %d', qos)\r\n  switch (qos) {\r\n    case 2: {\r\n      options.customHandleAcks(topic, message, packet, function (error, code) {\r\n        if (!(error instanceof Error)) {\r\n          code = error\r\n          error = null\r\n        }\r\n        if (error) { return that.emit('error', error) }\r\n        if (validReasonCodes.indexOf(code) === -1) { return that.emit('error', new Error('Wrong reason code for pubrec')) }\r\n        if (code) {\r\n          that._sendPacket({ cmd: 'pubrec', messageId: messageId, reasonCode: code }, done)\r\n        } else {\r\n          that.incomingStore.put(packet, function () {\r\n            that._sendPacket({ cmd: 'pubrec', messageId: messageId }, done)\r\n          })\r\n        }\r\n      })\r\n      break\r\n    }\r\n    case 1: {\r\n      // emit the message event\r\n      options.customHandleAcks(topic, message, packet, function (error, code) {\r\n        if (!(error instanceof Error)) {\r\n          code = error\r\n          error = null\r\n        }\r\n        if (error) { return that.emit('error', error) }\r\n        if (validReasonCodes.indexOf(code) === -1) { return that.emit('error', new Error('Wrong reason code for puback')) }\r\n        if (!code) { that.emit('message', topic, message, packet) }\r\n        that.handleMessage(packet, function (err) {\r\n          if (err) {\r\n            return done && done(err)\r\n          }\r\n          that._sendPacket({ cmd: 'puback', messageId: messageId, reasonCode: code }, done)\r\n        })\r\n      })\r\n      break\r\n    }\r\n    case 0:\r\n      // emit the message event\r\n      this.emit('message', topic, message, packet)\r\n      this.handleMessage(packet, done)\r\n      break\r\n    default:\r\n      // do nothing\r\n      debug('_handlePublish: unknown QoS. Doing nothing.')\r\n      // log or throw an error about unknown qos\r\n      break\r\n  }\r\n}\r\n\r\n/**\r\n * Handle messages with backpressure support, one at a time.\r\n * Override at will.\r\n *\r\n * @param Packet packet the packet\r\n * @param Function callback call when finished\r\n * @api public\r\n */\r\nMqttClient.prototype.handleMessage = function (packet, callback) {\r\n  callback()\r\n}\r\n\r\n/**\r\n * _handleAck\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nMqttClient.prototype._handleAck = function (packet) {\r\n  /* eslint no-fallthrough: \"off\" */\r\n  const messageId = packet.messageId\r\n  const type = packet.cmd\r\n  let response = null\r\n  const cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null\r\n  const that = this\r\n  let err\r\n\r\n  if (!cb) {\r\n    debug('_handleAck :: Server sent an ack in error. Ignoring.')\r\n    // Server sent an ack in error, ignore it.\r\n    return\r\n  }\r\n\r\n  // Process\r\n  debug('_handleAck :: packet type', type)\r\n  switch (type) {\r\n    case 'pubcomp':\r\n      // same thing as puback for QoS 2\r\n    case 'puback': {\r\n      const pubackRC = packet.reasonCode\r\n      // Callback - we're done\r\n      if (pubackRC && pubackRC > 0 && pubackRC !== 16) {\r\n        err = new Error('Publish error: ' + errors[pubackRC])\r\n        err.code = pubackRC\r\n        cb(err, packet)\r\n      }\r\n      delete this.outgoing[messageId]\r\n      this.outgoingStore.del(packet, cb)\r\n      this.messageIdProvider.deallocate(messageId)\r\n      this._invokeStoreProcessingQueue()\r\n      break\r\n    }\r\n    case 'pubrec': {\r\n      response = {\r\n        cmd: 'pubrel',\r\n        qos: 2,\r\n        messageId: messageId\r\n      }\r\n      const pubrecRC = packet.reasonCode\r\n\r\n      if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {\r\n        err = new Error('Publish error: ' + errors[pubrecRC])\r\n        err.code = pubrecRC\r\n        cb(err, packet)\r\n      } else {\r\n        this._sendPacket(response)\r\n      }\r\n      break\r\n    }\r\n    case 'suback': {\r\n      delete this.outgoing[messageId]\r\n      this.messageIdProvider.deallocate(messageId)\r\n      for (let grantedI = 0; grantedI < packet.granted.length; grantedI++) {\r\n        if ((packet.granted[grantedI] & 0x80) !== 0) {\r\n          // suback with Failure status\r\n          const topics = this.messageIdToTopic[messageId]\r\n          if (topics) {\r\n            topics.forEach(function (topic) {\r\n              delete that._resubscribeTopics[topic]\r\n            })\r\n          }\r\n        }\r\n      }\r\n      this._invokeStoreProcessingQueue()\r\n      cb(null, packet)\r\n      break\r\n    }\r\n    case 'unsuback': {\r\n      delete this.outgoing[messageId]\r\n      this.messageIdProvider.deallocate(messageId)\r\n      this._invokeStoreProcessingQueue()\r\n      cb(null)\r\n      break\r\n    }\r\n    default:\r\n      that.emit('error', new Error('unrecognized packet type'))\r\n  }\r\n\r\n  if (this.disconnecting &&\r\n      Object.keys(this.outgoing).length === 0) {\r\n    this.emit('outgoingEmpty')\r\n  }\r\n}\r\n\r\n/**\r\n * _handlePubrel\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\nMqttClient.prototype._handlePubrel = function (packet, callback) {\r\n  debug('handling pubrel packet')\r\n  callback = typeof callback !== 'undefined' ? callback : nop\r\n  const messageId = packet.messageId\r\n  const that = this\r\n\r\n  const comp = { cmd: 'pubcomp', messageId: messageId }\r\n\r\n  that.incomingStore.get(packet, function (err, pub) {\r\n    if (!err) {\r\n      that.emit('message', pub.topic, pub.payload, pub)\r\n      that.handleMessage(pub, function (err) {\r\n        if (err) {\r\n          return callback(err)\r\n        }\r\n        that.incomingStore.del(pub, nop)\r\n        that._sendPacket(comp, callback)\r\n      })\r\n    } else {\r\n      that._sendPacket(comp, callback)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * _handleDisconnect\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\nMqttClient.prototype._handleDisconnect = function (packet) {\r\n  this.emit('disconnect', packet)\r\n}\r\n\r\n/**\r\n * _nextId\r\n * @return unsigned int\r\n */\r\nMqttClient.prototype._nextId = function () {\r\n  return this.messageIdProvider.allocate()\r\n}\r\n\r\n/**\r\n * getLastMessageId\r\n * @return unsigned int\r\n */\r\nMqttClient.prototype.getLastMessageId = function () {\r\n  return this.messageIdProvider.getLastAllocated()\r\n}\r\n\r\n/**\r\n * _resubscribe\r\n * @api private\r\n */\r\nMqttClient.prototype._resubscribe = function () {\r\n  debug('_resubscribe')\r\n  const _resubscribeTopicsKeys = Object.keys(this._resubscribeTopics)\r\n  if (!this._firstConnection &&\r\n      (this.options.clean || (this.options.protocolVersion === 5 && !this.connackPacket.sessionPresent)) &&\r\n      _resubscribeTopicsKeys.length > 0) {\r\n    if (this.options.resubscribe) {\r\n      if (this.options.protocolVersion === 5) {\r\n        debug('_resubscribe: protocolVersion 5')\r\n        for (let topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++) {\r\n          const resubscribeTopic = {}\r\n          resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]]\r\n          resubscribeTopic.resubscribe = true\r\n          this.subscribe(resubscribeTopic, { properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties })\r\n        }\r\n      } else {\r\n        this._resubscribeTopics.resubscribe = true\r\n        this.subscribe(this._resubscribeTopics)\r\n      }\r\n    } else {\r\n      this._resubscribeTopics = {}\r\n    }\r\n  }\r\n\r\n  this._firstConnection = false\r\n}\r\n\r\n/**\r\n * _onConnect\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._onConnect = function (packet) {\r\n  if (this.disconnected) {\r\n    this.emit('connect', packet)\r\n    return\r\n  }\r\n\r\n  const that = this\r\n\r\n  this.connackPacket = packet\r\n  this.messageIdProvider.clear()\r\n  this._setupPingTimer()\r\n\r\n  this.connected = true\r\n\r\n  function startStreamProcess () {\r\n    let outStore = that.outgoingStore.createStream()\r\n\r\n    function clearStoreProcessing () {\r\n      that._storeProcessing = false\r\n      that._packetIdsDuringStoreProcessing = {}\r\n    }\r\n\r\n    that.once('close', remove)\r\n    outStore.on('error', function (err) {\r\n      clearStoreProcessing()\r\n      that._flushStoreProcessingQueue()\r\n      that.removeListener('close', remove)\r\n      that.emit('error', err)\r\n    })\r\n\r\n    function remove () {\r\n      outStore.destroy()\r\n      outStore = null\r\n      that._flushStoreProcessingQueue()\r\n      clearStoreProcessing()\r\n    }\r\n\r\n    function storeDeliver () {\r\n      // edge case, we wrapped this twice\r\n      if (!outStore) {\r\n        return\r\n      }\r\n      that._storeProcessing = true\r\n\r\n      const packet = outStore.read(1)\r\n\r\n      let cb\r\n\r\n      if (!packet) {\r\n        // read when data is available in the future\r\n        outStore.once('readable', storeDeliver)\r\n        return\r\n      }\r\n\r\n      // Skip already processed store packets\r\n      if (that._packetIdsDuringStoreProcessing[packet.messageId]) {\r\n        storeDeliver()\r\n        return\r\n      }\r\n\r\n      // Avoid unnecessary stream read operations when disconnected\r\n      if (!that.disconnecting && !that.reconnectTimer) {\r\n        cb = that.outgoing[packet.messageId] ? that.outgoing[packet.messageId].cb : null\r\n        that.outgoing[packet.messageId] = {\r\n          volatile: false,\r\n          cb: function (err, status) {\r\n            // Ensure that the original callback passed in to publish gets invoked\r\n            if (cb) {\r\n              cb(err, status)\r\n            }\r\n\r\n            storeDeliver()\r\n          }\r\n        }\r\n        that._packetIdsDuringStoreProcessing[packet.messageId] = true\r\n        if (that.messageIdProvider.register(packet.messageId)) {\r\n          that._sendPacket(packet)\r\n        } else {\r\n          debug('messageId: %d has already used.', packet.messageId)\r\n        }\r\n      } else if (outStore.destroy) {\r\n        outStore.destroy()\r\n      }\r\n    }\r\n\r\n    outStore.on('end', function () {\r\n      let allProcessed = true\r\n      for (const id in that._packetIdsDuringStoreProcessing) {\r\n        if (!that._packetIdsDuringStoreProcessing[id]) {\r\n          allProcessed = false\r\n          break\r\n        }\r\n      }\r\n      if (allProcessed) {\r\n        clearStoreProcessing()\r\n        that.removeListener('close', remove)\r\n        that._invokeAllStoreProcessingQueue()\r\n        that.emit('connect', packet)\r\n      } else {\r\n        startStreamProcess()\r\n      }\r\n    })\r\n    storeDeliver()\r\n  }\r\n  // start flowing\r\n  startStreamProcess()\r\n}\r\n\r\nMqttClient.prototype._invokeStoreProcessingQueue = function () {\r\n  if (this._storeProcessingQueue.length > 0) {\r\n    const f = this._storeProcessingQueue[0]\r\n    if (f && f.invoke()) {\r\n      this._storeProcessingQueue.shift()\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nMqttClient.prototype._invokeAllStoreProcessingQueue = function () {\r\n  while (this._invokeStoreProcessingQueue()) { /* empty */ }\r\n}\r\n\r\nMqttClient.prototype._flushStoreProcessingQueue = function () {\r\n  for (const f of this._storeProcessingQueue) {\r\n    if (f.cbStorePut) f.cbStorePut(new Error('Connection closed'))\r\n    if (f.callback) f.callback(new Error('Connection closed'))\r\n  }\r\n  this._storeProcessingQueue.splice(0)\r\n}\r\n\r\nmodule.exports = MqttClient\r\n"]},"metadata":{},"sourceType":"script"}