{"ast":null,"code":"const url = 'ws://localhost:5000';\nlet ws = new WebSocket(url);\n\nfunction webSocketObject(setOnlineList, handleErrors) {\n  const queueWaitTime = 500;\n  const reloadPageDelay = 90000;\n  var newList = [];\n  const wsMessageQueue = []; //WebSocket Methods\n\n  const reloadPage = function () {\n    window.location.reload();\n  };\n\n  ws.onopen = () => {\n    console.log(\"ws: Connected, Sending message from client to server\");\n    ws.send('Message From Client');\n  };\n\n  ws.onclose = () => {\n    handleErrors({\n      error: \"Lost connection with Websocket Server reloading in \" + reloadPageDelay / 1000 + \" seconds\"\n    });\n    setTimeout(reloadPage, reloadPageDelay); //reload the page after 10 seconds\n  };\n\n  ws.onerror = error => {\n    console.log(\"WebSocket error:\", error);\n  };\n\n  ws.onmessage = e => {\n    wsMessageQueue.push(e.data.toString());\n    setTimeout(emptyWsQueue, queueWaitTime);\n  };\n\n  const emptyWsQueue = () => {\n    if (wsMessageQueue === 0) return;\n\n    while (wsMessageQueue.length > 0) {\n      let datas = wsMessageQueue.shift();\n      datas = JSON.parse(datas.toString()); //console.log(datas)\n\n      if (datas.typeMessage === \"logout\") {\n        //console.log(\"newlist: \", newList,\"   datas: \", datas)\n        newList = newList.filter(x => x.userId !== datas.userId); //console.log(\"logout, onlinelistAfter: \", newList)\n      }\n\n      if (datas.typeMessage === \"update\" || datas.typeMessage === \"login\") {\n        //console.log(\"newlist: \", newList,\"   datas: \", datas)\n        newList = newList.filter(x => x.userId !== datas.userId);\n        newList.push(datas); //console.log(\"login, onlinelistAfter: \", newList)\n      }\n    }\n\n    setOnlineList(newList.map(e => e));\n  };\n}\n\nexport default webSocketObject;","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/src/utils/websocket.js"],"names":["url","ws","WebSocket","webSocketObject","setOnlineList","handleErrors","queueWaitTime","reloadPageDelay","newList","wsMessageQueue","reloadPage","window","location","reload","onopen","console","log","send","onclose","error","setTimeout","onerror","onmessage","e","push","data","toString","emptyWsQueue","length","datas","shift","JSON","parse","typeMessage","filter","x","userId","map"],"mappings":"AAAA,MAAMA,GAAG,GAAG,qBAAZ;AACA,IAAIC,EAAE,GAAG,IAAIC,SAAJ,CAAcF,GAAd,CAAT;;AAGA,SAASG,eAAT,CAAyBC,aAAzB,EAAwCC,YAAxC,EAAsD;AACpD,QAAMC,aAAa,GAAG,GAAtB;AACA,QAAMC,eAAe,GAAG,KAAxB;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,cAAc,GAAG,EAAvB,CAJoD,CAMpD;;AACA,QAAMC,UAAU,GAAG,YAAY;AAC7BC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GAFD;;AAGAZ,EAAAA,EAAE,CAACa,MAAH,GAAY,MAAM;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ;AACAf,IAAAA,EAAE,CAACgB,IAAH,CAAQ,qBAAR;AACD,GAHD;;AAIAhB,EAAAA,EAAE,CAACiB,OAAH,GAAa,MAAM;AACjBb,IAAAA,YAAY,CAAC;AAAEc,MAAAA,KAAK,EAAE,wDAAuDZ,eAAe,GAAC,IAAvE,GAA6E;AAAtF,KAAD,CAAZ;AACAa,IAAAA,UAAU,CAACV,UAAD,EAAaH,eAAb,CAAV,CAFiB,CAEsB;AACxC,GAHD;;AAKAN,EAAAA,EAAE,CAACoB,OAAH,GAAcF,KAAD,IAAW;AACtBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCG,KAAhC;AACD,GAFD;;AAIAlB,EAAAA,EAAE,CAACqB,SAAH,GAAgBC,CAAD,IAAO;AACpBd,IAAAA,cAAc,CAACe,IAAf,CAAoBD,CAAC,CAACE,IAAF,CAAOC,QAAP,EAApB;AACAN,IAAAA,UAAU,CAACO,YAAD,EAAerB,aAAf,CAAV;AACD,GAHD;;AAMA,QAAMqB,YAAY,GAAG,MAAM;AACzB,QAAIlB,cAAc,KAAK,CAAvB,EAA0B;;AAC1B,WAAOA,cAAc,CAACmB,MAAf,GAAwB,CAA/B,EAAkC;AAChC,UAAIC,KAAK,GAAGpB,cAAc,CAACqB,KAAf,EAAZ;AACAD,MAAAA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACH,QAAN,EAAX,CAAR,CAFgC,CAGhC;;AACA,UAAIG,KAAK,CAACI,WAAN,KAAsB,QAA1B,EAAoC;AAClC;AACAzB,QAAAA,OAAO,GAAGA,OAAO,CAAC0B,MAAR,CAAgBC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAaP,KAAK,CAACO,MAAzC,CAAV,CAFkC,CAGlC;AACD;;AACD,UAAIP,KAAK,CAACI,WAAN,KAAsB,QAAtB,IAAkCJ,KAAK,CAACI,WAAN,KAAsB,OAA5D,EAAqE;AACnE;AACAzB,QAAAA,OAAO,GAAGA,OAAO,CAAC0B,MAAR,CAAgBC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAaP,KAAK,CAACO,MAAzC,CAAV;AACA5B,QAAAA,OAAO,CAACgB,IAAR,CAAaK,KAAb,EAHmE,CAInE;AACD;AACF;;AACDzB,IAAAA,aAAa,CAACI,OAAO,CAAC6B,GAAR,CAAYd,CAAC,IAAIA,CAAjB,CAAD,CAAb;AACD,GAnBD;AAoBD;;AAED,eAAepB,eAAf","sourcesContent":["const url = 'ws://localhost:5000'\nlet ws = new WebSocket(url)\n\n\nfunction webSocketObject(setOnlineList, handleErrors) {\n  const queueWaitTime = 500\n  const reloadPageDelay = 90000\n  var newList = []\n  const wsMessageQueue = [];\n\n  //WebSocket Methods\n  const reloadPage = function () {\n    window.location.reload()\n  }\n  ws.onopen = () => {\n    console.log(\"ws: Connected, Sending message from client to server\")\n    ws.send('Message From Client');\n  }\n  ws.onclose = () => {\n    handleErrors({ error: \"Lost connection with Websocket Server reloading in \"+ reloadPageDelay/1000 +\" seconds\" })\n    setTimeout(reloadPage, reloadPageDelay)//reload the page after 10 seconds\n  }\n\n  ws.onerror = (error) => {\n    console.log(\"WebSocket error:\", error);\n  }\n\n  ws.onmessage = (e) => {\n    wsMessageQueue.push(e.data.toString())\n    setTimeout(emptyWsQueue, queueWaitTime)\n  }\n\n\n  const emptyWsQueue = () => {\n    if (wsMessageQueue === 0) return;\n    while (wsMessageQueue.length > 0) {\n      let datas = wsMessageQueue.shift()\n      datas = JSON.parse(datas.toString());\n      //console.log(datas)\n      if (datas.typeMessage === \"logout\") {\n        //console.log(\"newlist: \", newList,\"   datas: \", datas)\n        newList = newList.filter((x) => x.userId !== datas.userId);\n        //console.log(\"logout, onlinelistAfter: \", newList)\n      }\n      if (datas.typeMessage === \"update\" || datas.typeMessage === \"login\") {\n        //console.log(\"newlist: \", newList,\"   datas: \", datas)\n        newList = newList.filter((x) => x.userId !== datas.userId);\n        newList.push(datas);\n        //console.log(\"login, onlinelistAfter: \", newList)\n      }\n    }\n    setOnlineList(newList.map(e => e));\n  }\n}\n\nexport default webSocketObject"]},"metadata":{},"sourceType":"module"}