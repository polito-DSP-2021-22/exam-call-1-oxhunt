{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport TreeNode from \"../Base/TreeNode\";\n\nfunction Set(container, cmp) {\n  var _this = this;\n\n  if (container === void 0) {\n    container = [];\n  }\n\n  cmp = cmp || function (x, y) {\n    if (x < y) return -1;\n    if (x > y) return 1;\n    return 0;\n  };\n\n  var len = 0;\n  var root = new TreeNode();\n  root.color = TreeNode.TreeNodeColorType.black;\n\n  this.size = function () {\n    return len;\n  };\n\n  this.empty = function () {\n    return len === 0;\n  };\n\n  this.clear = function () {\n    len = 0;\n    root.key = undefined;\n    root.leftChild = root.rightChild = root.brother = root.parent = undefined;\n    root.color = TreeNode.TreeNodeColorType.black;\n  };\n\n  var findSubTreeMinNode = function (curNode) {\n    if (!curNode || curNode.key === undefined) throw new Error(\"unknown error\");\n    return curNode.leftChild ? findSubTreeMinNode(curNode.leftChild) : curNode;\n  };\n\n  var findSubTreeMaxNode = function (curNode) {\n    if (!curNode || curNode.key === undefined) throw new Error(\"unknown error\");\n    return curNode.rightChild ? findSubTreeMaxNode(curNode.rightChild) : curNode;\n  };\n\n  this.front = function () {\n    if (this.empty()) return undefined;\n    var minNode = findSubTreeMinNode(root);\n    return minNode.key;\n  };\n\n  this.back = function () {\n    if (this.empty()) return undefined;\n    var maxNode = findSubTreeMaxNode(root);\n    return maxNode.key;\n  };\n\n  this.forEach = function (callback) {\n    var e_1, _a;\n\n    var index = 0;\n\n    try {\n      for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var element = _c.value;\n        callback(element, index++);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  this.getElementByPos = function (pos) {\n    var e_2, _a;\n\n    if (pos < 0 || pos >= this.size()) throw new Error(\"pos must more than 0 and less than set's size\");\n    var index = 0;\n\n    try {\n      for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var element = _c.value;\n        if (index === pos) return element;\n        ++index;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    throw new Error(\"unknown error\");\n  };\n\n  var eraseNodeSelfBalance = function (curNode) {\n    var parentNode = curNode.parent;\n\n    if (!parentNode) {\n      if (curNode === root) return;\n      throw new Error(\"unknown error\");\n    }\n\n    if (curNode.color === TreeNode.TreeNodeColorType.red) {\n      curNode.color = TreeNode.TreeNodeColorType.black;\n      return;\n    }\n\n    var brotherNode = curNode.brother;\n    if (!brotherNode) throw new Error(\"unknown error\");\n\n    if (curNode === parentNode.leftChild) {\n      if (brotherNode.color === TreeNode.TreeNodeColorType.red) {\n        brotherNode.color = TreeNode.TreeNodeColorType.black;\n        parentNode.color = TreeNode.TreeNodeColorType.red;\n        var newRoot = parentNode.rotateLeft();\n        if (root === parentNode) root = newRoot;\n        eraseNodeSelfBalance(curNode);\n      } else if (brotherNode.color === TreeNode.TreeNodeColorType.black) {\n        if (brotherNode.rightChild && brotherNode.rightChild.color === TreeNode.TreeNodeColorType.red) {\n          brotherNode.color = parentNode.color;\n          parentNode.color = TreeNode.TreeNodeColorType.black;\n          if (brotherNode.rightChild) brotherNode.rightChild.color = TreeNode.TreeNodeColorType.black;\n          var newRoot = parentNode.rotateLeft();\n          if (root === parentNode) root = newRoot;\n          curNode.color = TreeNode.TreeNodeColorType.black;\n        } else if ((!brotherNode.rightChild || brotherNode.rightChild.color === TreeNode.TreeNodeColorType.black) && brotherNode.leftChild && brotherNode.leftChild.color === TreeNode.TreeNodeColorType.red) {\n          brotherNode.color = TreeNode.TreeNodeColorType.red;\n          if (brotherNode.leftChild) brotherNode.leftChild.color = TreeNode.TreeNodeColorType.black;\n          var newRoot = brotherNode.rotateRight();\n          if (root === brotherNode) root = newRoot;\n          eraseNodeSelfBalance(curNode);\n        } else if ((!brotherNode.leftChild || brotherNode.leftChild.color === TreeNode.TreeNodeColorType.black) && (!brotherNode.rightChild || brotherNode.rightChild.color === TreeNode.TreeNodeColorType.black)) {\n          brotherNode.color = TreeNode.TreeNodeColorType.red;\n          eraseNodeSelfBalance(parentNode);\n        }\n      }\n    } else if (curNode === parentNode.rightChild) {\n      if (brotherNode.color === TreeNode.TreeNodeColorType.red) {\n        brotherNode.color = TreeNode.TreeNodeColorType.black;\n        parentNode.color = TreeNode.TreeNodeColorType.red;\n        var newRoot = parentNode.rotateRight();\n        if (root === parentNode) root = newRoot;\n        eraseNodeSelfBalance(curNode);\n      } else if (brotherNode.color === TreeNode.TreeNodeColorType.black) {\n        if (brotherNode.leftChild && brotherNode.leftChild.color === TreeNode.TreeNodeColorType.red) {\n          brotherNode.color = parentNode.color;\n          parentNode.color = TreeNode.TreeNodeColorType.black;\n          if (brotherNode.leftChild) brotherNode.leftChild.color = TreeNode.TreeNodeColorType.black;\n          var newRoot = parentNode.rotateRight();\n          if (root === parentNode) root = newRoot;\n          curNode.color = TreeNode.TreeNodeColorType.black;\n        } else if ((!brotherNode.leftChild || brotherNode.leftChild.color === TreeNode.TreeNodeColorType.black) && brotherNode.rightChild && brotherNode.rightChild.color === TreeNode.TreeNodeColorType.red) {\n          brotherNode.color = TreeNode.TreeNodeColorType.red;\n          if (brotherNode.rightChild) brotherNode.rightChild.color = TreeNode.TreeNodeColorType.black;\n          var newRoot = brotherNode.rotateLeft();\n          if (root === brotherNode) root = newRoot;\n          eraseNodeSelfBalance(curNode);\n        } else if ((!brotherNode.leftChild || brotherNode.leftChild.color === TreeNode.TreeNodeColorType.black) && (!brotherNode.rightChild || brotherNode.rightChild.color === TreeNode.TreeNodeColorType.black)) {\n          brotherNode.color = TreeNode.TreeNodeColorType.red;\n          eraseNodeSelfBalance(parentNode);\n        }\n      }\n    }\n  };\n\n  var eraseNode = function (curNode) {\n    var swapNode = curNode;\n\n    while (swapNode.leftChild || swapNode.rightChild) {\n      if (swapNode.rightChild) {\n        swapNode = findSubTreeMinNode(swapNode.rightChild);\n        var tmpKey = curNode.key;\n        curNode.key = swapNode.key;\n        swapNode.key = tmpKey;\n        curNode = swapNode;\n      }\n\n      if (swapNode.leftChild) {\n        swapNode = findSubTreeMaxNode(swapNode.leftChild);\n        var tmpKey = curNode.key;\n        curNode.key = swapNode.key;\n        swapNode.key = tmpKey;\n        curNode = swapNode;\n      }\n    }\n\n    eraseNodeSelfBalance(swapNode);\n    if (swapNode) swapNode.remove();\n    --len;\n    root.color = TreeNode.TreeNodeColorType.black;\n  };\n\n  var inOrderTraversal = function (curNode, callback) {\n    if (!curNode || curNode.key === undefined) return false;\n    var ifReturn = inOrderTraversal(curNode.leftChild, callback);\n    if (ifReturn) return true;\n    if (callback(curNode)) return true;\n    return inOrderTraversal(curNode.rightChild, callback);\n  };\n\n  this.eraseElementByPos = function (pos) {\n    if (pos < 0 || pos >= len) throw new Error(\"pos must more than 0 and less than set's size\");\n    var index = 0;\n    inOrderTraversal(root, function (curNode) {\n      if (pos === index) {\n        eraseNode(curNode);\n        return true;\n      }\n\n      ++index;\n      return false;\n    });\n  };\n\n  this.eraseElementByValue = function (value) {\n    if (this.empty()) return;\n    var curNode = findElementPos(root, value);\n    if (curNode === undefined || curNode.key === undefined || cmp(curNode.key, value) !== 0) return;\n    eraseNode(curNode);\n  };\n\n  var findInsertPos = function (curNode, element) {\n    if (!curNode || curNode.key === undefined) throw new Error(\"unknown error\");\n    var cmpResult = cmp(element, curNode.key);\n\n    if (cmpResult < 0) {\n      if (!curNode.leftChild) {\n        curNode.leftChild = new TreeNode();\n        curNode.leftChild.parent = curNode;\n        curNode.leftChild.brother = curNode.rightChild;\n        if (curNode.rightChild) curNode.rightChild.brother = curNode.leftChild;\n        return curNode.leftChild;\n      }\n\n      return findInsertPos(curNode.leftChild, element);\n    } else if (cmpResult > 0) {\n      if (!curNode.rightChild) {\n        curNode.rightChild = new TreeNode();\n        curNode.rightChild.parent = curNode;\n        curNode.rightChild.brother = curNode.leftChild;\n        if (curNode.leftChild) curNode.leftChild.brother = curNode.rightChild;\n        return curNode.rightChild;\n      }\n\n      return findInsertPos(curNode.rightChild, element);\n    }\n\n    return curNode;\n  };\n\n  var insertNodeSelfBalance = function (curNode) {\n    var parentNode = curNode.parent;\n\n    if (!parentNode) {\n      if (curNode === root) return;\n      throw new Error(\"unknown error\");\n    }\n\n    if (parentNode.color === TreeNode.TreeNodeColorType.black) return;\n\n    if (parentNode.color === TreeNode.TreeNodeColorType.red) {\n      var uncleNode = parentNode.brother;\n      var grandParent = parentNode.parent;\n      if (!grandParent) throw new Error(\"unknown error\");\n\n      if (uncleNode && uncleNode.color === TreeNode.TreeNodeColorType.red) {\n        uncleNode.color = parentNode.color = TreeNode.TreeNodeColorType.black;\n        grandParent.color = TreeNode.TreeNodeColorType.red;\n        insertNodeSelfBalance(grandParent);\n      } else if (!uncleNode || uncleNode.color === TreeNode.TreeNodeColorType.black) {\n        if (parentNode === grandParent.leftChild) {\n          if (curNode === parentNode.leftChild) {\n            parentNode.color = TreeNode.TreeNodeColorType.black;\n            grandParent.color = TreeNode.TreeNodeColorType.red;\n            var newRoot = grandParent.rotateRight();\n            if (grandParent === root) root = newRoot;\n          } else if (curNode === parentNode.rightChild) {\n            var newRoot = parentNode.rotateLeft();\n            if (grandParent === root) root = newRoot;\n            insertNodeSelfBalance(parentNode);\n          }\n        } else if (parentNode === grandParent.rightChild) {\n          if (curNode === parentNode.leftChild) {\n            var newRoot = parentNode.rotateRight();\n            if (grandParent === root) root = newRoot;\n            insertNodeSelfBalance(parentNode);\n          } else if (curNode === parentNode.rightChild) {\n            parentNode.color = TreeNode.TreeNodeColorType.black;\n            grandParent.color = TreeNode.TreeNodeColorType.red;\n            var newRoot = grandParent.rotateLeft();\n            if (grandParent === root) root = newRoot;\n          }\n        }\n      }\n    }\n  };\n\n  this.insert = function (element) {\n    if (element === null || element === undefined) {\n      throw new Error(\"to avoid some unnecessary errors, we don't suggest you insert null or undefined here\");\n    }\n\n    if (this.empty()) {\n      ++len;\n      root.key = element;\n      root.color = TreeNode.TreeNodeColorType.black;\n      return;\n    }\n\n    var curNode = findInsertPos(root, element);\n    if (curNode.key !== undefined && cmp(curNode.key, element) === 0) return;\n    ++len;\n    curNode.key = element;\n    insertNodeSelfBalance(curNode);\n    root.color = TreeNode.TreeNodeColorType.black;\n  };\n\n  var findElementPos = function (curNode, element) {\n    if (!curNode || curNode.key === undefined) return undefined;\n    var cmpResult = cmp(element, curNode.key);\n    if (cmpResult < 0) return findElementPos(curNode.leftChild, element);else if (cmpResult > 0) return findElementPos(curNode.rightChild, element);\n    return curNode;\n  };\n\n  this.find = function (element) {\n    var curNode = findElementPos(root, element);\n    return curNode !== undefined && curNode.key !== undefined && cmp(curNode.key, element) === 0;\n  };\n\n  var _lowerBound = function (curNode, key) {\n    if (!curNode || curNode.key === undefined) return undefined;\n    var cmpResult = cmp(curNode.key, key);\n    if (cmpResult === 0) return curNode.key;\n    if (cmpResult < 0) return _lowerBound(curNode.rightChild, key);\n\n    var res = _lowerBound(curNode.leftChild, key);\n\n    if (res !== undefined) return res;\n    return curNode.key;\n  };\n\n  this.lowerBound = function (key) {\n    return _lowerBound(root, key);\n  };\n\n  var _upperBound = function (curNode, key) {\n    if (!curNode || curNode.key === undefined) return undefined;\n    var cmpResult = cmp(curNode.key, key);\n    if (cmpResult <= 0) return _upperBound(curNode.rightChild, key);\n\n    var res = _upperBound(curNode.leftChild, key);\n\n    if (res !== undefined) return res;\n    return curNode.key;\n  };\n\n  this.upperBound = function (key) {\n    return _upperBound(root, key);\n  };\n\n  var _reverseLowerBound = function (curNode, key) {\n    if (!curNode || curNode.key === undefined) return undefined;\n    var cmpResult = cmp(curNode.key, key);\n    if (cmpResult === 0) return curNode.key;\n    if (cmpResult > 0) return _reverseLowerBound(curNode.leftChild, key);\n\n    var res = _reverseLowerBound(curNode.rightChild, key);\n\n    if (res !== undefined) return res;\n    return curNode.key;\n  };\n\n  this.reverseLowerBound = function (key) {\n    return _reverseLowerBound(root, key);\n  };\n\n  var _reverseUpperBound = function (curNode, key) {\n    if (!curNode || curNode.key === undefined) return undefined;\n    var cmpResult = cmp(curNode.key, key);\n    if (cmpResult >= 0) return _reverseUpperBound(curNode.leftChild, key);\n\n    var res = _reverseUpperBound(curNode.rightChild, key);\n\n    if (res !== undefined) return res;\n    return curNode.key;\n  };\n\n  this.reverseUpperBound = function (key) {\n    return _reverseUpperBound(root, key);\n  }; // waiting for optimization, this is O(mlog(n+m)) algorithm now, but we expect it to be O(mlog(n/m+1)).\n  // (https://en.wikipedia.org/wiki/Red%E2%80%93black_tree#Set_operations_and_bulk_operations)\n\n\n  this.union = function (other) {\n    var _this = this;\n\n    other.forEach(function (element) {\n      return _this.insert(element);\n    });\n  };\n\n  this.getHeight = function () {\n    if (this.empty()) return 0;\n\n    var traversal = function (curNode) {\n      if (!curNode) return 1;\n      return Math.max(traversal(curNode.leftChild), traversal(curNode.rightChild)) + 1;\n    };\n\n    return traversal(root);\n  };\n\n  var iterationFunc = function (curNode) {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!curNode || curNode.key === undefined) return [2\n          /*return*/\n          ];\n          return [5\n          /*yield**/\n          , __values(iterationFunc(curNode.leftChild))];\n\n        case 1:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , curNode.key];\n\n        case 2:\n          _a.sent();\n\n          return [5\n          /*yield**/\n          , __values(iterationFunc(curNode.rightChild))];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n\n  this[Symbol.iterator] = function () {\n    return iterationFunc(root);\n  };\n\n  container.forEach(function (element) {\n    return _this.insert(element);\n  });\n  Object.freeze(this);\n}\n\nObject.freeze(Set);\nexport default Set;","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/node_modules/js-sdsl/dist/esm/Set/Set.js"],"names":["__generator","thisArg","body","_","label","sent","t","trys","ops","f","y","g","next","verb","Symbol","iterator","n","v","step","op","TypeError","call","done","value","pop","length","push","e","__values","o","s","m","i","TreeNode","Set","container","cmp","_this","x","len","root","color","TreeNodeColorType","black","size","empty","clear","key","undefined","leftChild","rightChild","brother","parent","findSubTreeMinNode","curNode","Error","findSubTreeMaxNode","front","minNode","back","maxNode","forEach","callback","e_1","_a","index","_b","_c","element","e_1_1","error","return","getElementByPos","pos","e_2","e_2_1","eraseNodeSelfBalance","parentNode","red","brotherNode","newRoot","rotateLeft","rotateRight","eraseNode","swapNode","tmpKey","remove","inOrderTraversal","ifReturn","eraseElementByPos","eraseElementByValue","findElementPos","findInsertPos","cmpResult","insertNodeSelfBalance","uncleNode","grandParent","insert","find","_lowerBound","res","lowerBound","_upperBound","upperBound","_reverseLowerBound","reverseLowerBound","_reverseUpperBound","reverseUpperBound","union","other","getHeight","traversal","Math","max","iterationFunc","Object","freeze"],"mappings":"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","sourcesContent":["var __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport TreeNode from \"../Base/TreeNode\";\nfunction Set(container, cmp) {\n    var _this = this;\n    if (container === void 0) { container = []; }\n    cmp = cmp || (function (x, y) {\n        if (x < y)\n            return -1;\n        if (x > y)\n            return 1;\n        return 0;\n    });\n    var len = 0;\n    var root = new TreeNode();\n    root.color = TreeNode.TreeNodeColorType.black;\n    this.size = function () {\n        return len;\n    };\n    this.empty = function () {\n        return len === 0;\n    };\n    this.clear = function () {\n        len = 0;\n        root.key = undefined;\n        root.leftChild = root.rightChild = root.brother = root.parent = undefined;\n        root.color = TreeNode.TreeNodeColorType.black;\n    };\n    var findSubTreeMinNode = function (curNode) {\n        if (!curNode || curNode.key === undefined)\n            throw new Error(\"unknown error\");\n        return curNode.leftChild ? findSubTreeMinNode(curNode.leftChild) : curNode;\n    };\n    var findSubTreeMaxNode = function (curNode) {\n        if (!curNode || curNode.key === undefined)\n            throw new Error(\"unknown error\");\n        return curNode.rightChild ? findSubTreeMaxNode(curNode.rightChild) : curNode;\n    };\n    this.front = function () {\n        if (this.empty())\n            return undefined;\n        var minNode = findSubTreeMinNode(root);\n        return minNode.key;\n    };\n    this.back = function () {\n        if (this.empty())\n            return undefined;\n        var maxNode = findSubTreeMaxNode(root);\n        return maxNode.key;\n    };\n    this.forEach = function (callback) {\n        var e_1, _a;\n        var index = 0;\n        try {\n            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var element = _c.value;\n                callback(element, index++);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    this.getElementByPos = function (pos) {\n        var e_2, _a;\n        if (pos < 0 || pos >= this.size())\n            throw new Error(\"pos must more than 0 and less than set's size\");\n        var index = 0;\n        try {\n            for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var element = _c.value;\n                if (index === pos)\n                    return element;\n                ++index;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        throw new Error(\"unknown error\");\n    };\n    var eraseNodeSelfBalance = function (curNode) {\n        var parentNode = curNode.parent;\n        if (!parentNode) {\n            if (curNode === root)\n                return;\n            throw new Error(\"unknown error\");\n        }\n        if (curNode.color === TreeNode.TreeNodeColorType.red) {\n            curNode.color = TreeNode.TreeNodeColorType.black;\n            return;\n        }\n        var brotherNode = curNode.brother;\n        if (!brotherNode)\n            throw new Error(\"unknown error\");\n        if (curNode === parentNode.leftChild) {\n            if (brotherNode.color === TreeNode.TreeNodeColorType.red) {\n                brotherNode.color = TreeNode.TreeNodeColorType.black;\n                parentNode.color = TreeNode.TreeNodeColorType.red;\n                var newRoot = parentNode.rotateLeft();\n                if (root === parentNode)\n                    root = newRoot;\n                eraseNodeSelfBalance(curNode);\n            }\n            else if (brotherNode.color === TreeNode.TreeNodeColorType.black) {\n                if (brotherNode.rightChild && brotherNode.rightChild.color === TreeNode.TreeNodeColorType.red) {\n                    brotherNode.color = parentNode.color;\n                    parentNode.color = TreeNode.TreeNodeColorType.black;\n                    if (brotherNode.rightChild)\n                        brotherNode.rightChild.color = TreeNode.TreeNodeColorType.black;\n                    var newRoot = parentNode.rotateLeft();\n                    if (root === parentNode)\n                        root = newRoot;\n                    curNode.color = TreeNode.TreeNodeColorType.black;\n                }\n                else if ((!brotherNode.rightChild || brotherNode.rightChild.color === TreeNode.TreeNodeColorType.black) && brotherNode.leftChild && brotherNode.leftChild.color === TreeNode.TreeNodeColorType.red) {\n                    brotherNode.color = TreeNode.TreeNodeColorType.red;\n                    if (brotherNode.leftChild)\n                        brotherNode.leftChild.color = TreeNode.TreeNodeColorType.black;\n                    var newRoot = brotherNode.rotateRight();\n                    if (root === brotherNode)\n                        root = newRoot;\n                    eraseNodeSelfBalance(curNode);\n                }\n                else if ((!brotherNode.leftChild || brotherNode.leftChild.color === TreeNode.TreeNodeColorType.black) && (!brotherNode.rightChild || brotherNode.rightChild.color === TreeNode.TreeNodeColorType.black)) {\n                    brotherNode.color = TreeNode.TreeNodeColorType.red;\n                    eraseNodeSelfBalance(parentNode);\n                }\n            }\n        }\n        else if (curNode === parentNode.rightChild) {\n            if (brotherNode.color === TreeNode.TreeNodeColorType.red) {\n                brotherNode.color = TreeNode.TreeNodeColorType.black;\n                parentNode.color = TreeNode.TreeNodeColorType.red;\n                var newRoot = parentNode.rotateRight();\n                if (root === parentNode)\n                    root = newRoot;\n                eraseNodeSelfBalance(curNode);\n            }\n            else if (brotherNode.color === TreeNode.TreeNodeColorType.black) {\n                if (brotherNode.leftChild && brotherNode.leftChild.color === TreeNode.TreeNodeColorType.red) {\n                    brotherNode.color = parentNode.color;\n                    parentNode.color = TreeNode.TreeNodeColorType.black;\n                    if (brotherNode.leftChild)\n                        brotherNode.leftChild.color = TreeNode.TreeNodeColorType.black;\n                    var newRoot = parentNode.rotateRight();\n                    if (root === parentNode)\n                        root = newRoot;\n                    curNode.color = TreeNode.TreeNodeColorType.black;\n                }\n                else if ((!brotherNode.leftChild || brotherNode.leftChild.color === TreeNode.TreeNodeColorType.black) && brotherNode.rightChild && brotherNode.rightChild.color === TreeNode.TreeNodeColorType.red) {\n                    brotherNode.color = TreeNode.TreeNodeColorType.red;\n                    if (brotherNode.rightChild)\n                        brotherNode.rightChild.color = TreeNode.TreeNodeColorType.black;\n                    var newRoot = brotherNode.rotateLeft();\n                    if (root === brotherNode)\n                        root = newRoot;\n                    eraseNodeSelfBalance(curNode);\n                }\n                else if ((!brotherNode.leftChild || brotherNode.leftChild.color === TreeNode.TreeNodeColorType.black) && (!brotherNode.rightChild || brotherNode.rightChild.color === TreeNode.TreeNodeColorType.black)) {\n                    brotherNode.color = TreeNode.TreeNodeColorType.red;\n                    eraseNodeSelfBalance(parentNode);\n                }\n            }\n        }\n    };\n    var eraseNode = function (curNode) {\n        var swapNode = curNode;\n        while (swapNode.leftChild || swapNode.rightChild) {\n            if (swapNode.rightChild) {\n                swapNode = findSubTreeMinNode(swapNode.rightChild);\n                var tmpKey = curNode.key;\n                curNode.key = swapNode.key;\n                swapNode.key = tmpKey;\n                curNode = swapNode;\n            }\n            if (swapNode.leftChild) {\n                swapNode = findSubTreeMaxNode(swapNode.leftChild);\n                var tmpKey = curNode.key;\n                curNode.key = swapNode.key;\n                swapNode.key = tmpKey;\n                curNode = swapNode;\n            }\n        }\n        eraseNodeSelfBalance(swapNode);\n        if (swapNode)\n            swapNode.remove();\n        --len;\n        root.color = TreeNode.TreeNodeColorType.black;\n    };\n    var inOrderTraversal = function (curNode, callback) {\n        if (!curNode || curNode.key === undefined)\n            return false;\n        var ifReturn = inOrderTraversal(curNode.leftChild, callback);\n        if (ifReturn)\n            return true;\n        if (callback(curNode))\n            return true;\n        return inOrderTraversal(curNode.rightChild, callback);\n    };\n    this.eraseElementByPos = function (pos) {\n        if (pos < 0 || pos >= len)\n            throw new Error(\"pos must more than 0 and less than set's size\");\n        var index = 0;\n        inOrderTraversal(root, function (curNode) {\n            if (pos === index) {\n                eraseNode(curNode);\n                return true;\n            }\n            ++index;\n            return false;\n        });\n    };\n    this.eraseElementByValue = function (value) {\n        if (this.empty())\n            return;\n        var curNode = findElementPos(root, value);\n        if (curNode === undefined || curNode.key === undefined || cmp(curNode.key, value) !== 0)\n            return;\n        eraseNode(curNode);\n    };\n    var findInsertPos = function (curNode, element) {\n        if (!curNode || curNode.key === undefined)\n            throw new Error(\"unknown error\");\n        var cmpResult = cmp(element, curNode.key);\n        if (cmpResult < 0) {\n            if (!curNode.leftChild) {\n                curNode.leftChild = new TreeNode();\n                curNode.leftChild.parent = curNode;\n                curNode.leftChild.brother = curNode.rightChild;\n                if (curNode.rightChild)\n                    curNode.rightChild.brother = curNode.leftChild;\n                return curNode.leftChild;\n            }\n            return findInsertPos(curNode.leftChild, element);\n        }\n        else if (cmpResult > 0) {\n            if (!curNode.rightChild) {\n                curNode.rightChild = new TreeNode();\n                curNode.rightChild.parent = curNode;\n                curNode.rightChild.brother = curNode.leftChild;\n                if (curNode.leftChild)\n                    curNode.leftChild.brother = curNode.rightChild;\n                return curNode.rightChild;\n            }\n            return findInsertPos(curNode.rightChild, element);\n        }\n        return curNode;\n    };\n    var insertNodeSelfBalance = function (curNode) {\n        var parentNode = curNode.parent;\n        if (!parentNode) {\n            if (curNode === root)\n                return;\n            throw new Error(\"unknown error\");\n        }\n        if (parentNode.color === TreeNode.TreeNodeColorType.black)\n            return;\n        if (parentNode.color === TreeNode.TreeNodeColorType.red) {\n            var uncleNode = parentNode.brother;\n            var grandParent = parentNode.parent;\n            if (!grandParent)\n                throw new Error(\"unknown error\");\n            if (uncleNode && uncleNode.color === TreeNode.TreeNodeColorType.red) {\n                uncleNode.color = parentNode.color = TreeNode.TreeNodeColorType.black;\n                grandParent.color = TreeNode.TreeNodeColorType.red;\n                insertNodeSelfBalance(grandParent);\n            }\n            else if (!uncleNode || uncleNode.color === TreeNode.TreeNodeColorType.black) {\n                if (parentNode === grandParent.leftChild) {\n                    if (curNode === parentNode.leftChild) {\n                        parentNode.color = TreeNode.TreeNodeColorType.black;\n                        grandParent.color = TreeNode.TreeNodeColorType.red;\n                        var newRoot = grandParent.rotateRight();\n                        if (grandParent === root)\n                            root = newRoot;\n                    }\n                    else if (curNode === parentNode.rightChild) {\n                        var newRoot = parentNode.rotateLeft();\n                        if (grandParent === root)\n                            root = newRoot;\n                        insertNodeSelfBalance(parentNode);\n                    }\n                }\n                else if (parentNode === grandParent.rightChild) {\n                    if (curNode === parentNode.leftChild) {\n                        var newRoot = parentNode.rotateRight();\n                        if (grandParent === root)\n                            root = newRoot;\n                        insertNodeSelfBalance(parentNode);\n                    }\n                    else if (curNode === parentNode.rightChild) {\n                        parentNode.color = TreeNode.TreeNodeColorType.black;\n                        grandParent.color = TreeNode.TreeNodeColorType.red;\n                        var newRoot = grandParent.rotateLeft();\n                        if (grandParent === root)\n                            root = newRoot;\n                    }\n                }\n            }\n        }\n    };\n    this.insert = function (element) {\n        if (element === null || element === undefined) {\n            throw new Error(\"to avoid some unnecessary errors, we don't suggest you insert null or undefined here\");\n        }\n        if (this.empty()) {\n            ++len;\n            root.key = element;\n            root.color = TreeNode.TreeNodeColorType.black;\n            return;\n        }\n        var curNode = findInsertPos(root, element);\n        if (curNode.key !== undefined && cmp(curNode.key, element) === 0)\n            return;\n        ++len;\n        curNode.key = element;\n        insertNodeSelfBalance(curNode);\n        root.color = TreeNode.TreeNodeColorType.black;\n    };\n    var findElementPos = function (curNode, element) {\n        if (!curNode || curNode.key === undefined)\n            return undefined;\n        var cmpResult = cmp(element, curNode.key);\n        if (cmpResult < 0)\n            return findElementPos(curNode.leftChild, element);\n        else if (cmpResult > 0)\n            return findElementPos(curNode.rightChild, element);\n        return curNode;\n    };\n    this.find = function (element) {\n        var curNode = findElementPos(root, element);\n        return curNode !== undefined && curNode.key !== undefined && cmp(curNode.key, element) === 0;\n    };\n    var _lowerBound = function (curNode, key) {\n        if (!curNode || curNode.key === undefined)\n            return undefined;\n        var cmpResult = cmp(curNode.key, key);\n        if (cmpResult === 0)\n            return curNode.key;\n        if (cmpResult < 0)\n            return _lowerBound(curNode.rightChild, key);\n        var res = _lowerBound(curNode.leftChild, key);\n        if (res !== undefined)\n            return res;\n        return curNode.key;\n    };\n    this.lowerBound = function (key) {\n        return _lowerBound(root, key);\n    };\n    var _upperBound = function (curNode, key) {\n        if (!curNode || curNode.key === undefined)\n            return undefined;\n        var cmpResult = cmp(curNode.key, key);\n        if (cmpResult <= 0)\n            return _upperBound(curNode.rightChild, key);\n        var res = _upperBound(curNode.leftChild, key);\n        if (res !== undefined)\n            return res;\n        return curNode.key;\n    };\n    this.upperBound = function (key) {\n        return _upperBound(root, key);\n    };\n    var _reverseLowerBound = function (curNode, key) {\n        if (!curNode || curNode.key === undefined)\n            return undefined;\n        var cmpResult = cmp(curNode.key, key);\n        if (cmpResult === 0)\n            return curNode.key;\n        if (cmpResult > 0)\n            return _reverseLowerBound(curNode.leftChild, key);\n        var res = _reverseLowerBound(curNode.rightChild, key);\n        if (res !== undefined)\n            return res;\n        return curNode.key;\n    };\n    this.reverseLowerBound = function (key) {\n        return _reverseLowerBound(root, key);\n    };\n    var _reverseUpperBound = function (curNode, key) {\n        if (!curNode || curNode.key === undefined)\n            return undefined;\n        var cmpResult = cmp(curNode.key, key);\n        if (cmpResult >= 0)\n            return _reverseUpperBound(curNode.leftChild, key);\n        var res = _reverseUpperBound(curNode.rightChild, key);\n        if (res !== undefined)\n            return res;\n        return curNode.key;\n    };\n    this.reverseUpperBound = function (key) {\n        return _reverseUpperBound(root, key);\n    };\n    // waiting for optimization, this is O(mlog(n+m)) algorithm now, but we expect it to be O(mlog(n/m+1)).\n    // (https://en.wikipedia.org/wiki/Red%E2%80%93black_tree#Set_operations_and_bulk_operations)\n    this.union = function (other) {\n        var _this = this;\n        other.forEach(function (element) { return _this.insert(element); });\n    };\n    this.getHeight = function () {\n        if (this.empty())\n            return 0;\n        var traversal = function (curNode) {\n            if (!curNode)\n                return 1;\n            return Math.max(traversal(curNode.leftChild), traversal(curNode.rightChild)) + 1;\n        };\n        return traversal(root);\n    };\n    var iterationFunc = function (curNode) {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!curNode || curNode.key === undefined)\n                        return [2 /*return*/];\n                    return [5 /*yield**/, __values(iterationFunc(curNode.leftChild))];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, curNode.key];\n                case 2:\n                    _a.sent();\n                    return [5 /*yield**/, __values(iterationFunc(curNode.rightChild))];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    };\n    this[Symbol.iterator] = function () {\n        return iterationFunc(root);\n    };\n    container.forEach(function (element) { return _this.insert(element); });\n    Object.freeze(this);\n}\nObject.freeze(Set);\nexport default Set;\n"]},"metadata":{},"sourceType":"module"}