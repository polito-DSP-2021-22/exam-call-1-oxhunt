{"ast":null,"code":"/**\n * All the API calls\n */\nimport dayjs from 'dayjs';\nimport Task from './components/Task';\nimport User from './components/User';\nconst BASEURL = '/api/';\n\nfunction getJson(httpResponsePromise) {\n  return new Promise((resolve, reject) => {\n    httpResponsePromise.then(response => {\n      if (response.ok) {\n        // always return {} from server, never null or non json, otherwise it will fail\n        response.json().then(json => resolve(json)).catch(err => reject({\n          error: \"Cannot parse server response\"\n        }));\n      } else {\n        // analyze the cause of error\n        response.json().then(obj => reject(obj)) // error msg in the response body\n        .catch(err => reject({\n          error: \"Cannot parse server response\"\n        })); // something else\n      }\n    }).catch(err => reject({\n      error: \"Cannot communicate\"\n    })); // connection error\n  });\n}\n\nconst getTasks = async (filter, page) => {\n  let url = BASEURL + '/tasks' + (filter ? \"?filter=\" + filter : \"\");\n  const extension = \"&page=\" + page;\n  if (extension !== \"&page=undefined\" && extension !== \"&page=null\") url += extension;\n  return getJson(fetch(url)).then(json => {\n    const tasks = json.pageItems.map(task => Object.assign({}, task, {\n      deadline: task.deadline && dayjs(task.deadline)\n    }, {\n      id: task.tid\n    }));\n    localStorage.setItem('totalPages', json.totalPages);\n    localStorage.setItem('currentPage', json.pageNumber);\n    localStorage.setItem('totalItems', json.totalItems);\n    localStorage.setItem('maxSizePage', json.maxItemsPerPage);\n    return tasks;\n  });\n};\n\nconst getPublicTasks = async page => {\n  if (page === undefined) page = 0;\n  let url = BASEURL + 'tasks?filter=public';\n\n  if (page) {\n    url += \"&page=\" + page;\n  }\n\n  return getJson(fetch(url)).then(json => {\n    const tasks = json.pageItems.map(task => Object.assign({}, task, {\n      deadline: task.deadline && dayjs(task.deadline)\n    }, {\n      id: task.tid\n    }));\n    localStorage.setItem('totalPages', json.totalPages);\n    localStorage.setItem('currentPage', json.pageNumber);\n    localStorage.setItem('totalItems', json.totalItems);\n    localStorage.setItem('maxSizePage', json.maxItemsPerPage);\n    return tasks;\n  });\n};\n\nasync function getAllOwnedTasks() {\n  console.log(\"getAllOwnedTasks\");\n  /*delete this*/\n\n  let url = BASEURL + '/tasks?filter=owned';\n  let allTasks = [];\n  let finished = false;\n\n  while (!finished) {\n    const response = await fetch(url);\n    const responseJson = await response.json();\n    const tasksJson = responseJson.pageItems;\n    const links = responseJson.links;\n\n    if (response.ok) {\n      tasksJson.forEach(t => {\n        let task = new Task(t.tid, t.description, t.important, t.private, t.deadline, t.project, t.completed);\n        allTasks.push(task);\n      });\n      let next = links.filter(l => l.rel === \"next\")[0]; // i take the value of the link called \"next\"\n\n      if (!next) {\n        finished = true;\n      } else {\n        url = next.href;\n      }\n    } else {\n      let err = {\n        status: response.status,\n        errObj: tasksJson\n      };\n      throw err; // An object with the error coming from the server\n    }\n  }\n\n  return allTasks;\n}\n\nfunction addTask(task) {\n  task.important = task.important ? 1 : 0;\n  task.private = task.private ? 1 : 0;\n  console.log(\"addTask: \");\n  /*delete this*/\n\n  return getJson(fetch(BASEURL + \"/tasks\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ ...task,\n      completed: false\n    })\n  }));\n}\n\nfunction updateTask(task) {\n  console.log(\"updateTask: task: \", task);\n  /*delete this*/\n\n  task.important = task.important ? 1 : 0;\n  task.private = task.private ? 1 : 0;\n  return fetch(BASEURL + \"/tasks/\" + task.id, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  });\n}\n\nasync function deleteTask(task) {\n  console.log(\"deleteTask: \", task.id);\n  /*delete this*/\n\n  const response = await fetch(BASEURL + \"/tasks/\" + task.id, {\n    method: 'DELETE'\n  });\n\n  if (!response.ok) {\n    let err = {\n      status: response.status,\n      errObj: response.json\n    };\n    throw err;\n  }\n}\n\nasync function completeTask(task) {\n  console.log(\"completeTask: \", task);\n  /*delete this*/\n\n  const response = await fetch(BASEURL + \"/tasks/\" + task.id, {\n    method: 'POST'\n  });\n\n  if (!response.ok) {\n    let err = {\n      status: response.status,\n      errObj: response.json\n    };\n    throw err;\n  }\n}\n\nasync function selectTask(task, userId) {\n  console.log(\"select Task: \" + task.id);\n  /*delete this*/\n\n  const response = await fetch(BASEURL + \"/users/\" + userId, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      taskId: task.id\n    })\n  });\n\n  if (!response.ok) {\n    console.log(response);\n    let status = response.status;\n    let err;\n    if (status === 409) err = {\n      error: \"That task has already been selected by another user\"\n    };else if (status === 500) err = {\n      error: \"Internal server error\"\n    };\n    throw err;\n  }\n}\n\nasync function logIn(credentials) {\n  console.log(\"login: \" + credentials.email + credentials.password);\n  /*delete this*/\n\n  let response = await fetch('/api/users/session', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n\n  if (response.ok) {\n    const user = await response.json();\n    console.log(\"login performed successfully: \", user);\n    localStorage.setItem('activeTask', user.activeTask);\n    return user;\n  } else if (response.status >= 400 && response.status < 500) {\n    throw new Error(\"Invalid Login Credentials\");\n  } else if (response.status >= 500) {\n    throw new Error(\"Server is Unreachable\");\n  } else {\n    throw new Error(\"An unexpected Error occurred\");\n  }\n}\n\nasync function logOut() {\n  console.log(\"logOut\");\n  /*delete this*/\n\n  await fetch(BASEURL + '/users/session', {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nasync function getUserInfo() {\n  try {\n    const response = await fetch(BASEURL + \"users/session\");\n\n    if (response.ok) {\n      const user = await response.json();\n      localStorage.setItem('activeTask', user.activeTask);\n      return user;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nasync function getUsers() {\n  console.log(\"getUsers, active user: \");\n  /*delete this*/\n\n  const response = await fetch(BASEURL + \"users\");\n  const responseJson = await response.json();\n\n  if (response.ok) {\n    return responseJson.map(u => {\n      return new User(u.aid, u.name, u.email);\n    });\n  } else {\n    let err = {\n      status: response.status,\n      errObj: responseJson\n    };\n    throw err; // An object with the error coming from the server\n  }\n}\n\nasync function assignTask(userId, taskId) {\n  console.log(\"assignTask\" + userId, taskId);\n  /*delete this*/\n\n  return new Promise((resolve, reject) => {\n    fetch(BASEURL + \"/tasks/\" + taskId + \"/assignees/\" + userId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nasync function removeAssignTask(userId, taskId) {\n  console.log(\"removeAssignTask: \" + userId + \", \" + taskId);\n  /*delete this*/\n\n  return new Promise((resolve, reject) => {\n    fetch(BASEURL + \"/tasks/\" + taskId + \"/assignees/\" + userId, {\n      method: 'DELETE'\n    }).then(response => {\n      if (response.ok) {\n        resolve(null);\n      } else {\n        // analyze the cause of error\n        response.json().then(obj => {\n          reject(obj);\n        }) // error msg in the response body\n        .catch(err => {\n          reject({\n            errors: [{\n              param: \"Application\",\n              msg: \"Cannot parse server response\"\n            }]\n          });\n        }); // something else\n      }\n    }).catch(err => {\n      reject({\n        errors: [{\n          param: \"Server\",\n          msg: \"Cannot communicate\"\n        }]\n      });\n    }); // connection errors\n  });\n}\n\nconst API = {\n  addTask,\n  getTasks,\n  getPublicTasks,\n  getAllOwnedTasks,\n  updateTask,\n  deleteTask,\n  selectTask,\n  logIn,\n  logOut,\n  getUserInfo,\n  getUsers,\n  assignTask,\n  removeAssignTask,\n  completeTask\n};\nexport default API;","map":{"version":3,"sources":["/home/labinf/exam-call-1-oxhunt/Client/src/API.js"],"names":["dayjs","Task","User","BASEURL","getJson","httpResponsePromise","Promise","resolve","reject","then","response","ok","json","catch","err","error","obj","getTasks","filter","page","url","extension","fetch","tasks","pageItems","map","task","Object","assign","deadline","id","tid","localStorage","setItem","totalPages","pageNumber","totalItems","maxItemsPerPage","getPublicTasks","undefined","getAllOwnedTasks","console","log","allTasks","finished","responseJson","tasksJson","links","forEach","t","description","important","private","project","completed","push","next","l","rel","href","status","errObj","addTask","method","headers","body","JSON","stringify","updateTask","deleteTask","completeTask","selectTask","userId","taskId","logIn","credentials","email","password","user","activeTask","Error","logOut","getUserInfo","e","getUsers","u","aid","name","assignTask","errors","param","msg","removeAssignTask","API"],"mappings":"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","sourcesContent":["/**\n * All the API calls\n */\n\nimport dayjs from 'dayjs';\nimport Task from './components/Task';\nimport User from './components/User';\n\n\nconst BASEURL = '/api/';\n\n\n\n\nfunction getJson(httpResponsePromise) {\n  return new Promise((resolve, reject) => {\n    httpResponsePromise\n      .then((response) => {\n        if (response.ok) {\n\n          // always return {} from server, never null or non json, otherwise it will fail\n          response.json()\n            .then(json => resolve(json))\n            .catch(err => reject({ error: \"Cannot parse server response\" }))\n\n        } else {\n          // analyze the cause of error\n          response.json()\n            .then(obj => reject(obj)) // error msg in the response body\n            .catch(err => reject({ error: \"Cannot parse server response\" })) // something else\n        }\n      })\n      .catch(err => reject({ error: \"Cannot communicate\" })) // connection error\n  });\n}\n\nconst getTasks = async (filter, page) => {\n  let url = BASEURL + '/tasks' + ((filter) ? \"?filter=\" + filter : \"\")\n\n  const extension = \"&page=\" + page;\n  if (extension !== \"&page=undefined\" && extension !== \"&page=null\") url += extension;\n  return getJson(\n    fetch(url)\n  ).then(json => {\n\n    const tasks = json.pageItems.map((task) => Object.assign({}, task,\n      { deadline: task.deadline && dayjs(task.deadline) },\n      { id: task.tid }\n    ));\n\n    localStorage.setItem('totalPages', json.totalPages);\n    localStorage.setItem('currentPage', json.pageNumber);\n    localStorage.setItem('totalItems', json.totalItems);\n    localStorage.setItem('maxSizePage', json.maxItemsPerPage)\n\n    return tasks\n  })\n}\n\n\nconst getPublicTasks = async (page) => {\n  if (page === undefined) page = 0;\n\n  let url = BASEURL + 'tasks?filter=public';\n  if (page) {\n    url += \"&page=\" + page;\n  }\n\n  return getJson(\n    fetch(url)\n  ).then(json => {\n\n    const tasks = json.pageItems.map((task) => Object.assign({}, task,\n      { deadline: task.deadline && dayjs(task.deadline) },\n      { id: task.tid }\n    ));\n\n    localStorage.setItem('totalPages', json.totalPages);\n    localStorage.setItem('currentPage', json.pageNumber);\n    localStorage.setItem('totalItems', json.totalItems);\n    localStorage.setItem('maxSizePage', json.maxItemsPerPage)\n    \n\n    return tasks\n  })\n\n}\n\n\n\nasync function getAllOwnedTasks() {\n\n  console.log(\"getAllOwnedTasks\") /*delete this*/\n\n  let url = BASEURL + '/tasks?filter=owned';\n  let allTasks = [];\n  let finished = false;\n\n  while (!finished) {\n    const response = await fetch(url);\n    const responseJson = await response.json();\n    const tasksJson = responseJson.pageItems;\n    const links = responseJson.links;\n    if (response.ok) {\n      tasksJson.forEach(\n        (t) => {\n          let task = new Task(t.tid, t.description, t.important, t.private, t.deadline, t.project, t.completed);\n          allTasks.push(task);\n        }\n      );\n      let next = links.filter(l => l.rel === \"next\")[0]; // i take the value of the link called \"next\"\n\n      if (!next) {\n        finished = true;\n      } else {\n        url = next.href;\n      }\n\n    } else {\n      let err = { status: response.status, errObj: tasksJson };\n      throw err; // An object with the error coming from the server\n    }\n\n  }\n\n  return allTasks;\n\n}\n\nfunction addTask(task) {\n  task.important = task.important ? 1 : 0;\n  task.private = task.private ? 1 : 0;\n  console.log(\"addTask: \") /*delete this*/\n  return getJson(\n    fetch(BASEURL + \"/tasks\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ ...task, completed: false })\n    })\n  )\n}\n\nfunction updateTask(task) {\n  console.log(\"updateTask: task: \", task) /*delete this*/\n  task.important = task.important ? 1 : 0;\n  task.private = task.private ? 1 : 0;\n\n  return fetch(BASEURL + \"/tasks/\" + task.id, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(task)\n  }\n  )\n}\n\nasync function deleteTask(task) {\n  console.log(\"deleteTask: \", task.id) /*delete this*/\n  const response = await fetch(BASEURL + \"/tasks/\" + task.id, { method: 'DELETE' });\n  if (!response.ok) {\n    let err = { status: response.status, errObj: response.json };\n    throw err;\n  }\n}\n\nasync function completeTask(task) {\n  console.log(\"completeTask: \", task) /*delete this*/\n  const response = await fetch(BASEURL + \"/tasks/\" + task.id, { method: 'POST' });\n  if (!response.ok) {\n    let err = { status: response.status, errObj: response.json };\n    throw err;\n  }\n}\n\nasync function selectTask(task, userId) {\n\n  console.log(\"select Task: \" + task.id) /*delete this*/\n  const response = await fetch(BASEURL + \"/users/\" + userId, {\n    method: 'POST', headers: { 'Content-Type': 'application/json', },\n    body: JSON.stringify({ taskId: task.id })\n  });\n  if (!response.ok) {\n    console.log(response)\n    let status = response.status;\n    let err\n    if (status === 409) err = { error: \"That task has already been selected by another user\" }\n    else if (status === 500) err = { error: \"Internal server error\" }\n    throw err;\n  }\n}\n\nasync function logIn(credentials) {\n  console.log(\"login: \" + credentials.email + credentials.password) /*delete this*/\n  let response = await fetch('/api/users/session', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  });\n  if (response.ok) {\n    const user = await response.json();\n    console.log(\"login performed successfully: \", user)\n    localStorage.setItem('activeTask', user.activeTask)\n    return user;\n  }\n  else if (response.status >= 400 && response.status < 500) {\n    throw new Error(\"Invalid Login Credentials\")\n  }\n  else if (response.status >= 500) {\n    throw new Error(\"Server is Unreachable\")\n  }\n  else {\n    throw new Error(\"An unexpected Error occurred\")\n  }\n}\n\nasync function logOut() {\n  console.log(\"logOut\") /*delete this*/\n  await fetch(BASEURL + '/users/session', {\n    method: 'DELETE', headers: { 'Content-Type': 'application/json', },\n  });\n}\n\nasync function getUserInfo() {\n  try {\n    const response = await fetch(BASEURL + \"users/session\");\n    if (response.ok) {\n      const user = await response.json();\n      localStorage.setItem('activeTask', user.activeTask)\n      return user;\n    } else {\n      return false\n    }\n  }\n  catch (e) {\n    return false\n  }\n}\n\nasync function getUsers() {\n  console.log(\"getUsers, active user: \") /*delete this*/\n  const response = await fetch(BASEURL + \"users\");\n  const responseJson = await response.json();\n  if (response.ok) {\n    return responseJson.map((u) => {\n      return new User(u.aid, u.name, u.email)\n    });\n  } else {\n    let err = { status: response.status, errObj: responseJson };\n    throw err; // An object with the error coming from the server\n  }\n\n}\n\nasync function assignTask(userId, taskId) {\n  console.log(\"assignTask\" + userId, taskId) /*delete this*/\n  return new Promise((resolve, reject) => {\n    fetch(BASEURL + \"/tasks/\" + taskId + \"/assignees/\" + userId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }).then((response) => {\n      if (response.ok) {\n        resolve(null)\n      } else {\n        // analyze the cause of error\n        response.json()\n          .then((obj) => { reject(obj); }) // error msg in the response body\n          .catch((err) => { reject({ errors: [{ param: \"Application\", msg: \"Cannot parse server response\" }] }) }); // something else\n      }\n    }).catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] }) }); // connection errors\n  });\n}\n\nasync function removeAssignTask(userId, taskId) {\n  console.log(\"removeAssignTask: \" + userId + \", \" + taskId) /*delete this*/\n  return new Promise((resolve, reject) => {\n\n    fetch(BASEURL + \"/tasks/\" + taskId + \"/assignees/\" + userId, {\n      method: 'DELETE'\n    }).then((response) => {\n      if (response.ok) {\n        resolve(null)\n      } else {\n        // analyze the cause of error\n        response.json()\n          .then((obj) => { reject(obj); }) // error msg in the response body\n          .catch((err) => { reject({ errors: [{ param: \"Application\", msg: \"Cannot parse server response\" }] }) }); // something else\n      }\n    }).catch((err) => { reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] }) }); // connection errors\n  });\n}\n\nconst API = { addTask, getTasks, getPublicTasks, getAllOwnedTasks, updateTask, deleteTask, selectTask, logIn, logOut, getUserInfo, getUsers, assignTask, removeAssignTask, completeTask }\nexport default API;\n\n"]},"metadata":{},"sourceType":"module"}